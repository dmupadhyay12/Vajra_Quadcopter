
Vajra_Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c128  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800c328  0800c328  0001c328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c804  0800c804  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c80c  0800c80c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800c814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000224  0800ca38  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800ca38  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198c7  00000000  00000000  00020252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b6  00000000  00000000  00039b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a680  00000000  00000000  0003f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbcb  00000000  00000000  00069fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015f8  00000000  00000000  00086ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018819b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  001881ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000224 	.word	0x20000224
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c310 	.word	0x0800c310

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000228 	.word	0x20000228
 800023c:	0800c310 	.word	0x0800c310

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <pwm_init>:
#include "stdint.h"

#define MAX_PULSE_TICKS 6400
#define MIN_PULSE_TICKS 3200

void pwm_init(actuator_config_t *pwm) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(pwm -> timer, pwm -> channel);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4610      	mov	r0, r2
 80009f0:	f004 f826 	bl	8004a40 <HAL_TIM_PWM_Start>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	0000      	movs	r0, r0
	...

08000a00 <pwm_update_percentage>:

void pwm_update_percentage(actuator_config_t *pwm, uint8_t pwm_update_percentage) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
    // map percentage between 1 and 2 ms, which amounts to a range between 
    // 3200 and 6400 ticks, based on a 3.2 MHz clock (16 Mhz with prescaler of 5)
    uint16_t ccr_value = (uint16_t)(MAX_PULSE_TICKS - MIN_PULSE_TICKS) * (pwm_update_percentage / 100.0);
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a16:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000ab0 <pwm_update_percentage+0xb0>
 8000a1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a1e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000ab8 <pwm_update_percentage+0xb8>
 8000a22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a2a:	ee17 3a90 	vmov	r3, s15
 8000a2e:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <pwm_update_percentage+0x44>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	89fa      	ldrh	r2, [r7, #14]
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	e02c      	b.n	8000a9e <pwm_update_percentage+0x9e>
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d105      	bne.n	8000a58 <pwm_update_percentage+0x58>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	6393      	str	r3, [r2, #56]	; 0x38
 8000a56:	e022      	b.n	8000a9e <pwm_update_percentage+0x9e>
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d105      	bne.n	8000a6c <pwm_update_percentage+0x6c>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a6a:	e018      	b.n	8000a9e <pwm_update_percentage+0x9e>
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	d105      	bne.n	8000a80 <pwm_update_percentage+0x80>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	e00e      	b.n	8000a9e <pwm_update_percentage+0x9e>
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	2b10      	cmp	r3, #16
 8000a86:	d105      	bne.n	8000a94 <pwm_update_percentage+0x94>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	e004      	b.n	8000a9e <pwm_update_percentage+0x9e>
    __HAL_TIM_SET_COMPARE(pwm -> timer, pwm -> channel, (uint32_t) ccr_value);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	f3af 8000 	nop.w
 8000ab0:	00000000 	.word	0x00000000
 8000ab4:	40590000 	.word	0x40590000
 8000ab8:	00000000 	.word	0x00000000
 8000abc:	40a90000 	.word	0x40a90000

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MX_DMA_Init+0x38>)
 8000acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f001 fdc5 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f001 fdde 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <MX_GPIO_Init>:
     PD1   ------> UART4_TX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b8f      	ldr	r3, [pc, #572]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a8e      	ldr	r2, [pc, #568]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b89      	ldr	r3, [pc, #548]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a88      	ldr	r2, [pc, #544]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b86      	ldr	r3, [pc, #536]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b83      	ldr	r3, [pc, #524]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a82      	ldr	r2, [pc, #520]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b7d      	ldr	r3, [pc, #500]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a7c      	ldr	r2, [pc, #496]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b77      	ldr	r3, [pc, #476]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a76      	ldr	r2, [pc, #472]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b74      	ldr	r3, [pc, #464]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a70      	ldr	r2, [pc, #448]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b6e      	ldr	r3, [pc, #440]	; (8000d50 <MX_GPIO_Init+0x254>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ba8:	486a      	ldr	r0, [pc, #424]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000baa:	f002 fac1 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	4869      	ldr	r0, [pc, #420]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000bb4:	f002 fabc 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4863      	ldr	r0, [pc, #396]	; (8000d5c <MX_GPIO_Init+0x260>)
 8000bd0:	f002 f902 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd4:	2332      	movs	r3, #50	; 0x32
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	485b      	ldr	r0, [pc, #364]	; (8000d5c <MX_GPIO_Init+0x260>)
 8000bf0:	f002 f8f2 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4854      	ldr	r0, [pc, #336]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000c10:	f002 f8e2 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	484c      	ldr	r0, [pc, #304]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000c30:	f002 f8d2 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4841      	ldr	r0, [pc, #260]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000c4e:	f002 f8c3 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4839      	ldr	r0, [pc, #228]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000c70:	f002 f8b2 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4830      	ldr	r0, [pc, #192]	; (8000d54 <MX_GPIO_Init+0x258>)
 8000c92:	f002 f8a1 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000cae:	f002 f893 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000cc6:	f002 f887 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cdc:	230a      	movs	r3, #10
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481e      	ldr	r0, [pc, #120]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000ce8:	f002 f876 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4817      	ldr	r0, [pc, #92]	; (8000d60 <MX_GPIO_Init+0x264>)
 8000d02:	f002 f869 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d16:	2308      	movs	r3, #8
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4810      	ldr	r0, [pc, #64]	; (8000d64 <MX_GPIO_Init+0x268>)
 8000d22:	f002 f859 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d38:	230b      	movs	r3, #11
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_GPIO_Init+0x25c>)
 8000d44:	f002 f848 	bl	8002dd8 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40021800 	.word	0x40021800
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_I2C1_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <MX_I2C1_Init+0x7c>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000da4:	f002 f9de 	bl	8003164 <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dae:	f000 faf1 	bl	8001394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000db6:	f002 fa65 	bl	8003284 <HAL_I2CEx_ConfigAnalogFilter>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 fae8 	bl	8001394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_I2C1_Init+0x74>)
 8000dc8:	f002 faa7 	bl	800331a <HAL_I2CEx_ConfigDigitalFilter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 fadf 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000240 	.word	0x20000240
 8000de0:	40005400 	.word	0x40005400
 8000de4:	2000090e 	.word	0x2000090e

08000de8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0ae      	sub	sp, #184	; 0xb8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2290      	movs	r2, #144	; 0x90
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 fef7 	bl	8007bfc <memset>
  if(i2cHandle->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <HAL_I2C_MspInit+0xb4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d13c      	bne.n	8000e92 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 ff96 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e32:	f000 faaf 	bl	8001394 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	2312      	movs	r3, #18
 8000e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <HAL_I2C_MspInit+0xbc>)
 8000e76:	f001 ffaf 	bl	8002dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_I2C_MspInit+0xb8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	37b8      	adds	r7, #184	; 0xb8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {  
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  // TODO: Implement system utime
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_UART_RxCpltCallback>:
volatile uint8_t header_bytes[25] = {0};
volatile bool conversion_pending = false;
volatile first_byte_detected = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  first_byte_detected = true;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_UART_RxCpltCallback+0x34>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
  if (huart -> Instance == USART3) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_UART_RxCpltCallback+0x38>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d108      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0x2a>
    if (header_bytes[0] == HEADER_BYTE) {
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d103      	bne.n	8000ee6 <HAL_UART_RxCpltCallback+0x2a>
      // printf("Interrupt detected\n");
      update_channels(&teleop_commands, header_bytes);
 8000ede:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <HAL_UART_RxCpltCallback+0x40>)
 8000ee2:	f000 faad 	bl	8001440 <update_channels>
    //   // process the bytes and reset flag
    //   printf("Read all 25 bytes!");
    //   update_channels(&teleop_commands, header_bytes);
    // } 
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002d8 	.word	0x200002d8
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	200002bc 	.word	0x200002bc
 8000efc:	20000294 	.word	0x20000294

08000f00 <HAL_TIM_IC_CaptureCallback>:

volatile bool capture_detected = 0;
volatile int channel_during_capture = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  static volatile bool rising_edge_captured_channel4 = false;
  static volatile uint16_t rising_edge_value_channel4 = 0;
  static volatile uint16_t falling_edge_value_channel4 = 0;

  channel_during_capture = htim -> Channel;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7f1b      	ldrb	r3, [r3, #28]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000f10:	601a      	str	r2, [r3, #0]
  if (channel_during_capture == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f12:	4b5f      	ldr	r3, [pc, #380]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d12c      	bne.n	8000f74 <HAL_TIM_IC_CaptureCallback+0x74>
    if (!rising_edge_captured_channel1) {
 8000f1a:	4b5e      	ldr	r3, [pc, #376]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f083 0301 	eor.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_TIM_IC_CaptureCallback+0x42>
      rising_edge_value_channel1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	485a      	ldr	r0, [pc, #360]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000f2e:	f004 fbcd 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b59      	ldr	r3, [pc, #356]	; (800109c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000f38:	801a      	strh	r2, [r3, #0]
      rising_edge_captured_channel1 = true;
 8000f3a:	4b56      	ldr	r3, [pc, #344]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
      rising_edge_captured_channel4 = false;
    }
  } else {
    // Channel irrelevant to operation of flight software
  }
}
 8000f40:	e0a1      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
      capture_detected = true;
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
      falling_edge_value_channel1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4853      	ldr	r0, [pc, #332]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000f4c:	f004 fbbe 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000f56:	801a      	strh	r2, [r3, #0]
      update_pulse_width(&throttle_channel, rising_edge_value_channel1, falling_edge_value_channel1);
 8000f58:	4b50      	ldr	r3, [pc, #320]	; (800109c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000f60:	8812      	ldrh	r2, [r2, #0]
 8000f62:	b292      	uxth	r2, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	4850      	ldr	r0, [pc, #320]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8000f68:	f000 fa4a 	bl	8001400 <update_pulse_width>
      rising_edge_captured_channel1 = false;
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	e088      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
  else if (channel_during_capture == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d129      	bne.n	8000fd0 <HAL_TIM_IC_CaptureCallback+0xd0>
    if (!rising_edge_captured_channel2) {
 8000f7c:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0xa4>
      rising_edge_value_channel2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4842      	ldr	r0, [pc, #264]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000f90:	f004 fb9c 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000f9a:	801a      	strh	r2, [r3, #0]
      rising_edge_captured_channel2 = true;
 8000f9c:	4b43      	ldr	r3, [pc, #268]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	e070      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
      falling_edge_value_channel2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	483c      	ldr	r0, [pc, #240]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000fa8:	f004 fb90 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000fb2:	801a      	strh	r2, [r3, #0]
      update_pulse_width(&roll_channel, rising_edge_value_channel2, falling_edge_value_channel2);
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4a3e      	ldr	r2, [pc, #248]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000fbc:	8812      	ldrh	r2, [r2, #0]
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	483d      	ldr	r0, [pc, #244]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000fc4:	f000 fa1c 	bl	8001400 <update_pulse_width>
      rising_edge_captured_channel2 = false;
 8000fc8:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
}
 8000fce:	e05a      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
  else if (channel_during_capture == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d129      	bne.n	800102c <HAL_TIM_IC_CaptureCallback+0x12c>
    if (!rising_edge_captured_channel3) {
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <HAL_TIM_IC_CaptureCallback+0x100>
      rising_edge_value_channel1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8000fe8:	2108      	movs	r1, #8
 8000fea:	482b      	ldr	r0, [pc, #172]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000fec:	f004 fb6e 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000ff6:	801a      	strh	r2, [r3, #0]
      rising_edge_captured_channel3 = true;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	e042      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
      falling_edge_value_channel3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_3);
 8001000:	2108      	movs	r1, #8
 8001002:	4825      	ldr	r0, [pc, #148]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001004:	f004 fb62 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 800100e:	801a      	strh	r2, [r3, #0]
      update_pulse_width(&yaw_channel, rising_edge_value_channel3, falling_edge_value_channel3);
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	b292      	uxth	r2, r2
 800101c:	4619      	mov	r1, r3
 800101e:	482a      	ldr	r0, [pc, #168]	; (80010c8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001020:	f000 f9ee 	bl	8001400 <update_pulse_width>
      rising_edge_captured_channel3 = false;
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	e02c      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
  else if (channel_during_capture == HAL_TIM_ACTIVE_CHANNEL_4) {
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x190>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d128      	bne.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
    if (!rising_edge_captured_channel4) {
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <HAL_TIM_IC_CaptureCallback+0x15c>
      rising_edge_value_channel4 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8001044:	210c      	movs	r1, #12
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001048:	f004 fb40 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001052:	801a      	strh	r2, [r3, #0]
      rising_edge_captured_channel4 = true;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	e014      	b.n	8001086 <HAL_TIM_IC_CaptureCallback+0x186>
      falling_edge_value_channel4 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800105c:	210c      	movs	r1, #12
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001060:	f004 fb34 	bl	80056cc <HAL_TIM_ReadCapturedValue>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800106a:	801a      	strh	r2, [r3, #0]
      update_pulse_width(&pitch_channel, rising_edge_value_channel4, falling_edge_value_channel4);
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	b292      	uxth	r2, r2
 8001078:	4619      	mov	r1, r3
 800107a:	4817      	ldr	r0, [pc, #92]	; (80010d8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800107c:	f000 f9c0 	bl	8001400 <update_pulse_width>
      rising_edge_captured_channel4 = false;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002e0 	.word	0x200002e0
 8001094:	200002e4 	.word	0x200002e4
 8001098:	20000364 	.word	0x20000364
 800109c:	200002e6 	.word	0x200002e6
 80010a0:	200002dc 	.word	0x200002dc
 80010a4:	200002e8 	.word	0x200002e8
 80010a8:	20000020 	.word	0x20000020
 80010ac:	200002ea 	.word	0x200002ea
 80010b0:	200002ec 	.word	0x200002ec
 80010b4:	200002ee 	.word	0x200002ee
 80010b8:	20000024 	.word	0x20000024
 80010bc:	200002f0 	.word	0x200002f0
 80010c0:	200002f2 	.word	0x200002f2
 80010c4:	200002f4 	.word	0x200002f4
 80010c8:	20000028 	.word	0x20000028
 80010cc:	200002f6 	.word	0x200002f6
 80010d0:	200002f8 	.word	0x200002f8
 80010d4:	200002fa 	.word	0x200002fa
 80010d8:	2000002c 	.word	0x2000002c

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0b4      	sub	sp, #208	; 0xd0
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f001 f98e 	bl	8002402 <HAL_Init>
  UART_HandleTypeDef huart;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f8e7 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f7ff fd07 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80010ee:	f7ff fce7 	bl	8000ac0 <MX_DMA_Init>
  MX_TIM4_Init();
 80010f2:	f000 fdb7 	bl	8001c64 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80010f6:	f000 ff83 	bl	8002000 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010fa:	f000 ffb1 	bl	8002060 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010fe:	f7ff fe33 	bl	8000d68 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001102:	f000 fb2f 	bl	8001764 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001106:	f000 fe45 	bl	8001d94 <MX_TIM5_Init>
  MX_FATFS_Init();
 800110a:	f006 fc87 	bl	8007a1c <MX_FATFS_Init>
  MX_TIM3_Init();
 800110e:	f000 fd17 	bl	8001b40 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001112:	f000 ffd5 	bl	80020c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize timer interrupts

  HAL_TIM_Base_Start(&htim3);
 8001116:	4859      	ldr	r0, [pc, #356]	; (800127c <main+0x1a0>)
 8001118:	f003 fb48 	bl	80047ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800111c:	4858      	ldr	r0, [pc, #352]	; (8001280 <main+0x1a4>)
 800111e:	f003 fb45 	bl	80047ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001122:	4858      	ldr	r0, [pc, #352]	; (8001284 <main+0x1a8>)
 8001124:	f003 fb42 	bl	80047ac <HAL_TIM_Base_Start>
  
  HAL_TIM_Base_Start_IT(&htim4);
 8001128:	4855      	ldr	r0, [pc, #340]	; (8001280 <main+0x1a4>)
 800112a:	f003 fbaf 	bl	800488c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800112e:	4855      	ldr	r0, [pc, #340]	; (8001284 <main+0x1a8>)
 8001130:	f003 fbac 	bl	800488c <HAL_TIM_Base_Start_IT>

  // Start input capture interrupts
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001134:	2100      	movs	r1, #0
 8001136:	4851      	ldr	r0, [pc, #324]	; (800127c <main+0x1a0>)
 8001138:	f003 fdde 	bl	8004cf8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800113c:	2104      	movs	r1, #4
 800113e:	484f      	ldr	r0, [pc, #316]	; (800127c <main+0x1a0>)
 8001140:	f003 fdda 	bl	8004cf8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001144:	2108      	movs	r1, #8
 8001146:	484d      	ldr	r0, [pc, #308]	; (800127c <main+0x1a0>)
 8001148:	f003 fdd6 	bl	8004cf8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800114c:	210c      	movs	r1, #12
 800114e:	484b      	ldr	r0, [pc, #300]	; (800127c <main+0x1a0>)
 8001150:	f003 fdd2 	bl	8004cf8 <HAL_TIM_IC_Start_IT>

  // Initialize UART RX Interrupts

  pwm_init(&left_front_motor);
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <main+0x1ac>)
 8001156:	f7ff fc41 	bl	80009dc <pwm_init>
  pwm_init(&right_front_motor);
 800115a:	484c      	ldr	r0, [pc, #304]	; (800128c <main+0x1b0>)
 800115c:	f7ff fc3e 	bl	80009dc <pwm_init>
  pwm_init(&left_back_motor);
 8001160:	484b      	ldr	r0, [pc, #300]	; (8001290 <main+0x1b4>)
 8001162:	f7ff fc3b 	bl	80009dc <pwm_init>
  pwm_init(&right_back_motor);
 8001166:	484b      	ldr	r0, [pc, #300]	; (8001294 <main+0x1b8>)
 8001168:	f7ff fc38 	bl	80009dc <pwm_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  typedef enum {UNCALIBRATED, DISARMED, ARMED} quadcopter_state_t;

  quadcopter_state_t current_state = UNCALIBRATED;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* USER CODE BEGIN PFP */
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  /* USER CODE END PFP */
  // Kick off receiving new packets

  HAL_UART_Receive_IT(&huart3, header_bytes, 25);
 8001172:	2219      	movs	r2, #25
 8001174:	4948      	ldr	r1, [pc, #288]	; (8001298 <main+0x1bc>)
 8001176:	4849      	ldr	r0, [pc, #292]	; (800129c <main+0x1c0>)
 8001178:	f005 f97f 	bl	800647a <HAL_UART_Receive_IT>
  while (1)
  { 

    HAL_UART_Receive_IT(&huart3, header_bytes, 25);
 800117c:	2219      	movs	r2, #25
 800117e:	4946      	ldr	r1, [pc, #280]	; (8001298 <main+0x1bc>)
 8001180:	4846      	ldr	r0, [pc, #280]	; (800129c <main+0x1c0>)
 8001182:	f005 f97a 	bl	800647a <HAL_UART_Receive_IT>

    */

    // Update RC control state

    pwm_update_percentage(&left_front_motor, 25);
 8001186:	2119      	movs	r1, #25
 8001188:	483f      	ldr	r0, [pc, #252]	; (8001288 <main+0x1ac>)
 800118a:	f7ff fc39 	bl	8000a00 <pwm_update_percentage>
    pwm_update_percentage(&right_front_motor, 50);
 800118e:	2132      	movs	r1, #50	; 0x32
 8001190:	483e      	ldr	r0, [pc, #248]	; (800128c <main+0x1b0>)
 8001192:	f7ff fc35 	bl	8000a00 <pwm_update_percentage>
    pwm_update_percentage(&left_back_motor, 75);
 8001196:	214b      	movs	r1, #75	; 0x4b
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <main+0x1b4>)
 800119a:	f7ff fc31 	bl	8000a00 <pwm_update_percentage>
    pwm_update_percentage(&right_back_motor, 100);
 800119e:	2164      	movs	r1, #100	; 0x64
 80011a0:	483c      	ldr	r0, [pc, #240]	; (8001294 <main+0x1b8>)
 80011a2:	f7ff fc2d 	bl	8000a00 <pwm_update_percentage>

    float roll_input = get_channel_percentage(&roll_channel);
 80011a6:	483e      	ldr	r0, [pc, #248]	; (80012a0 <main+0x1c4>)
 80011a8:	f000 f8fa 	bl	80013a0 <get_channel_percentage>
 80011ac:	4603      	mov	r3, r0
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b6:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
    float yaw_input = get_channel_percentage(&yaw_channel);
 80011ba:	483a      	ldr	r0, [pc, #232]	; (80012a4 <main+0x1c8>)
 80011bc:	f000 f8f0 	bl	80013a0 <get_channel_percentage>
 80011c0:	4603      	mov	r3, r0
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    float throttle_input = get_channel_percentage(&throttle_channel);
 80011ce:	4836      	ldr	r0, [pc, #216]	; (80012a8 <main+0x1cc>)
 80011d0:	f000 f8e6 	bl	80013a0 <get_channel_percentage>
 80011d4:	4603      	mov	r3, r0
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011de:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    float pitch_input = get_channel_percentage(&pitch_channel);
 80011e2:	4832      	ldr	r0, [pc, #200]	; (80012ac <main+0x1d0>)
 80011e4:	f000 f8dc 	bl	80013a0 <get_channel_percentage>
 80011e8:	4603      	mov	r3, r0
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    // Print all of the channel values:
    // for (int i = 0; i < 4; i++) {
    //   printf("Channel %d: %d\n", i, teleop_commands.channels[i]);
    // }

    printf("Channel: %d\n", teleop_commands.channels[3]);
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <main+0x1d4>)
 80011f8:	88db      	ldrh	r3, [r3, #6]
 80011fa:	4619      	mov	r1, r3
 80011fc:	482d      	ldr	r0, [pc, #180]	; (80012b4 <main+0x1d8>)
 80011fe:	f007 fb4f 	bl	80088a0 <iprintf>

    switch(current_state) {
 8001202:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001206:	2b02      	cmp	r3, #2
 8001208:	d036      	beq.n	8001278 <main+0x19c>
 800120a:	2b02      	cmp	r3, #2
 800120c:	dcb6      	bgt.n	800117c <main+0xa0>
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <main+0x13c>
 8001212:	2b01      	cmp	r3, #1
 8001214:	d004      	beq.n	8001220 <main+0x144>
 8001216:	e030      	b.n	800127a <main+0x19e>
      case UNCALIBRATED:
        // Run calibration steps and advance state to DISARMED
        // vajra_calibrate();
        current_state = DISARMED;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
        break;
 800121e:	e02c      	b.n	800127a <main+0x19e>
      case DISARMED:
        // When the quadcopter is disarmed, it can only advance to an armed state if both sticks
        // are in the bottom left of the box. 
        // This occurs when all four channels are less than 10% 
        if ((yaw_input < 10.0) && (roll_input < 10.0) && (throttle_input < 10.0) && (pitch_input < 10.0)) {
 8001220:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001224:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d400      	bmi.n	8001234 <main+0x158>
          current_state = ARMED;
          // TODO: Set LEDs or some form of audio-visual feedback indicating that the quadcopter is armed
        } else {
          // Continue in disarmed state 
        }
        break;
 8001232:	e022      	b.n	800127a <main+0x19e>
        if ((yaw_input < 10.0) && (roll_input < 10.0) && (throttle_input < 10.0) && (pitch_input < 10.0)) {
 8001234:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001238:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	d400      	bmi.n	8001248 <main+0x16c>
        break;
 8001246:	e018      	b.n	800127a <main+0x19e>
        if ((yaw_input < 10.0) && (roll_input < 10.0) && (throttle_input < 10.0) && (pitch_input < 10.0)) {
 8001248:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800124c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	d400      	bmi.n	800125c <main+0x180>
        break;
 800125a:	e00e      	b.n	800127a <main+0x19e>
        if ((yaw_input < 10.0) && (roll_input < 10.0) && (throttle_input < 10.0) && (pitch_input < 10.0)) {
 800125c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001260:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	d400      	bmi.n	8001270 <main+0x194>
        break;
 800126e:	e004      	b.n	800127a <main+0x19e>
          current_state = ARMED;
 8001270:	2302      	movs	r3, #2
 8001272:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
        break;
 8001276:	e000      	b.n	800127a <main+0x19e>
      case ARMED:
        // state estimation and control loop goes ahead - in each timer interrupt iteration you must 
        // create a 
        // TODO: Check if disarm switch/channel is flicked, and if so, switch back into DISARMED state
        break;
 8001278:	bf00      	nop
  { 
 800127a:	e77f      	b.n	800117c <main+0xa0>
 800127c:	20000364 	.word	0x20000364
 8001280:	200003b0 	.word	0x200003b0
 8001284:	200003fc 	.word	0x200003fc
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000010 	.word	0x20000010
 8001294:	20000018 	.word	0x20000018
 8001298:	200002bc 	.word	0x200002bc
 800129c:	200005b8 	.word	0x200005b8
 80012a0:	20000024 	.word	0x20000024
 80012a4:	20000028 	.word	0x20000028
 80012a8:	20000020 	.word	0x20000020
 80012ac:	2000002c 	.word	0x2000002c
 80012b0:	20000294 	.word	0x20000294
 80012b4:	0800c328 	.word	0x0800c328

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2234      	movs	r2, #52	; 0x34
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f006 fc98 	bl	8007bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <SystemClock_Config+0xb0>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <SystemClock_Config+0xb0>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xb0>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <SystemClock_Config+0xb4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <SystemClock_Config+0xb4>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <SystemClock_Config+0xb4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f845 	bl	80033b4 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001330:	f000 f830 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fadd 	bl	8003910 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800135c:	f000 f81a 	bl	8001394 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	2201      	movs	r2, #1
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <__io_putchar+0x20>)
 8001382:	f004 fff7 	bl	8006374 <HAL_UART_Transmit>

  return ch;
 8001386:	687b      	ldr	r3, [r7, #4]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000448 	.word	0x20000448

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <get_channel_percentage>:
#include "tim.h"
#include "rc_input.h"

uint8_t get_channel_percentage(input_channel_t *channel) {
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    // convert the current pulse width into a percentage from 0-100%,
    // based on the tick frequency

    // 16 MHz is passed through prescaler of 5, creating net frequency of 3.2 MHz,
    // meaning that 1 ms is 3200 ticks, and 2 ms is 6400 ticks
    uint8_t percentage = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
    // } else  if (channel -> current_pulse_width < channel -> min_pulse_width) {
    //     percentage = 0;
    // } else {
    //     percentage = (uint8_t)(((float)(channel -> current_pulse_width) * 0.75) / (float) (channel -> max_pulse_width));
    // }
    uint8_t local_pulse_width = channel -> current_pulse_width;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	73bb      	strb	r3, [r7, #14]
    percentage = (uint8_t)(((float)(local_pulse_width) / 3200.0) * 100.0);
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013bc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80013f0 <get_channel_percentage+0x50>
 80013c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80013f8 <get_channel_percentage+0x58>
 80013cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013d4:	edc7 7a00 	vstr	s15, [r7]
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	73fb      	strb	r3, [r7, #15]
    return percentage;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40a90000 	.word	0x40a90000
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40590000 	.word	0x40590000

08001400 <update_pulse_width>:

void update_pulse_width(input_channel_t *channel, uint16_t rising_edge_capture, uint16_t falling_edge_capture) {
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	803b      	strh	r3, [r7, #0]
    uint16_t new_pulse_width = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	81fb      	strh	r3, [r7, #14]
    if (falling_edge_capture < rising_edge_capture) {
 8001414:	883a      	ldrh	r2, [r7, #0]
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	429a      	cmp	r2, r3
 800141a:	d204      	bcs.n	8001426 <update_pulse_width+0x26>
        new_pulse_width = (65536 - falling_edge_capture) + rising_edge_capture;
 800141c:	887a      	ldrh	r2, [r7, #2]
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	81fb      	strh	r3, [r7, #14]
 8001424:	e003      	b.n	800142e <update_pulse_width+0x2e>
    } else {
        new_pulse_width = falling_edge_capture - rising_edge_capture;
 8001426:	883a      	ldrh	r2, [r7, #0]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	81fb      	strh	r3, [r7, #14]
    }
    channel -> current_pulse_width = new_pulse_width;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	89fa      	ldrh	r2, [r7, #14]
 8001432:	805a      	strh	r2, [r3, #2]
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <update_channels>:
#include "sbus.h"
#include "stdint.h"
#include "stdbool.h"
#include <stddef.h>

void update_channels(channel_info_t* channel_info, uint8_t* buf) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    // iterates through the 25-byte buffer received as per SBUS protocol
    // updates the channels when a new packet is received

    if (buf != NULL && channel_info != NULL) {
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 8182 	beq.w	8001756 <update_channels+0x316>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 817e 	beq.w	8001756 <update_channels+0x316>
        channel_info -> channels[0] = (buf[1] | (buf[2] << 8)) & 0x07FF;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b21a      	sxth	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3302      	adds	r3, #2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29b      	uxth	r3, r3
 8001472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	801a      	strh	r2, [r3, #0]
        channel_info -> channels[1] = ((buf[2] >> 3) | (buf[3] << 5)) & 0x07FF;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3302      	adds	r3, #2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3303      	adds	r3, #3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	805a      	strh	r2, [r3, #2]
        channel_info -> channels[2] = ((buf[3] >> 6) | (buf[4] << 2) | (buf[5] << 10)) & 0x07FF;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3303      	adds	r3, #3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3304      	adds	r3, #4
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3305      	adds	r3, #5
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	029b      	lsls	r3, r3, #10
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	809a      	strh	r2, [r3, #4]
        channel_info -> channels[3] = ((buf[5] >> 1) | (buf[6] << 7)) & 0x07FF;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3305      	adds	r3, #5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	3306      	adds	r3, #6
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	80da      	strh	r2, [r3, #6]
        channel_info -> channels[4] = ((buf[6] >> 4) | (buf[7] << 4)) & 0x07FF;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	3306      	adds	r3, #6
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	b2db      	uxtb	r3, r3
 8001506:	b21a      	sxth	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3307      	adds	r3, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	811a      	strh	r2, [r3, #8]
        channel_info -> channels[5] = ((buf[7] >> 7) | (buf[8] << 1) | (buf[9] << 9)) & 0x07FF;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3307      	adds	r3, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	09db      	lsrs	r3, r3, #7
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b21a      	sxth	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3308      	adds	r3, #8
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3309      	adds	r3, #9
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	815a      	strh	r2, [r3, #10]
        channel_info -> channels[6] = ((buf[9] >> 2) | (buf[10] << 6)) & 0x07FF;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3309      	adds	r3, #9
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b21a      	sxth	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	330a      	adds	r3, #10
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	819a      	strh	r2, [r3, #12]
        channel_info -> channels[7] = ((buf[10] >> 5) | (buf[11] << 3)) & 0x07FF;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	330a      	adds	r3, #10
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	b2db      	uxtb	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	330b      	adds	r3, #11
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21b      	sxth	r3, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	81da      	strh	r2, [r3, #14]
        channel_info -> channels[8] = ((buf[12] >> 0) | (buf[13] << 8)) & 0x07FF;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	330c      	adds	r3, #12
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	330d      	adds	r3, #13
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	821a      	strh	r2, [r3, #16]
        channel_info -> channels[9] = ((buf[13] >> 3) | (buf[14] << 5)) & 0x07FF;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	330d      	adds	r3, #13
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	330e      	adds	r3, #14
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	825a      	strh	r2, [r3, #18]
        channel_info -> channels[10] = ((buf[14] >> 6) | (buf[15] << 2) | (buf[16] << 10)) & 0x07FF;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	330e      	adds	r3, #14
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	330f      	adds	r3, #15
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3310      	adds	r3, #16
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b21b      	sxth	r3, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	829a      	strh	r2, [r3, #20]
        channel_info -> channels[11] = ((buf[16] >> 1) | (buf[17] << 7)) & 0x07FF;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	3310      	adds	r3, #16
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b21a      	sxth	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3311      	adds	r3, #17
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	01db      	lsls	r3, r3, #7
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	b29b      	uxth	r3, r3
 800163a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	82da      	strh	r2, [r3, #22]
        channel_info -> channels[12] = ((buf[17] >> 4) | (buf[18] << 4)) & 0x07FF;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3311      	adds	r3, #17
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3312      	adds	r3, #18
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	831a      	strh	r2, [r3, #24]
        channel_info -> channels[13] = ((buf[18] >> 7) | (buf[19] << 1) | (buf[20] << 9)) & 0x07FF;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3312      	adds	r3, #18
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	09db      	lsrs	r3, r3, #7
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b21a      	sxth	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3313      	adds	r3, #19
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3314      	adds	r3, #20
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	b21b      	sxth	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b21b      	sxth	r3, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001698:	b29a      	uxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	835a      	strh	r2, [r3, #26]
        channel_info -> channels[14] = ((buf[20] >> 2) | (buf[21] << 6)) & 0x07FF;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3314      	adds	r3, #20
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3315      	adds	r3, #21
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	839a      	strh	r2, [r3, #28]
        channel_info -> channels[15] = ((buf[21] >> 5) | (buf[22] << 3)) & 0x07FF;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3315      	adds	r3, #21
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3316      	adds	r3, #22
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21b      	sxth	r3, r3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	83da      	strh	r2, [r3, #30]

        if (buf[23] & (1 << 0)) {
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3317      	adds	r3, #23
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <update_channels+0x2c0>
            channel_info -> channels[16] = 1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	841a      	strh	r2, [r3, #32]
 80016fe:	e002      	b.n	8001706 <update_channels+0x2c6>
        } else {
            channel_info -> channels[16] = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	841a      	strh	r2, [r3, #32]
        }

        if (buf[23] & (1 << 1)) {
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3317      	adds	r3, #23
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <update_channels+0x2dc>
            channel_info -> channels[17] = 1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	845a      	strh	r2, [r3, #34]	; 0x22
 800171a:	e002      	b.n	8001722 <update_channels+0x2e2>
        } else {
            channel_info -> channels[17] = 0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	845a      	strh	r2, [r3, #34]	; 0x22
        }

        channel_info -> frame_lost = buf[23] & (1 << 2);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3317      	adds	r3, #23
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        channel_info -> failsafe_activated = buf[23] & (1 << 3);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3317      	adds	r3, #23
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2da      	uxtb	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    }
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_SPI1_Init+0x74>)
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <MX_SPI1_Init+0x78>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_SPI1_Init+0x74>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_SPI1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_SPI1_Init+0x74>)
 800177e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001782:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_SPI1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_SPI1_Init+0x74>)
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_SPI1_Init+0x74>)
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017b2:	2207      	movs	r2, #7
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017be:	2208      	movs	r2, #8
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_SPI1_Init+0x74>)
 80017c4:	f002 fef0 	bl	80045a8 <HAL_SPI_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ce:	f7ff fde1 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002fc 	.word	0x200002fc
 80017dc:	40013000 	.word	0x40013000

080017e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_SPI_MspInit+0xb4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d143      	bne.n	800188a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_SPI_MspInit+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800184a:	2330      	movs	r3, #48	; 0x30
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800185a:	2305      	movs	r3, #5
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <HAL_SPI_MspInit+0xbc>)
 8001866:	f001 fab7 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800186a:	2330      	movs	r3, #48	; 0x30
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_SPI_MspInit+0xc0>)
 8001886:	f001 faa7 	bl	8002dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40013000 	.word	0x40013000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_MspInit+0x44>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_MspInit+0x44>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x44>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x44>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x44>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 fda0 	bl	800247c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA1_Stream1_IRQHandler+0x10>)
 8001946:	f001 f80b 	bl	8002960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000670 	.word	0x20000670

08001954 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM3_IRQHandler+0x10>)
 800195a:	f003 fb1d 	bl	8004f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000364 	.word	0x20000364

08001968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART1_IRQHandler+0x10>)
 800196e:	f004 fdc9 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000448 	.word	0x20000448

0800197c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART3_IRQHandler+0x10>)
 8001982:	f004 fdbf 	bl	8006504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200005b8 	.word	0x200005b8

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_kill>:

int _kill(int pid, int sig)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019aa:	f006 f8fd 	bl	8007ba8 <__errno>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2216      	movs	r2, #22
 80019b2:	601a      	str	r2, [r3, #0]
  return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_exit>:

void _exit (int status)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ffe7 	bl	80019a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d2:	e7fe      	b.n	80019d2 <_exit+0x12>

080019d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e00a      	b.n	80019fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e6:	f3af 8000 	nop.w
 80019ea:	4601      	mov	r1, r0
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf0      	blt.n	80019e6 <_read+0x12>
  }

  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e009      	b.n	8001a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fca1 	bl	8001370 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf1      	blt.n	8001a20 <_write+0x12>
  }
  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_close>:

int _close(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f006 f862 	bl	8007ba8 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20080000 	.word	0x20080000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	20000360 	.word	0x20000360
 8001b18:	200006f8 	.word	0x200006f8

08001b1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <MX_TIM3_Init+0x120>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b74:	2204      	movs	r2, #4
 8001b76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000-1;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b80:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001b84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b92:	4832      	ldr	r0, [pc, #200]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001b94:	f002 fdb3 	bl	80046fe <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001b9e:	f7ff fbf9 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4619      	mov	r1, r3
 8001bae:	482b      	ldr	r0, [pc, #172]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001bb0:	f003 fcc2 	bl	8005538 <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001bba:	f7ff fbeb 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001bbe:	4827      	ldr	r0, [pc, #156]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001bc0:	f003 f838 	bl	8004c34 <HAL_TIM_IC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001bca:	f7ff fbe3 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481f      	ldr	r0, [pc, #124]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001bde:	f004 fabf 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001be8:	f7ff fbd4 	bl	8001394 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bec:	230a      	movs	r3, #10
 8001bee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	4816      	ldr	r0, [pc, #88]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001c04:	f003 fae7 	bl	80051d6 <HAL_TIM_IC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001c0e:	f7ff fbc1 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2204      	movs	r2, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001c1a:	f003 fadc 	bl	80051d6 <HAL_TIM_IC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001c24:	f7ff fbb6 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001c30:	f003 fad1 	bl	80051d6 <HAL_TIM_IC_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001c3a:	f7ff fbab 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	220c      	movs	r2, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_TIM3_Init+0x11c>)
 8001c46:	f003 fac6 	bl	80051d6 <HAL_TIM_IC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8001c50:	f7ff fba0 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	3730      	adds	r7, #48	; 0x30
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000364 	.word	0x20000364
 8001c60:	40000400 	.word	0x40000400

08001c64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001c98:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <MX_TIM4_Init+0x12c>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000-1;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001caa:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cbc:	4833      	ldr	r0, [pc, #204]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001cbe:	f002 fd1e 	bl	80046fe <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001cc8:	f7ff fb64 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482c      	ldr	r0, [pc, #176]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001cda:	f003 fc2d 	bl	8005538 <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ce4:	f7ff fb56 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ce8:	4828      	ldr	r0, [pc, #160]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001cea:	f002 fe47 	bl	800497c <HAL_TIM_PWM_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cf4:	f7ff fb4e 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	4821      	ldr	r0, [pc, #132]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d08:	f004 fa2a 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d12:	f7ff fb3f 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d16:	2360      	movs	r3, #96	; 0x60
 8001d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4817      	ldr	r0, [pc, #92]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d2e:	f003 faef 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d38:	f7ff fb2c 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2204      	movs	r2, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4812      	ldr	r0, [pc, #72]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d44:	f003 fae4 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001d4e:	f7ff fb21 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	2208      	movs	r2, #8
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d5a:	f003 fad9 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001d64:	f7ff fb16 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d70:	f003 face 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001d7a:	f7ff fb0b 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <MX_TIM4_Init+0x128>)
 8001d80:	f000 f906 	bl	8001f90 <HAL_TIM_MspPostInit>

}
 8001d84:	bf00      	nop
 8001d86:	3738      	adds	r7, #56	; 0x38
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200003b0 	.word	0x200003b0
 8001d90:	40000800 	.word	0x40000800

08001d94 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <MX_TIM5_Init+0x98>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001dda:	f002 fc90 	bl	80046fe <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001de4:	f7ff fad6 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001df6:	f003 fb9f 	bl	8005538 <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e00:	f7ff fac8 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_TIM5_Init+0x94>)
 8001e12:	f004 f9a5 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e1c:	f7ff faba 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200003fc 	.word	0x200003fc
 8001e2c:	40000c00 	.word	0x40000c00

08001e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	; 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_TIM_Base_MspInit+0x144>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d169      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0xf6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e52:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a42      	ldr	r2, [pc, #264]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a3c      	ldr	r2, [pc, #240]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a36      	ldr	r2, [pc, #216]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	482b      	ldr	r0, [pc, #172]	; (8001f7c <HAL_TIM_Base_MspInit+0x14c>)
 8001ece:	f000 ff83 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4824      	ldr	r0, [pc, #144]	; (8001f80 <HAL_TIM_Base_MspInit+0x150>)
 8001eee:	f000 ff73 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ef2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f04:	2302      	movs	r3, #2
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481d      	ldr	r0, [pc, #116]	; (8001f84 <HAL_TIM_Base_MspInit+0x154>)
 8001f10:	f000 ff62 	bl	8002dd8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f000 fbaa 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fbc3 	bl	80026aa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f24:	e022      	b.n	8001f6c <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM4)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_TIM_Base_MspInit+0x158>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10c      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
}
 8001f48:	e010      	b.n	8001f6c <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM5)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_TIM_Base_MspInit+0x15c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10b      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_TIM_Base_MspInit+0x148>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	; 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00

08001f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_TIM_MspPostInit+0x64>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d11c      	bne.n	8001fec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_TIM_MspPostInit+0x68>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_TIM_MspPostInit+0x68>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_MspPostInit+0x68>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_TIM_MspPostInit+0x6c>)
 8001fe8:	f000 fef6 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020c00 	.word	0x40020c00

08002000 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <MX_USART1_UART_Init+0x5c>)
 8002008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002044:	f004 f938 	bl	80062b8 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800204e:	f7ff f9a1 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000448 	.word	0x20000448
 800205c:	40011000 	.word	0x40011000

08002060 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <MX_USART2_UART_Init+0x5c>)
 8002068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x58>)
 80020a4:	f004 f908 	bl	80062b8 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ae:	f7ff f971 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000500 	.word	0x20000500
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <MX_USART3_UART_Init+0x64>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <MX_USART3_UART_Init+0x68>)
 80020ce:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020e8:	220c      	movs	r2, #12
 80020ea:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_USART3_UART_Init+0x60>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_USART3_UART_Init+0x60>)
 8002100:	2202      	movs	r2, #2
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_USART3_UART_Init+0x60>)
 8002106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_USART3_UART_Init+0x60>)
 800210e:	f004 f8d3 	bl	80062b8 <HAL_UART_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8002118:	f7ff f93c 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200005b8 	.word	0x200005b8
 8002124:	40004800 	.word	0x40004800
 8002128:	000186a0 	.word	0x000186a0

0800212c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0b2      	sub	sp, #200	; 0xc8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	2290      	movs	r2, #144	; 0x90
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f005 fd55 	bl	8007bfc <memset>
  if(uartHandle->Instance==USART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a8d      	ldr	r2, [pc, #564]	; (800238c <HAL_UART_MspInit+0x260>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d159      	bne.n	8002210 <HAL_UART_MspInit+0xe4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800215c:	2340      	movs	r3, #64	; 0x40
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002160:	2300      	movs	r3, #0
 8002162:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fdf5 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002174:	f7ff f90e 	bl	8001394 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002178:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_UART_MspInit+0x264>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_UART_MspInit+0x264>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	6453      	str	r3, [r2, #68]	; 0x44
 8002184:	4b82      	ldr	r3, [pc, #520]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a7e      	ldr	r2, [pc, #504]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b7c      	ldr	r3, [pc, #496]	; (8002390 <HAL_UART_MspInit+0x264>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80021c2:	2304      	movs	r3, #4
 80021c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4871      	ldr	r0, [pc, #452]	; (8002394 <HAL_UART_MspInit+0x268>)
 80021d0:	f000 fe02 	bl	8002dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ec:	2307      	movs	r3, #7
 80021ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4866      	ldr	r0, [pc, #408]	; (8002394 <HAL_UART_MspInit+0x268>)
 80021fa:	f000 fded 	bl	8002dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2025      	movs	r0, #37	; 0x25
 8002204:	f000 fa35 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002208:	2025      	movs	r0, #37	; 0x25
 800220a:	f000 fa4e 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800220e:	e0b8      	b.n	8002382 <HAL_UART_MspInit+0x256>
  else if(uartHandle->Instance==USART2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a60      	ldr	r2, [pc, #384]	; (8002398 <HAL_UART_MspInit+0x26c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d13b      	bne.n	8002292 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800221e:	2300      	movs	r3, #0
 8002220:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4618      	mov	r0, r3
 8002228:	f001 fd96 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8002232:	f7ff f8af 	bl	8001394 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_UART_MspInit+0x264>)
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a4f      	ldr	r2, [pc, #316]	; (8002390 <HAL_UART_MspInit+0x264>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_UART_MspInit+0x264>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002266:	2360      	movs	r3, #96	; 0x60
 8002268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227e:	2307      	movs	r3, #7
 8002280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002288:	4619      	mov	r1, r3
 800228a:	4844      	ldr	r0, [pc, #272]	; (800239c <HAL_UART_MspInit+0x270>)
 800228c:	f000 fda4 	bl	8002dd8 <HAL_GPIO_Init>
}
 8002290:	e077      	b.n	8002382 <HAL_UART_MspInit+0x256>
  else if(uartHandle->Instance==USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_UART_MspInit+0x274>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d172      	bne.n	8002382 <HAL_UART_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 fd54 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80022b6:	f7ff f86d 	bl	8001394 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_UART_MspInit+0x264>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002304:	2307      	movs	r3, #7
 8002306:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800230e:	4619      	mov	r1, r3
 8002310:	4824      	ldr	r0, [pc, #144]	; (80023a4 <HAL_UART_MspInit+0x278>)
 8002312:	f000 fd61 	bl	8002dd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_UART_MspInit+0x280>)
 800231a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800231e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002322:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002336:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 8002358:	f000 f9c2 	bl	80026e0 <HAL_DMA_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8002362:	f7ff f817 	bl	8001394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800236a:	675a      	str	r2, [r3, #116]	; 0x74
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_UART_MspInit+0x27c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2027      	movs	r0, #39	; 0x27
 8002378:	f000 f97b 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800237c:	2027      	movs	r0, #39	; 0x27
 800237e:	f000 f994 	bl	80026aa <HAL_NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	37c8      	adds	r7, #200	; 0xc8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40004400 	.word	0x40004400
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40004800 	.word	0x40004800
 80023a4:	40020800 	.word	0x40020800
 80023a8:	20000670 	.word	0x20000670
 80023ac:	40026028 	.word	0x40026028

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)

  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023da:	f7ff fb9f 	bl	8001b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f005 fbe9 	bl	8007bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7fe fe7b 	bl	80010dc <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80023f4:	0800c814 	.word	0x0800c814
  ldr r2, =_sbss
 80023f8:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80023fc:	200006f8 	.word	0x200006f8

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>

08002402 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002406:	2003      	movs	r0, #3
 8002408:	f000 f928 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240c:	2000      	movs	r0, #0
 800240e:	f000 f805 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002412:	f7ff fa47 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x54>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x58>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f943 	bl	80026c6 <HAL_SYSTICK_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e00e      	b.n	8002468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b0f      	cmp	r3, #15
 800244e:	d80a      	bhi.n	8002466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002450:	2200      	movs	r2, #0
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f000 f90b 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_InitTick+0x5c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000030 	.word	0x20000030
 8002474:	20000038 	.word	0x20000038
 8002478:	20000034 	.word	0x20000034

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000038 	.word	0x20000038
 80024a0:	200006d0 	.word	0x200006d0

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200006d0 	.word	0x200006d0

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <__NVIC_SetPriorityGrouping+0x40>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <__NVIC_SetPriorityGrouping+0x40>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00
 8002500:	05fa0000 	.word	0x05fa0000

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff feda 	bl	80024a4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fec1 	bl	80024a4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa7b 	bl	8002ce0 <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa32 	bl	8002c74 <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	e010803f 	.word	0xe010803f

0800283c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800284a:	f7ff fe2b 	bl	80024a4 <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d008      	beq.n	800286e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e052      	b.n	8002914 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0216 	bic.w	r2, r2, #22
 800287c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <HAL_DMA_Abort+0x62>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0208 	bic.w	r2, r2, #8
 80028ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028be:	e013      	b.n	80028e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c0:	f7ff fdf0 	bl	80024a4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d90c      	bls.n	80028e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e015      	b.n	8002914 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e4      	bne.n	80028c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	223f      	movs	r2, #63	; 0x3f
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00c      	b.n	8002954 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2205      	movs	r2, #5
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800296c:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <HAL_DMA_IRQHandler+0x248>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a8e      	ldr	r2, [pc, #568]	; (8002bac <HAL_DMA_IRQHandler+0x24c>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2208      	movs	r2, #8
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	2208      	movs	r2, #8
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2201      	movs	r2, #1
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d012      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2201      	movs	r2, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f043 0202 	orr.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2204      	movs	r2, #4
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d012      	beq.n	8002a38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	2204      	movs	r2, #4
 8002a26:	409a      	lsls	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d043      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d03c      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
 8002a8e:	e01f      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e016      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0208 	bic.w	r2, r2, #8
 8002abe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 808f 	beq.w	8002c00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8087 	beq.w	8002c00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2220      	movs	r2, #32
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d136      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0216 	bic.w	r2, r2, #22
 8002b18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x1da>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0208 	bic.w	r2, r2, #8
 8002b48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	223f      	movs	r2, #63	; 0x3f
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07e      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
        }
        return;
 8002b76:	e079      	b.n	8002c6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01d      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d031      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e02c      	b.n	8002c00 <HAL_DMA_IRQHandler+0x2a0>
 8002ba6:	bf00      	nop
 8002ba8:	20000030 	.word	0x20000030
 8002bac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d023      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e01e      	b.n	8002c00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10f      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0210 	bic.w	r2, r2, #16
 8002bde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d032      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2205      	movs	r2, #5
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d307      	bcc.n	8002c48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f2      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x2cc>
 8002c46:	e000      	b.n	8002c4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
 8002c6a:	e000      	b.n	8002c6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c6c:	bf00      	nop
    }
  }
}
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3b10      	subs	r3, #16
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d908      	bls.n	8002cb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <DMA_CalcBaseAndBitshift+0x68>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb2:	e006      	b.n	8002cc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <DMA_CalcBaseAndBitshift+0x68>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	aaaaaaab 	.word	0xaaaaaaab
 8002cd8:	0800c350 	.word	0x0800c350
 8002cdc:	fffffc00 	.word	0xfffffc00

08002ce0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11f      	bne.n	8002d3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d856      	bhi.n	8002dae <DMA_CheckFifoParam+0xce>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <DMA_CheckFifoParam+0x28>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d2b 	.word	0x08002d2b
 8002d10:	08002d19 	.word	0x08002d19
 8002d14:	08002daf 	.word	0x08002daf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d046      	beq.n	8002db2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e043      	b.n	8002db2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d32:	d140      	bne.n	8002db6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e03d      	b.n	8002db6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d121      	bne.n	8002d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d837      	bhi.n	8002dba <DMA_CheckFifoParam+0xda>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <DMA_CheckFifoParam+0x70>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d67 	.word	0x08002d67
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	08002d79 	.word	0x08002d79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e030      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d025      	beq.n	8002dbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d76:	e022      	b.n	8002dbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d80:	d11f      	bne.n	8002dc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d86:	e01c      	b.n	8002dc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d903      	bls.n	8002d96 <DMA_CheckFifoParam+0xb6>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d003      	beq.n	8002d9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d94:	e018      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9a:	e015      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dac:	e00b      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dae:	bf00      	nop
 8002db0:	e00a      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e008      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e006      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e175      	b.n	80030e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f040 8164 	bne.w	80030de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <HAL_GPIO_Init+0x56>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d017      	beq.n	8002ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d123      	bne.n	8002f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	220f      	movs	r2, #15
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	69b9      	ldr	r1, [r7, #24]
 8002f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80be 	beq.w	80030de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f62:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a65      	ldr	r2, [pc, #404]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_GPIO_Init+0x324>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f7a:	4a61      	ldr	r2, [pc, #388]	; (8003100 <HAL_GPIO_Init+0x328>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_GPIO_Init+0x32c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d037      	beq.n	8003016 <HAL_GPIO_Init+0x23e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d031      	beq.n	8003012 <HAL_GPIO_Init+0x23a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a56      	ldr	r2, [pc, #344]	; (800310c <HAL_GPIO_Init+0x334>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x236>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a55      	ldr	r2, [pc, #340]	; (8003110 <HAL_GPIO_Init+0x338>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x232>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a54      	ldr	r2, [pc, #336]	; (8003114 <HAL_GPIO_Init+0x33c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x22e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_GPIO_Init+0x340>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x22a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_GPIO_Init+0x344>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x226>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_GPIO_Init+0x348>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x222>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a50      	ldr	r2, [pc, #320]	; (8003124 <HAL_GPIO_Init+0x34c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x21e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4f      	ldr	r2, [pc, #316]	; (8003128 <HAL_GPIO_Init+0x350>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x21a>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	e012      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	e010      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	e00e      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	e00c      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e00a      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003002:	2305      	movs	r3, #5
 8003004:	e008      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003006:	2304      	movs	r3, #4
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300a:	2303      	movs	r3, #3
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x240>
 800300e:	2302      	movs	r3, #2
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x240>
 8003016:	2300      	movs	r3, #0
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f002 0203 	and.w	r2, r2, #3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003028:	4935      	ldr	r1, [pc, #212]	; (8003100 <HAL_GPIO_Init+0x328>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_GPIO_Init+0x354>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305a:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_GPIO_Init+0x354>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_GPIO_Init+0x354>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_GPIO_Init+0x354>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_GPIO_Init+0x354>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_GPIO_Init+0x354>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3301      	adds	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	f67f ae86 	bls.w	8002df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40013800 	.word	0x40013800
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40021000 	.word	0x40021000
 8003118:	40021400 	.word	0x40021400
 800311c:	40021800 	.word	0x40021800
 8003120:	40021c00 	.word	0x40021c00
 8003124:	40022000 	.word	0x40022000
 8003128:	40022400 	.word	0x40022400
 800312c:	40013c00 	.word	0x40013c00

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	619a      	str	r2, [r3, #24]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fe2c 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e006      	b.n	80031ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d104      	bne.n	80031fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_I2C_Init+0x11c>)
 800320a:	430b      	orrs	r3, r1
 800320c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800321c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69d9      	ldr	r1, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	02008000 	.word	0x02008000

08003284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	d138      	bne.n	800330c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e032      	b.n	800330e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2224      	movs	r2, #36	; 0x24
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	d139      	bne.n	80033a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333a:	2302      	movs	r3, #2
 800333c:	e033      	b.n	80033a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2224      	movs	r2, #36	; 0x24
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800336c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e29b      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	4b96      	ldr	r3, [pc, #600]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e4:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x130>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e275      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x7a>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x9c>
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7b      	ldr	r2, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xc0>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6b      	ldr	r2, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7ff f806 	bl	80024a4 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7ff f802 	bl	80024a4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e229      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fff2 	bl	80024a4 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe ffee 	bl	80024a4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e215      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x110>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d069      	beq.n	80035c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1e9      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	493d      	ldr	r1, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e040      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe ffa4 	bl	80024a4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe ffa0 	bl	80024a4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1c7      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4929      	ldr	r1, [pc, #164]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
 8003592:	e018      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe ff80 	bl	80024a4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe ff7c 	bl	80024a4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1a3      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d038      	beq.n	8003644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d019      	beq.n	800360e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe ff5d 	bl	80024a4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fe ff59 	bl	80024a4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e180      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x23a>
 800360c:	e01a      	b.n	8003644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe ff43 	bl	80024a4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe ff3f 	bl	80024a4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d903      	bls.n	8003638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e166      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
 8003634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b92      	ldr	r3, [pc, #584]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a4 	beq.w	800379a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b89      	ldr	r3, [pc, #548]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a88      	ldr	r2, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367a:	4b83      	ldr	r3, [pc, #524]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003686:	4b80      	ldr	r3, [pc, #512]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7f      	ldr	r2, [pc, #508]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fe ff07 	bl	80024a4 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe ff03 	bl	80024a4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e12a      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x31a>
 80036c0:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a6f      	ldr	r2, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e02d      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x33c>
 80036d6:	4b6b      	ldr	r3, [pc, #428]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x35e>
 80036f8:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a61      	ldr	r2, [pc, #388]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fe feb7 	bl	80024a4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe feb3 	bl	80024a4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0d8      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x386>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fea1 	bl	80024a4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fe9d 	bl	80024a4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0c2      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80ae 	beq.w	8003900 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d06d      	beq.n	800388c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d14b      	bne.n	8003850 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fe6e 	bl	80024a4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe fe6a 	bl	80024a4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e091      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	071b      	lsls	r3, r3, #28
 8003816:	491b      	ldr	r1, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fe3c 	bl	80024a4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fe38 	bl	80024a4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e05f      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x47c>
 800384e:	e057      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fe22 	bl	80024a4 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fe1e 	bl	80024a4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e045      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x4b0>
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_RCC_OscConfig+0x558>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d129      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d122      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d119      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10f      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0d0      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	4965      	ldr	r1, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d040      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e073      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06b      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4936      	ldr	r1, [pc, #216]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a04:	f7fe fd4e 	bl	80024a4 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe fd4a 	bl	80024a4 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e053      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 020f 	bic.w	r2, r3, #15
 8003a4a:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fcaa 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800c338 	.word	0x0800c338
 8003ae0:	20000030 	.word	0x20000030
 8003ae4:	20000034 	.word	0x20000034

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b094      	sub	sp, #80	; 0x50
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	2300      	movs	r3, #0
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b00:	4b79      	ldr	r3, [pc, #484]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80e1 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e0db      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b73      	ldr	r3, [pc, #460]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b20:	e0db      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b26:	e0d8      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4621      	mov	r1, r4
 8003b74:	1a51      	subs	r1, r2, r1
 8003b76:	6139      	str	r1, [r7, #16]
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b96:	4651      	mov	r1, sl
 8003b98:	018a      	lsls	r2, r1, #6
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	eb49 0303 	adc.w	r3, r9, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf8:	f7fc fd36 	bl	8000668 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	e058      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4611      	mov	r1, r2
 8003c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0159      	lsls	r1, r3, #5
 8003c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c32:	0150      	lsls	r0, r2, #5
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c3e:	4649      	mov	r1, r9
 8003c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c58:	ebb2 040a 	subs.w	r4, r2, sl
 8003c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb45 0303 	adc.w	r3, r5, r3
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	f7fc fcdc 	bl	8000668 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3750      	adds	r7, #80	; 0x50
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000030 	.word	0x20000030

08003d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d0c:	f7ff fff0 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0a9b      	lsrs	r3, r3, #10
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	0800c348 	.word	0x0800c348

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d34:	f7ff ffdc 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0b5b      	lsrs	r3, r3, #13
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0800c348 	.word	0x0800c348

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d012      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d80:	4b69      	ldr	r3, [pc, #420]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a68      	ldr	r2, [pc, #416]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d8a:	6093      	str	r3, [r2, #8]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	4964      	ldr	r1, [pc, #400]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db2:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	4959      	ldr	r1, [pc, #356]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d017      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dee:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	494a      	ldr	r1, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 808b 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	4a39      	ldr	r2, [pc, #228]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	; 0x40
 8003e48:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e54:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fe fb20 	bl	80024a4 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fe fb1c 	bl	80024a4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	; 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e38f      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e86:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d035      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d02e      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eba:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d114      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fae4 	bl	80024a4 <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fe fae0 	bl	80024a4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e351      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ee      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0e:	d111      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	4901      	ldr	r1, [pc, #4]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	0ffffcff 	.word	0x0ffffcff
 8003f34:	4bac      	ldr	r3, [pc, #688]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4aab      	ldr	r2, [pc, #684]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f3e:	6093      	str	r3, [r2, #8]
 8003f40:	4ba9      	ldr	r3, [pc, #676]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	49a6      	ldr	r1, [pc, #664]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f5e:	4ba2      	ldr	r3, [pc, #648]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	4aa0      	ldr	r2, [pc, #640]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f6e:	4b9e      	ldr	r3, [pc, #632]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	499b      	ldr	r1, [pc, #620]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8c:	4b96      	ldr	r3, [pc, #600]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9a:	4993      	ldr	r1, [pc, #588]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fae:	4b8e      	ldr	r3, [pc, #568]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbc:	498a      	ldr	r1, [pc, #552]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd0:	4b85      	ldr	r3, [pc, #532]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fde:	4982      	ldr	r1, [pc, #520]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4979      	ldr	r1, [pc, #484]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004014:	4b74      	ldr	r3, [pc, #464]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4971      	ldr	r1, [pc, #452]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004036:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f023 020c 	bic.w	r2, r3, #12
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	4968      	ldr	r1, [pc, #416]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004058:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	4960      	ldr	r1, [pc, #384]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407a:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	4957      	ldr	r1, [pc, #348]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800409c:	4b52      	ldr	r3, [pc, #328]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	494f      	ldr	r1, [pc, #316]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040be:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	4946      	ldr	r1, [pc, #280]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040e0:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ee:	493e      	ldr	r1, [pc, #248]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004102:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	4935      	ldr	r1, [pc, #212]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004124:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004132:	492d      	ldr	r1, [pc, #180]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	4924      	ldr	r1, [pc, #144]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004164:	d101      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004166:	2301      	movs	r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	4914      	ldr	r1, [pc, #80]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b8:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041dc:	4902      	ldr	r1, [pc, #8]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f8:	4b8a      	ldr	r3, [pc, #552]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	4986      	ldr	r1, [pc, #536]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800421c:	4b81      	ldr	r3, [pc, #516]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004222:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422c:	497d      	ldr	r1, [pc, #500]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d006      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80d6 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004248:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fe f926 	bl	80024a4 <HAL_GetTick>
 8004258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800425c:	f7fe f922 	bl	80024a4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e195      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d021      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11d      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800429c:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	019a      	lsls	r2, r3, #6
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	071b      	lsls	r3, r3, #28
 80042c2:	4958      	ldr	r1, [pc, #352]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f4:	d129      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042f6:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004304:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430a:	0f1b      	lsrs	r3, r3, #28
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	019a      	lsls	r2, r3, #6
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	493e      	ldr	r1, [pc, #248]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004332:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	f023 021f 	bic.w	r2, r3, #31
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	3b01      	subs	r3, #1
 8004342:	4938      	ldr	r1, [pc, #224]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01d      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004356:	4b33      	ldr	r3, [pc, #204]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435c:	0e1b      	lsrs	r3, r3, #24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004364:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	019a      	lsls	r2, r3, #6
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	4926      	ldr	r1, [pc, #152]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	019a      	lsls	r2, r3, #6
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	491a      	ldr	r1, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fe f869 	bl	80024a4 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043d6:	f7fe f865 	bl	80024a4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b64      	cmp	r3, #100	; 0x64
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0d8      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f040 80ce 	bne.w	8004598 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fe f84c 	bl	80024a4 <HAL_GetTick>
 800440c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800440e:	e00b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004410:	f7fe f848 	bl	80024a4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d904      	bls.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0bb      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d0ec      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02e      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12a      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800446c:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	0f1b      	lsrs	r3, r3, #28
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	019a      	lsls	r2, r3, #6
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	061b      	lsls	r3, r3, #24
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	071b      	lsls	r3, r3, #28
 8004492:	4944      	ldr	r1, [pc, #272]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800449a:	4b42      	ldr	r3, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	493d      	ldr	r1, [pc, #244]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d022      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c8:	d11d      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ca:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	0e1b      	lsrs	r3, r3, #24
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	0f1b      	lsrs	r3, r3, #28
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	019a      	lsls	r2, r3, #6
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	431a      	orrs	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	071b      	lsls	r3, r3, #28
 80044fe:	4929      	ldr	r1, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d028      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	431a      	orrs	r2, r3
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	4917      	ldr	r1, [pc, #92]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4911      	ldr	r1, [pc, #68]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fd ff98 	bl	80024a4 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004578:	f7fd ff94 	bl	80024a4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e007      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004596:	d1ef      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e09d      	b.n	80046f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd f8f0 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004620:	d902      	bls.n	8004628 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e002      	b.n	800462e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004636:	d007      	beq.n	8004648 <HAL_SPI_Init+0xa0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	ea42 0103 	orr.w	r1, r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0204 	and.w	r2, r3, #4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046c4:	ea42 0103 	orr.w	r1, r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e049      	b.n	80047a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fd fb83 	bl	8001e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f001 f827 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04c      	b.n	800485e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_TIM_Base_Start+0xc0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d01d      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a22      	ldr	r2, [pc, #136]	; (8004870 <HAL_TIM_Base_Start+0xc4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a21      	ldr	r2, [pc, #132]	; (8004874 <HAL_TIM_Base_Start+0xc8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <HAL_TIM_Base_Start+0xcc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1e      	ldr	r2, [pc, #120]	; (800487c <HAL_TIM_Base_Start+0xd0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_TIM_Base_Start+0xd4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_TIM_Base_Start+0x70>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <HAL_TIM_Base_Start+0xd8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d115      	bne.n	8004848 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	4b19      	ldr	r3, [pc, #100]	; (8004888 <HAL_TIM_Base_Start+0xdc>)
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d015      	beq.n	800485a <HAL_TIM_Base_Start+0xae>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d011      	beq.n	800485a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0201 	orr.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004846:	e008      	b.n	800485a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e000      	b.n	800485c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40001800 	.word	0x40001800
 8004888:	00010007 	.word	0x00010007

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e054      	b.n	800494e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_TIM_Base_Start_IT+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d01d      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_TIM_Base_Start_IT+0xd4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	; (8004964 <HAL_TIM_Base_Start_IT+0xd8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_Base_Start_IT+0xe0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_TIM_Base_Start_IT+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_TIM_Base_Start_IT+0xe8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d115      	bne.n	8004938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_TIM_Base_Start_IT+0xec>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d015      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d011      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	e008      	b.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e000      	b.n	800494c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40010400 	.word	0x40010400
 8004970:	40014000 	.word	0x40014000
 8004974:	40001800 	.word	0x40001800
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e049      	b.n	8004a22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f841 	bl	8004a2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fee8 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_TIM_PWM_Start+0x24>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e03c      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d109      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x3e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e02f      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x58>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e022      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d109      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x72>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e015      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d109      	bne.n	8004acc <HAL_TIM_PWM_Start+0x8c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e008      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e092      	b.n	8004c0c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xb6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xc6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start+0xe6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start+0xf6>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fae4 	bl	8006114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a30      	ldr	r2, [pc, #192]	; (8004c14 <HAL_TIM_PWM_Start+0x1d4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIM_PWM_Start+0x120>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <HAL_TIM_PWM_Start+0x1d8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x124>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_PWM_Start+0x126>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <HAL_TIM_PWM_Start+0x1d4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d01d      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <HAL_TIM_PWM_Start+0x1dc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <HAL_TIM_PWM_Start+0x1e0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_TIM_PWM_Start+0x1e4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_PWM_Start+0x1d8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_TIM_PWM_Start+0x1e8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_TIM_PWM_Start+0x18a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <HAL_TIM_PWM_Start+0x1ec>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d115      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <HAL_TIM_PWM_Start+0x1f0>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d015      	beq.n	8004c08 <HAL_TIM_PWM_Start+0x1c8>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d011      	beq.n	8004c08 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	e008      	b.n	8004c08 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e000      	b.n	8004c0a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40001800 	.word	0x40001800
 8004c30:	00010007 	.word	0x00010007

08004c34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e049      	b.n	8004cda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f841 	bl	8004ce2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fd8c 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_IC_Start_IT+0x1e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e023      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x66>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_IC_Start_IT+0x2e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e01b      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x66>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_IC_Start_IT+0x3e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e013      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x66>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_IC_Start_IT+0x4e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x66>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_IC_Start_IT+0x5e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	e003      	b.n	8004d5e <HAL_TIM_IC_Start_IT+0x66>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <HAL_TIM_IC_Start_IT+0x78>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e013      	b.n	8004d98 <HAL_TIM_IC_Start_IT+0xa0>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d104      	bne.n	8004d80 <HAL_TIM_IC_Start_IT+0x88>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e00b      	b.n	8004d98 <HAL_TIM_IC_Start_IT+0xa0>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d104      	bne.n	8004d90 <HAL_TIM_IC_Start_IT+0x98>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e003      	b.n	8004d98 <HAL_TIM_IC_Start_IT+0xa0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da0:	7b7b      	ldrb	r3, [r7, #13]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0e2      	b.n	8004f70 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_IC_Start_IT+0xc2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	e023      	b.n	8004e02 <HAL_TIM_IC_Start_IT+0x10a>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_IC_Start_IT+0xd2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	e01b      	b.n	8004e02 <HAL_TIM_IC_Start_IT+0x10a>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_IC_Start_IT+0xe2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	e013      	b.n	8004e02 <HAL_TIM_IC_Start_IT+0x10a>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_IC_Start_IT+0xf2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de8:	e00b      	b.n	8004e02 <HAL_TIM_IC_Start_IT+0x10a>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_IC_Start_IT+0x102>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	e003      	b.n	8004e02 <HAL_TIM_IC_Start_IT+0x10a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_IC_Start_IT+0x11a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_IC_Start_IT+0x142>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_IC_Start_IT+0x12a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_IC_Start_IT+0x142>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_IC_Start_IT+0x13a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_IC_Start_IT+0x142>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d841      	bhi.n	8004ec4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_TIM_IC_Start_IT+0x150>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004ec5 	.word	0x08004ec5
 8004e50:	08004ec5 	.word	0x08004ec5
 8004e54:	08004ec5 	.word	0x08004ec5
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004ec5 	.word	0x08004ec5
 8004e64:	08004ec5 	.word	0x08004ec5
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004eb3 	.word	0x08004eb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0202 	orr.w	r2, r2, #2
 8004e8a:	60da      	str	r2, [r3, #12]
      break;
 8004e8c:	e01d      	b.n	8004eca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0204 	orr.w	r2, r2, #4
 8004e9c:	60da      	str	r2, [r3, #12]
      break;
 8004e9e:	e014      	b.n	8004eca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0208 	orr.w	r2, r2, #8
 8004eae:	60da      	str	r2, [r3, #12]
      break;
 8004eb0:	e00b      	b.n	8004eca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0210 	orr.w	r2, r2, #16
 8004ec0:	60da      	str	r2, [r3, #12]
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d14e      	bne.n	8004f6e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f91b 	bl	8006114 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <HAL_TIM_IC_Start_IT+0x280>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d01d      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <HAL_TIM_IC_Start_IT+0x284>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_TIM_IC_Start_IT+0x288>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_TIM_IC_Start_IT+0x28c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_TIM_IC_Start_IT+0x290>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_TIM_IC_Start_IT+0x294>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x236>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_TIM_IC_Start_IT+0x298>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d115      	bne.n	8004f5a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <HAL_TIM_IC_Start_IT+0x29c>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d015      	beq.n	8004f6c <HAL_TIM_IC_Start_IT+0x274>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d011      	beq.n	8004f6c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	e008      	b.n	8004f6c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800
 8004f94:	00010007 	.word	0x00010007

08004f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0202 	mvn.w	r2, #2
 8004fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fb ff90 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fbb6 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fbbd 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b04      	cmp	r3, #4
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0204 	mvn.w	r2, #4
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fb ff66 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fb8c 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fb93 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b08      	cmp	r3, #8
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0208 	mvn.w	r2, #8
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2204      	movs	r2, #4
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fb ff3c 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fb62 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb69 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0210 	mvn.w	r2, #16
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2208      	movs	r2, #8
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fb ff12 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fb38 	bl	8005754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fb3f 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0201 	mvn.w	r2, #1
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fb fec6 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d10e      	bne.n	8005148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005134:	2b80      	cmp	r3, #128	; 0x80
 8005136:	d107      	bne.n	8005148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 f8a4 	bl	8006290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 f897 	bl	80062a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 faed 	bl	800577c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0220 	mvn.w	r2, #32
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 f857 	bl	800627c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e088      	b.n	8005306 <HAL_TIM_IC_ConfigChannel+0x130>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 fdbb 	bl	8005d8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 020c 	bic.w	r2, r2, #12
 8005224:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6999      	ldr	r1, [r3, #24]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
 8005238:	e060      	b.n	80052fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b04      	cmp	r3, #4
 800523e:	d11c      	bne.n	800527a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f000 fe3f 	bl	8005ed2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005262:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	619a      	str	r2, [r3, #24]
 8005278:	e040      	b.n	80052fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f000 fe8c 	bl	8005fac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 020c 	bic.w	r2, r2, #12
 80052a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69d9      	ldr	r1, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	61da      	str	r2, [r3, #28]
 80052b6:	e021      	b.n	80052fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d11c      	bne.n	80052f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f000 fea9 	bl	8006024 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	021a      	lsls	r2, r3, #8
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	61da      	str	r2, [r3, #28]
 80052f6:	e001      	b.n	80052fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0ff      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b14      	cmp	r3, #20
 800533a:	f200 80f0 	bhi.w	800551e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005399 	.word	0x08005399
 8005348:	0800551f 	.word	0x0800551f
 800534c:	0800551f 	.word	0x0800551f
 8005350:	0800551f 	.word	0x0800551f
 8005354:	080053d9 	.word	0x080053d9
 8005358:	0800551f 	.word	0x0800551f
 800535c:	0800551f 	.word	0x0800551f
 8005360:	0800551f 	.word	0x0800551f
 8005364:	0800541b 	.word	0x0800541b
 8005368:	0800551f 	.word	0x0800551f
 800536c:	0800551f 	.word	0x0800551f
 8005370:	0800551f 	.word	0x0800551f
 8005374:	0800545b 	.word	0x0800545b
 8005378:	0800551f 	.word	0x0800551f
 800537c:	0800551f 	.word	0x0800551f
 8005380:	0800551f 	.word	0x0800551f
 8005384:	0800549d 	.word	0x0800549d
 8005388:	0800551f 	.word	0x0800551f
 800538c:	0800551f 	.word	0x0800551f
 8005390:	0800551f 	.word	0x0800551f
 8005394:	080054dd 	.word	0x080054dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa96 	bl	80058d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0208 	orr.w	r2, r2, #8
 80053b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0204 	bic.w	r2, r2, #4
 80053c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	619a      	str	r2, [r3, #24]
      break;
 80053d6:	e0a5      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fae8 	bl	80059b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	619a      	str	r2, [r3, #24]
      break;
 8005418:	e084      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fb3f 	bl	8005aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0208 	orr.w	r2, r2, #8
 8005434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0204 	bic.w	r2, r2, #4
 8005444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	61da      	str	r2, [r3, #28]
      break;
 8005458:	e064      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fb95 	bl	8005b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	021a      	lsls	r2, r3, #8
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
      break;
 800549a:	e043      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fbcc 	bl	8005c40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0208 	orr.w	r2, r2, #8
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0204 	bic.w	r2, r2, #4
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054da:	e023      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fbfe 	bl	8005ce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	021a      	lsls	r2, r3, #8
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800551c:	e002      	b.n	8005524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
      break;
 8005522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop

08005538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_TIM_ConfigClockSource+0x1c>
 8005550:	2302      	movs	r3, #2
 8005552:	e0b4      	b.n	80056be <HAL_TIM_ConfigClockSource+0x186>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	4b56      	ldr	r3, [pc, #344]	; (80056c8 <HAL_TIM_ConfigClockSource+0x190>)
 8005570:	4013      	ands	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558c:	d03e      	beq.n	800560c <HAL_TIM_ConfigClockSource+0xd4>
 800558e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005592:	f200 8087 	bhi.w	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559a:	f000 8086 	beq.w	80056aa <HAL_TIM_ConfigClockSource+0x172>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d87f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d01a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0xa6>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d87b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b60      	cmp	r3, #96	; 0x60
 80055ae:	d050      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x11a>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d877      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b50      	cmp	r3, #80	; 0x50
 80055b6:	d03c      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xfa>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d873      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d058      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x13a>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d86f      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d064      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d86b      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d060      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d867      	bhi.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d05a      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	e062      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6899      	ldr	r1, [r3, #8]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f000 fd71 	bl	80060d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]
      break;
 800560a:	e04f      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f000 fd5a 	bl	80060d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562e:	609a      	str	r2, [r3, #8]
      break;
 8005630:	e03c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fc18 	bl	8005e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2150      	movs	r1, #80	; 0x50
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fd27 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 8005650:	e02c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	461a      	mov	r2, r3
 8005660:	f000 fc74 	bl	8005f4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2160      	movs	r1, #96	; 0x60
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fd17 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 8005670:	e01c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	461a      	mov	r2, r3
 8005680:	f000 fbf8 	bl	8005e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd07 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 8005690:	e00c      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fcfe 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 80056a2:	e003      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      break;
 80056a8:	e000      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	fffeff88 	.word	0xfffeff88

080056cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d831      	bhi.n	8005744 <HAL_TIM_ReadCapturedValue+0x78>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800571d 	.word	0x0800571d
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005745 	.word	0x08005745
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005727 	.word	0x08005727
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	08005731 	.word	0x08005731
 800570c:	08005745 	.word	0x08005745
 8005710:	08005745 	.word	0x08005745
 8005714:	08005745 	.word	0x08005745
 8005718:	0800573b 	.word	0x0800573b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	60fb      	str	r3, [r7, #12]

      break;
 8005724:	e00f      	b.n	8005746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	60fb      	str	r3, [r7, #12]

      break;
 800572e:	e00a      	b.n	8005746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	60fb      	str	r3, [r7, #12]

      break;
 8005738:	e005      	b.n	8005746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	60fb      	str	r3, [r7, #12]

      break;
 8005742:	e000      	b.n	8005746 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005744:	bf00      	nop
  }

  return tmpreg;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a40      	ldr	r2, [pc, #256]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d02b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d027      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d023      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d017      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <TIM_Base_SetConfig+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <TIM_Base_SetConfig+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <TIM_Base_SetConfig+0x130>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <TIM_Base_SetConfig+0x134>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <TIM_Base_SetConfig+0x138>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a23      	ldr	r2, [pc, #140]	; (80058cc <TIM_Base_SetConfig+0x13c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800
 80058c4:	40001800 	.word	0x40001800
 80058c8:	40001c00 	.word	0x40001c00
 80058cc:	40002000 	.word	0x40002000

080058d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <TIM_OC1_SetConfig+0xd8>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a21      	ldr	r2, [pc, #132]	; (80059ac <TIM_OC1_SetConfig+0xdc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC1_SetConfig+0x64>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <TIM_OC1_SetConfig+0xe0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10c      	bne.n	800594e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0308 	bic.w	r3, r3, #8
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <TIM_OC1_SetConfig+0xdc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_OC1_SetConfig+0x8e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <TIM_OC1_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d111      	bne.n	8005982 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	621a      	str	r2, [r3, #32]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	fffeff8f 	.word	0xfffeff8f
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40010400 	.word	0x40010400

080059b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0210 	bic.w	r2, r3, #16
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <TIM_OC2_SetConfig+0xe4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <TIM_OC2_SetConfig+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC2_SetConfig+0x68>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <TIM_OC2_SetConfig+0xec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10d      	bne.n	8005a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_OC2_SetConfig+0xe8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC2_SetConfig+0x94>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_OC2_SetConfig+0xec>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d113      	bne.n	8005a70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	feff8fff 	.word	0xfeff8fff
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <TIM_OC3_SetConfig+0xe8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x92>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <TIM_OC3_SetConfig+0xe8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	fffeff8f 	.word	0xfffeff8f
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400

08005b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <TIM_OC4_SetConfig+0xa4>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	031b      	lsls	r3, r3, #12
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <TIM_OC4_SetConfig+0xa8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC4_SetConfig+0x68>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <TIM_OC4_SetConfig+0xac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	feff8fff 	.word	0xfeff8fff
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400

08005c40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <TIM_OC5_SetConfig+0x98>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <TIM_OC5_SetConfig+0x9c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC5_SetConfig+0x5e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <TIM_OC5_SetConfig+0xa0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d109      	bne.n	8005cb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	fffeff8f 	.word	0xfffeff8f
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <TIM_OC6_SetConfig+0x9c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <TIM_OC6_SetConfig+0xa0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC6_SetConfig+0x60>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <TIM_OC6_SetConfig+0xa4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d109      	bne.n	8005d58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	feff8fff 	.word	0xfeff8fff
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_TI1_SetConfig+0xcc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d017      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a25      	ldr	r2, [pc, #148]	; (8005e5c <TIM_TI1_SetConfig+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	; (8005e60 <TIM_TI1_SetConfig+0xd4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	; (8005e64 <TIM_TI1_SetConfig+0xd8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <TIM_TI1_SetConfig+0xdc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_TI1_SetConfig+0xe0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <TIM_TI1_SetConfig+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <TIM_TI1_SetConfig+0x6a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <TIM_TI1_SetConfig+0x6c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e003      	b.n	8005e16 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 030a 	and.w	r3, r3, #10
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40001800 	.word	0x40001800

08005e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 030a 	bic.w	r3, r3, #10
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 0210 	bic.w	r2, r3, #16
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	031b      	lsls	r3, r3, #12
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006050:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006062:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	b29b      	uxth	r3, r3
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006076:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	031b      	lsls	r3, r3, #12
 800607c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f043 0307 	orr.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	021a      	lsls	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2201      	movs	r2, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e06d      	b.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a30      	ldr	r2, [pc, #192]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2f      	ldr	r2, [pc, #188]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a20      	ldr	r2, [pc, #128]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1a      	ldr	r2, [pc, #104]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a16      	ldr	r2, [pc, #88]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10c      	bne.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4313      	orrs	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000
 8006264:	40010400 	.word	0x40010400
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40014000 	.word	0x40014000
 8006278:	40001800 	.word	0x40001800

0800627c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e04e      	b.n	8006368 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d114      	bne.n	80062fc <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fc62 	bl	8006ba4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <HAL_UART_Init+0xb8>)
 80062ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc8c 	bl	8006c30 <UART_SetConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e022      	b.n	8006368 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fee4 	bl	80070f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800633e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800634e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ff6b 	bl	800723c <UART_CheckIdleState>
 8006366:	4603      	mov	r3, r0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	0800212d 	.word	0x0800212d

08006374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08a      	sub	sp, #40	; 0x28
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006388:	2b20      	cmp	r3, #32
 800638a:	d171      	bne.n	8006470 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_UART_Transmit+0x24>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e06a      	b.n	8006472 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2221      	movs	r2, #33	; 0x21
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063aa:	f7fc f87b 	bl	80024a4 <HAL_GetTick>
 80063ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d108      	bne.n	80063dc <HAL_UART_Transmit+0x68>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e003      	b.n	80063e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063e4:	e02c      	b.n	8006440 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	2180      	movs	r1, #128	; 0x80
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 ff70 	bl	80072d6 <UART_WaitOnFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e038      	b.n	8006472 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	3302      	adds	r3, #2
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	e007      	b.n	800642e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3301      	adds	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1cc      	bne.n	80063e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 ff3d 	bl	80072d6 <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e005      	b.n	8006472 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	e000      	b.n	8006472 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006470:	2302      	movs	r3, #2
  }
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b08a      	sub	sp, #40	; 0x28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	4613      	mov	r3, r2
 8006486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648e:	2b20      	cmp	r3, #32
 8006490:	d132      	bne.n	80064f8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <HAL_UART_Receive_IT+0x24>
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e02b      	b.n	80064fa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	623b      	str	r3, [r7, #32]
 80064d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e6      	bne.n	80064b6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	461a      	mov	r2, r3
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 ffb8 	bl	8007464 <UART_Start_Receive_IT>
 80064f4:	4603      	mov	r3, r0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3728      	adds	r7, #40	; 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b0ba      	sub	sp, #232	; 0xe8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800652a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800652e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006532:	4013      	ands	r3, r2
 8006534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d115      	bne.n	800656c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00f      	beq.n	800656c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 82b8 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
      }
      return;
 800656a:	e2b2      	b.n	8006ad2 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800656c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 811d 	beq.w	80067b0 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006586:	4b88      	ldr	r3, [pc, #544]	; (80067a8 <HAL_UART_IRQHandler+0x2a4>)
 8006588:	4013      	ands	r3, r2
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8110 	beq.w	80067b0 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d011      	beq.n	80065c0 <HAL_UART_IRQHandler+0xbc>
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b6:	f043 0201 	orr.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_UART_IRQHandler+0xec>
 80065cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2202      	movs	r2, #2
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e6:	f043 0204 	orr.w	r2, r3, #4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0x11c>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2204      	movs	r2, #4
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006616:	f043 0202 	orr.w	r2, r3, #2
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800663c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2208      	movs	r2, #8
 800664a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <HAL_UART_IRQHandler+0x18a>
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 821e 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b40      	cmp	r3, #64	; 0x40
 80066d8:	d005      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d053      	beq.n	800678e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 ff82 	bl	80075f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d143      	bne.n	8006782 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800672a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800673e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d9      	bne.n	80066fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674a:	2b00      	cmp	r3, #0
 800674c:	d013      	beq.n	8006776 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <HAL_UART_IRQHandler+0x2a8>)
 8006754:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	4618      	mov	r0, r3
 800675c:	f7fc f8de 	bl	800291c <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01d      	beq.n	80067a2 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e015      	b.n	80067a2 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e00f      	b.n	80067a2 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	e009      	b.n	80067a2 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80067a0:	e199      	b.n	8006ad6 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	bf00      	nop
    return;
 80067a4:	e197      	b.n	8006ad6 <HAL_UART_IRQHandler+0x5d2>
 80067a6:	bf00      	nop
 80067a8:	04000120 	.word	0x04000120
 80067ac:	080076b9 	.word	0x080076b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	f040 8150 	bne.w	8006a5a <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8149 	beq.w	8006a5a <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8142 	beq.w	8006a5a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2210      	movs	r2, #16
 80067dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	f040 80b8 	bne.w	800695e <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 816b 	beq.w	8006ada <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800680a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800680e:	429a      	cmp	r2, r3
 8006810:	f080 8163 	bcs.w	8006ada <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800681a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006828:	f000 8086 	beq.w	8006938 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800685a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006862:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800686e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1da      	bne.n	800682c <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800689a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800689e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e1      	bne.n	8006876 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e3      	bne.n	80068b2 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006908:	f023 0310 	bic.w	r3, r3, #16
 800690c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800691a:	65bb      	str	r3, [r7, #88]	; 0x58
 800691c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e4      	bne.n	80068f8 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006932:	4618      	mov	r0, r3
 8006934:	f7fb ff82 	bl	800283c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8006950:	b292      	uxth	r2, r2
 8006952:	1a8a      	subs	r2, r1, r2
 8006954:	b292      	uxth	r2, r2
 8006956:	4611      	mov	r1, r2
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800695c:	e0bd      	b.n	8006ada <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80af 	beq.w	8006ade <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 8006980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80aa 	beq.w	8006ade <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800699e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
 80069ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e4      	bne.n	800698a <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	623b      	str	r3, [r7, #32]
   return(result);
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069e4:	633a      	str	r2, [r7, #48]	; 0x30
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 0310 	bic.w	r3, r3, #16
 8006a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e4      	bne.n	8006a0c <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a4e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8006a52:	4611      	mov	r1, r2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a58:	e041      	b.n	8006ade <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <HAL_UART_IRQHandler+0x584>
 8006a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a7a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a86:	e02d      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01c      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
    }
    return;
 8006ab0:	e017      	b.n	8006ae2 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d012      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
 8006abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fe0c 	bl	80076e8 <UART_EndTransmit_IT>
    return;
 8006ad0:	e008      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e006      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
    return;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
      return;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_IRQHandler+0x5e0>
    return;
 8006ae2:	bf00      	nop
  }

}
 8006ae4:	37e8      	adds	r7, #232	; 0xe8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <UART_InitCallbacksToDefault+0x64>)
 8006bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <UART_InitCallbacksToDefault+0x68>)
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a14      	ldr	r2, [pc, #80]	; (8006c10 <UART_InitCallbacksToDefault+0x6c>)
 8006bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <UART_InitCallbacksToDefault+0x70>)
 8006bc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a12      	ldr	r2, [pc, #72]	; (8006c18 <UART_InitCallbacksToDefault+0x74>)
 8006bd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <UART_InitCallbacksToDefault+0x78>)
 8006bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a10      	ldr	r2, [pc, #64]	; (8006c20 <UART_InitCallbacksToDefault+0x7c>)
 8006be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a0f      	ldr	r2, [pc, #60]	; (8006c24 <UART_InitCallbacksToDefault+0x80>)
 8006be8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <UART_InitCallbacksToDefault+0x84>)
 8006bf0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a0d      	ldr	r2, [pc, #52]	; (8006c2c <UART_InitCallbacksToDefault+0x88>)
 8006bf8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	08006b01 	.word	0x08006b01
 8006c0c:	08006aed 	.word	0x08006aed
 8006c10:	08006b15 	.word	0x08006b15
 8006c14:	08000ebd 	.word	0x08000ebd
 8006c18:	08006b29 	.word	0x08006b29
 8006c1c:	08006b3d 	.word	0x08006b3d
 8006c20:	08006b51 	.word	0x08006b51
 8006c24:	08006b65 	.word	0x08006b65
 8006c28:	08006b91 	.word	0x08006b91
 8006c2c:	08006b79 	.word	0x08006b79

08006c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4ba6      	ldr	r3, [pc, #664]	; (8006ef4 <UART_SetConfig+0x2c4>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	6979      	ldr	r1, [r7, #20]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a94      	ldr	r2, [pc, #592]	; (8006ef8 <UART_SetConfig+0x2c8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d120      	bne.n	8006cee <UART_SetConfig+0xbe>
 8006cac:	4b93      	ldr	r3, [pc, #588]	; (8006efc <UART_SetConfig+0x2cc>)
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d816      	bhi.n	8006ce8 <UART_SetConfig+0xb8>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x90>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006cdd 	.word	0x08006cdd
 8006cc8:	08006cd7 	.word	0x08006cd7
 8006ccc:	08006ce3 	.word	0x08006ce3
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e150      	b.n	8006f78 <UART_SetConfig+0x348>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e14d      	b.n	8006f78 <UART_SetConfig+0x348>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e14a      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e147      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e144      	b.n	8006f78 <UART_SetConfig+0x348>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a83      	ldr	r2, [pc, #524]	; (8006f00 <UART_SetConfig+0x2d0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d132      	bne.n	8006d5e <UART_SetConfig+0x12e>
 8006cf8:	4b80      	ldr	r3, [pc, #512]	; (8006efc <UART_SetConfig+0x2cc>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	2b0c      	cmp	r3, #12
 8006d04:	d828      	bhi.n	8006d58 <UART_SetConfig+0x128>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0xdc>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006d59 	.word	0x08006d59
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d59 	.word	0x08006d59
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d59 	.word	0x08006d59
 8006d24:	08006d59 	.word	0x08006d59
 8006d28:	08006d59 	.word	0x08006d59
 8006d2c:	08006d47 	.word	0x08006d47
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d59 	.word	0x08006d59
 8006d3c:	08006d53 	.word	0x08006d53
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e118      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d46:	2302      	movs	r3, #2
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e115      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e112      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d52:	2308      	movs	r3, #8
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e10f      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e10c      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a68      	ldr	r2, [pc, #416]	; (8006f04 <UART_SetConfig+0x2d4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d120      	bne.n	8006daa <UART_SetConfig+0x17a>
 8006d68:	4b64      	ldr	r3, [pc, #400]	; (8006efc <UART_SetConfig+0x2cc>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d72:	2b30      	cmp	r3, #48	; 0x30
 8006d74:	d013      	beq.n	8006d9e <UART_SetConfig+0x16e>
 8006d76:	2b30      	cmp	r3, #48	; 0x30
 8006d78:	d814      	bhi.n	8006da4 <UART_SetConfig+0x174>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d009      	beq.n	8006d92 <UART_SetConfig+0x162>
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d810      	bhi.n	8006da4 <UART_SetConfig+0x174>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <UART_SetConfig+0x15c>
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d006      	beq.n	8006d98 <UART_SetConfig+0x168>
 8006d8a:	e00b      	b.n	8006da4 <UART_SetConfig+0x174>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e0f2      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e0ef      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e0ec      	b.n	8006f78 <UART_SetConfig+0x348>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e0e9      	b.n	8006f78 <UART_SetConfig+0x348>
 8006da4:	2310      	movs	r3, #16
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e0e6      	b.n	8006f78 <UART_SetConfig+0x348>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a56      	ldr	r2, [pc, #344]	; (8006f08 <UART_SetConfig+0x2d8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d120      	bne.n	8006df6 <UART_SetConfig+0x1c6>
 8006db4:	4b51      	ldr	r3, [pc, #324]	; (8006efc <UART_SetConfig+0x2cc>)
 8006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc0:	d013      	beq.n	8006dea <UART_SetConfig+0x1ba>
 8006dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc4:	d814      	bhi.n	8006df0 <UART_SetConfig+0x1c0>
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	d009      	beq.n	8006dde <UART_SetConfig+0x1ae>
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d810      	bhi.n	8006df0 <UART_SetConfig+0x1c0>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <UART_SetConfig+0x1a8>
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d006      	beq.n	8006de4 <UART_SetConfig+0x1b4>
 8006dd6:	e00b      	b.n	8006df0 <UART_SetConfig+0x1c0>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e0cc      	b.n	8006f78 <UART_SetConfig+0x348>
 8006dde:	2302      	movs	r3, #2
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e0c9      	b.n	8006f78 <UART_SetConfig+0x348>
 8006de4:	2304      	movs	r3, #4
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e0c6      	b.n	8006f78 <UART_SetConfig+0x348>
 8006dea:	2308      	movs	r3, #8
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e0c3      	b.n	8006f78 <UART_SetConfig+0x348>
 8006df0:	2310      	movs	r3, #16
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e0c0      	b.n	8006f78 <UART_SetConfig+0x348>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a44      	ldr	r2, [pc, #272]	; (8006f0c <UART_SetConfig+0x2dc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d125      	bne.n	8006e4c <UART_SetConfig+0x21c>
 8006e00:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <UART_SetConfig+0x2cc>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0e:	d017      	beq.n	8006e40 <UART_SetConfig+0x210>
 8006e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e14:	d817      	bhi.n	8006e46 <UART_SetConfig+0x216>
 8006e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1a:	d00b      	beq.n	8006e34 <UART_SetConfig+0x204>
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e20:	d811      	bhi.n	8006e46 <UART_SetConfig+0x216>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <UART_SetConfig+0x1fe>
 8006e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2a:	d006      	beq.n	8006e3a <UART_SetConfig+0x20a>
 8006e2c:	e00b      	b.n	8006e46 <UART_SetConfig+0x216>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e0a1      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e34:	2302      	movs	r3, #2
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e09e      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e3a:	2304      	movs	r3, #4
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e09b      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e40:	2308      	movs	r3, #8
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e098      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e46:	2310      	movs	r3, #16
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e095      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2f      	ldr	r2, [pc, #188]	; (8006f10 <UART_SetConfig+0x2e0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d125      	bne.n	8006ea2 <UART_SetConfig+0x272>
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <UART_SetConfig+0x2cc>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e64:	d017      	beq.n	8006e96 <UART_SetConfig+0x266>
 8006e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e6a:	d817      	bhi.n	8006e9c <UART_SetConfig+0x26c>
 8006e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e70:	d00b      	beq.n	8006e8a <UART_SetConfig+0x25a>
 8006e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e76:	d811      	bhi.n	8006e9c <UART_SetConfig+0x26c>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <UART_SetConfig+0x254>
 8006e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e80:	d006      	beq.n	8006e90 <UART_SetConfig+0x260>
 8006e82:	e00b      	b.n	8006e9c <UART_SetConfig+0x26c>
 8006e84:	2301      	movs	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e076      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e073      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e90:	2304      	movs	r3, #4
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e070      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e96:	2308      	movs	r3, #8
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e06d      	b.n	8006f78 <UART_SetConfig+0x348>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e06a      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <UART_SetConfig+0x2e4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d138      	bne.n	8006f1e <UART_SetConfig+0x2ee>
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <UART_SetConfig+0x2cc>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eba:	d017      	beq.n	8006eec <UART_SetConfig+0x2bc>
 8006ebc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec0:	d82a      	bhi.n	8006f18 <UART_SetConfig+0x2e8>
 8006ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec6:	d00b      	beq.n	8006ee0 <UART_SetConfig+0x2b0>
 8006ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ecc:	d824      	bhi.n	8006f18 <UART_SetConfig+0x2e8>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <UART_SetConfig+0x2aa>
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d006      	beq.n	8006ee6 <UART_SetConfig+0x2b6>
 8006ed8:	e01e      	b.n	8006f18 <UART_SetConfig+0x2e8>
 8006eda:	2300      	movs	r3, #0
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e04b      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e048      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ee6:	2304      	movs	r3, #4
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e045      	b.n	8006f78 <UART_SetConfig+0x348>
 8006eec:	2308      	movs	r3, #8
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e042      	b.n	8006f78 <UART_SetConfig+0x348>
 8006ef2:	bf00      	nop
 8006ef4:	efff69f3 	.word	0xefff69f3
 8006ef8:	40011000 	.word	0x40011000
 8006efc:	40023800 	.word	0x40023800
 8006f00:	40004400 	.word	0x40004400
 8006f04:	40004800 	.word	0x40004800
 8006f08:	40004c00 	.word	0x40004c00
 8006f0c:	40005000 	.word	0x40005000
 8006f10:	40011400 	.word	0x40011400
 8006f14:	40007800 	.word	0x40007800
 8006f18:	2310      	movs	r3, #16
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e02c      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a72      	ldr	r2, [pc, #456]	; (80070ec <UART_SetConfig+0x4bc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d125      	bne.n	8006f74 <UART_SetConfig+0x344>
 8006f28:	4b71      	ldr	r3, [pc, #452]	; (80070f0 <UART_SetConfig+0x4c0>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f36:	d017      	beq.n	8006f68 <UART_SetConfig+0x338>
 8006f38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f3c:	d817      	bhi.n	8006f6e <UART_SetConfig+0x33e>
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f42:	d00b      	beq.n	8006f5c <UART_SetConfig+0x32c>
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f48:	d811      	bhi.n	8006f6e <UART_SetConfig+0x33e>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <UART_SetConfig+0x326>
 8006f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f52:	d006      	beq.n	8006f62 <UART_SetConfig+0x332>
 8006f54:	e00b      	b.n	8006f6e <UART_SetConfig+0x33e>
 8006f56:	2300      	movs	r3, #0
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e00d      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e00a      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f62:	2304      	movs	r3, #4
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e007      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e004      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f6e:	2310      	movs	r3, #16
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e001      	b.n	8006f78 <UART_SetConfig+0x348>
 8006f74:	2310      	movs	r3, #16
 8006f76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f80:	d15b      	bne.n	800703a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f82:	7ffb      	ldrb	r3, [r7, #31]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d828      	bhi.n	8006fda <UART_SetConfig+0x3aa>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x360>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fbd 	.word	0x08006fbd
 8006f98:	08006fc5 	.word	0x08006fc5
 8006f9c:	08006fdb 	.word	0x08006fdb
 8006fa0:	08006fcb 	.word	0x08006fcb
 8006fa4:	08006fdb 	.word	0x08006fdb
 8006fa8:	08006fdb 	.word	0x08006fdb
 8006fac:	08006fdb 	.word	0x08006fdb
 8006fb0:	08006fd3 	.word	0x08006fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb4:	f7fc fea8 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8006fb8:	61b8      	str	r0, [r7, #24]
        break;
 8006fba:	e013      	b.n	8006fe4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fbc:	f7fc feb8 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006fc0:	61b8      	str	r0, [r7, #24]
        break;
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc4:	4b4b      	ldr	r3, [pc, #300]	; (80070f4 <UART_SetConfig+0x4c4>)
 8006fc6:	61bb      	str	r3, [r7, #24]
        break;
 8006fc8:	e00c      	b.n	8006fe4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fc fd8d 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8006fce:	61b8      	str	r0, [r7, #24]
        break;
 8006fd0:	e008      	b.n	8006fe4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	61bb      	str	r3, [r7, #24]
        break;
 8006fd8:	e004      	b.n	8006fe4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fe2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d074      	beq.n	80070d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	005a      	lsls	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d916      	bls.n	8007034 <UART_SetConfig+0x404>
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d212      	bcs.n	8007034 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f023 030f 	bic.w	r3, r3, #15
 8007016:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b29a      	uxth	r2, r3
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	4313      	orrs	r3, r2
 8007028:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	89fa      	ldrh	r2, [r7, #14]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e04f      	b.n	80070d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	77bb      	strb	r3, [r7, #30]
 8007038:	e04c      	b.n	80070d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703a:	7ffb      	ldrb	r3, [r7, #31]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d828      	bhi.n	8007092 <UART_SetConfig+0x462>
 8007040:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <UART_SetConfig+0x418>)
 8007042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007046:	bf00      	nop
 8007048:	0800706d 	.word	0x0800706d
 800704c:	08007075 	.word	0x08007075
 8007050:	0800707d 	.word	0x0800707d
 8007054:	08007093 	.word	0x08007093
 8007058:	08007083 	.word	0x08007083
 800705c:	08007093 	.word	0x08007093
 8007060:	08007093 	.word	0x08007093
 8007064:	08007093 	.word	0x08007093
 8007068:	0800708b 	.word	0x0800708b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800706c:	f7fc fe4c 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8007070:	61b8      	str	r0, [r7, #24]
        break;
 8007072:	e013      	b.n	800709c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007074:	f7fc fe5c 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8007078:	61b8      	str	r0, [r7, #24]
        break;
 800707a:	e00f      	b.n	800709c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <UART_SetConfig+0x4c4>)
 800707e:	61bb      	str	r3, [r7, #24]
        break;
 8007080:	e00c      	b.n	800709c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007082:	f7fc fd31 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8007086:	61b8      	str	r0, [r7, #24]
        break;
 8007088:	e008      	b.n	800709c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800708e:	61bb      	str	r3, [r7, #24]
        break;
 8007090:	e004      	b.n	800709c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	77bb      	strb	r3, [r7, #30]
        break;
 800709a:	bf00      	nop
    }

    if (pclk != 0U)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	085a      	lsrs	r2, r3, #1
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b0f      	cmp	r3, #15
 80070ba:	d909      	bls.n	80070d0 <UART_SetConfig+0x4a0>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c2:	d205      	bcs.n	80070d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	e001      	b.n	80070d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3720      	adds	r7, #32
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40007c00 	.word	0x40007c00
 80070f0:	40023800 	.word	0x40023800
 80070f4:	00f42400 	.word	0x00f42400

080070f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01a      	beq.n	800720e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f6:	d10a      	bne.n	800720e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724c:	f7fb f92a 	bl	80024a4 <HAL_GetTick>
 8007250:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d10e      	bne.n	800727e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f831 	bl	80072d6 <UART_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e027      	b.n	80072ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d10e      	bne.n	80072aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f81b 	bl	80072d6 <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e011      	b.n	80072ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b09c      	sub	sp, #112	; 0x70
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	603b      	str	r3, [r7, #0]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e6:	e0a7      	b.n	8007438 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	f000 80a3 	beq.w	8007438 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f2:	f7fb f8d7 	bl	80024a4 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072fe:	429a      	cmp	r2, r3
 8007300:	d302      	bcc.n	8007308 <UART_WaitOnFlagUntilTimeout+0x32>
 8007302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007304:	2b00      	cmp	r3, #0
 8007306:	d13f      	bne.n	8007388 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800731c:	667b      	str	r3, [r7, #100]	; 0x64
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007328:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800732c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	663b      	str	r3, [r7, #96]	; 0x60
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800735a:	64ba      	str	r2, [r7, #72]	; 0x48
 800735c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e068      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d050      	beq.n	8007438 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a4:	d148      	bne.n	8007438 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
 80073d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	613b      	str	r3, [r7, #16]
   return(result);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007402:	623a      	str	r2, [r7, #32]
 8007404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	69f9      	ldr	r1, [r7, #28]
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e010      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	429a      	cmp	r2, r3
 8007454:	f43f af48 	beq.w	80072e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3770      	adds	r7, #112	; 0x70
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007464:	b480      	push	{r7}
 8007466:	b097      	sub	sp, #92	; 0x5c
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007496:	d10e      	bne.n	80074b6 <UART_Start_Receive_IT+0x52>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <UART_Start_Receive_IT+0x48>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074aa:	e02d      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	22ff      	movs	r2, #255	; 0xff
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b4:	e028      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <UART_Start_Receive_IT+0x76>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <UART_Start_Receive_IT+0x6c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074ce:	e01b      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	227f      	movs	r2, #127	; 0x7f
 80074d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d8:	e016      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e2:	d10d      	bne.n	8007500 <UART_Start_Receive_IT+0x9c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <UART_Start_Receive_IT+0x92>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	227f      	movs	r2, #127	; 0x7f
 80074f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f4:	e008      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	223f      	movs	r2, #63	; 0x3f
 80074fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074fe:	e003      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2222      	movs	r2, #34	; 0x22
 8007514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	657b      	str	r3, [r7, #84]	; 0x54
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007538:	64ba      	str	r2, [r7, #72]	; 0x48
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800753e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007554:	d107      	bne.n	8007566 <UART_Start_Receive_IT+0x102>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a21      	ldr	r2, [pc, #132]	; (80075e8 <UART_Start_Receive_IT+0x184>)
 8007562:	669a      	str	r2, [r3, #104]	; 0x68
 8007564:	e002      	b.n	800756c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a20      	ldr	r2, [pc, #128]	; (80075ec <UART_Start_Receive_IT+0x188>)
 800756a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
 8007594:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_Start_Receive_IT+0x110>
 80075a6:	e018      	b.n	80075da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f043 0320 	orr.w	r3, r3, #32
 80075bc:	653b      	str	r3, [r7, #80]	; 0x50
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	623b      	str	r3, [r7, #32]
 80075c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	69f9      	ldr	r1, [r7, #28]
 80075cc:	6a3a      	ldr	r2, [r7, #32]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	375c      	adds	r7, #92	; 0x5c
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	080078af 	.word	0x080078af
 80075ec:	08007741 	.word	0x08007741

080075f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b095      	sub	sp, #84	; 0x54
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007616:	643b      	str	r3, [r7, #64]	; 0x40
 8007618:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800761c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	61fb      	str	r3, [r7, #28]
   return(result);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	64bb      	str	r3, [r7, #72]	; 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007662:	2b01      	cmp	r3, #1
 8007664:	d118      	bne.n	8007698 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	60bb      	str	r3, [r7, #8]
   return(result);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0310 	bic.w	r3, r3, #16
 800767a:	647b      	str	r3, [r7, #68]	; 0x44
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6979      	ldr	r1, [r7, #20]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	613b      	str	r3, [r7, #16]
   return(result);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e6      	bne.n	8007666 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076ac:	bf00      	nop
 80076ae:	3754      	adds	r7, #84	; 0x54
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	61bb      	str	r3, [r7, #24]
 8007710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	613b      	str	r3, [r7, #16]
   return(result);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007738:	bf00      	nop
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b096      	sub	sp, #88	; 0x58
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800774e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007758:	2b22      	cmp	r3, #34	; 0x22
 800775a:	f040 809c 	bne.w	8007896 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007768:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800776c:	b2d9      	uxtb	r1, r3
 800776e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007772:	b2da      	uxtb	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	400a      	ands	r2, r1
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d17f      	bne.n	80078a6 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ba:	653b      	str	r3, [r7, #80]	; 0x50
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c4:	647b      	str	r3, [r7, #68]	; 0x44
 80077c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	623b      	str	r3, [r7, #32]
   return(result);
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f8:	633a      	str	r2, [r7, #48]	; 0x30
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2220      	movs	r2, #32
 8007810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	2b01      	cmp	r3, #1
 8007826:	d130      	bne.n	800788a <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60fb      	str	r3, [r7, #12]
   return(result);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	64bb      	str	r3, [r7, #72]	; 0x48
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	617b      	str	r3, [r7, #20]
   return(result);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e6      	bne.n	800782e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b10      	cmp	r3, #16
 800786c:	d103      	bne.n	8007876 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2210      	movs	r2, #16
 8007874:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8007882:	4611      	mov	r1, r2
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007888:	e00d      	b.n	80078a6 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
}
 8007894:	e007      	b.n	80078a6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699a      	ldr	r2, [r3, #24]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0208 	orr.w	r2, r2, #8
 80078a4:	619a      	str	r2, [r3, #24]
}
 80078a6:	bf00      	nop
 80078a8:	3758      	adds	r7, #88	; 0x58
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b096      	sub	sp, #88	; 0x58
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c6:	2b22      	cmp	r3, #34	; 0x22
 80078c8:	f040 809c 	bne.w	8007a04 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078e4:	4013      	ands	r3, r2
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	1c9a      	adds	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d17f      	bne.n	8007a14 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007932:	643b      	str	r3, [r7, #64]	; 0x40
 8007934:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e6      	bne.n	8007914 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	61fb      	str	r3, [r7, #28]
   return(result);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	64bb      	str	r3, [r7, #72]	; 0x48
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800796c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007992:	2b01      	cmp	r3, #1
 8007994:	d130      	bne.n	80079f8 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f023 0310 	bic.w	r3, r3, #16
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	613b      	str	r3, [r7, #16]
   return(result);
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b10      	cmp	r3, #16
 80079da:	d103      	bne.n	80079e4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2210      	movs	r2, #16
 80079e2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079f6:	e00d      	b.n	8007a14 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
}
 8007a02:	e007      	b.n	8007a14 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0208 	orr.w	r2, r2, #8
 8007a12:	619a      	str	r2, [r3, #24]
}
 8007a14:	bf00      	nop
 8007a16:	3758      	adds	r7, #88	; 0x58
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007a20:	4904      	ldr	r1, [pc, #16]	; (8007a34 <MX_FATFS_Init+0x18>)
 8007a22:	4805      	ldr	r0, [pc, #20]	; (8007a38 <MX_FATFS_Init+0x1c>)
 8007a24:	f000 f8b0 	bl	8007b88 <FATFS_LinkDriver>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <MX_FATFS_Init+0x20>)
 8007a2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a30:	bf00      	nop
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200006d8 	.word	0x200006d8
 8007a38:	2000003c 	.word	0x2000003c
 8007a3c:	200006d4 	.word	0x200006d4

08007a40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007a4a:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <USER_initialize+0x24>)
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <USER_initialize+0x24>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000039 	.word	0x20000039

08007a68 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <USER_status+0x24>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007a78:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <USER_status+0x24>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000039 	.word	0x20000039

08007a90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007aa0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007abe:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	603a      	str	r2, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
    return res;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007afe:	2301      	movs	r3, #1
 8007b00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b06:	4b1f      	ldr	r3, [pc, #124]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b08:	7a5b      	ldrb	r3, [r3, #9]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d131      	bne.n	8007b74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b12:	7a5b      	ldrb	r3, [r3, #9]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b1e:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b20:	7a5b      	ldrb	r3, [r3, #9]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	4a17      	ldr	r2, [pc, #92]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b2e:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b30:	7a5b      	ldrb	r3, [r3, #9]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b38:	4413      	add	r3, r2
 8007b3a:	79fa      	ldrb	r2, [r7, #7]
 8007b3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b3e:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b40:	7a5b      	ldrb	r3, [r3, #9]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	b2d1      	uxtb	r1, r2
 8007b48:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <FATFS_LinkDriverEx+0x94>)
 8007b4a:	7251      	strb	r1, [r2, #9]
 8007b4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b4e:	7dbb      	ldrb	r3, [r7, #22]
 8007b50:	3330      	adds	r3, #48	; 0x30
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	223a      	movs	r2, #58	; 0x3a
 8007b5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	3302      	adds	r3, #2
 8007b64:	222f      	movs	r2, #47	; 0x2f
 8007b66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3303      	adds	r3, #3
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	200006dc 	.word	0x200006dc

08007b88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b92:	2200      	movs	r2, #0
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ffaa 	bl	8007af0 <FATFS_LinkDriverEx>
 8007b9c:	4603      	mov	r3, r0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <__errno>:
 8007ba8:	4b01      	ldr	r3, [pc, #4]	; (8007bb0 <__errno+0x8>)
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20000050 	.word	0x20000050

08007bb4 <__libc_init_array>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4d0d      	ldr	r5, [pc, #52]	; (8007bec <__libc_init_array+0x38>)
 8007bb8:	4c0d      	ldr	r4, [pc, #52]	; (8007bf0 <__libc_init_array+0x3c>)
 8007bba:	1b64      	subs	r4, r4, r5
 8007bbc:	10a4      	asrs	r4, r4, #2
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	42a6      	cmp	r6, r4
 8007bc2:	d109      	bne.n	8007bd8 <__libc_init_array+0x24>
 8007bc4:	4d0b      	ldr	r5, [pc, #44]	; (8007bf4 <__libc_init_array+0x40>)
 8007bc6:	4c0c      	ldr	r4, [pc, #48]	; (8007bf8 <__libc_init_array+0x44>)
 8007bc8:	f004 fba2 	bl	800c310 <_init>
 8007bcc:	1b64      	subs	r4, r4, r5
 8007bce:	10a4      	asrs	r4, r4, #2
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	42a6      	cmp	r6, r4
 8007bd4:	d105      	bne.n	8007be2 <__libc_init_array+0x2e>
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bdc:	4798      	blx	r3
 8007bde:	3601      	adds	r6, #1
 8007be0:	e7ee      	b.n	8007bc0 <__libc_init_array+0xc>
 8007be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be6:	4798      	blx	r3
 8007be8:	3601      	adds	r6, #1
 8007bea:	e7f2      	b.n	8007bd2 <__libc_init_array+0x1e>
 8007bec:	0800c80c 	.word	0x0800c80c
 8007bf0:	0800c80c 	.word	0x0800c80c
 8007bf4:	0800c80c 	.word	0x0800c80c
 8007bf8:	0800c810 	.word	0x0800c810

08007bfc <memset>:
 8007bfc:	4402      	add	r2, r0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <memset+0xa>
 8007c04:	4770      	bx	lr
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <memset+0x4>

08007c0c <__cvt>:
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	ed2d 8b02 	vpush	{d8}
 8007c12:	eeb0 8b40 	vmov.f64	d8, d0
 8007c16:	b085      	sub	sp, #20
 8007c18:	4617      	mov	r7, r2
 8007c1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007c1e:	ee18 2a90 	vmov	r2, s17
 8007c22:	f025 0520 	bic.w	r5, r5, #32
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	bfb6      	itet	lt
 8007c2a:	222d      	movlt	r2, #45	; 0x2d
 8007c2c:	2200      	movge	r2, #0
 8007c2e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007c32:	2d46      	cmp	r5, #70	; 0x46
 8007c34:	460c      	mov	r4, r1
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	d004      	beq.n	8007c44 <__cvt+0x38>
 8007c3a:	2d45      	cmp	r5, #69	; 0x45
 8007c3c:	d100      	bne.n	8007c40 <__cvt+0x34>
 8007c3e:	3401      	adds	r4, #1
 8007c40:	2102      	movs	r1, #2
 8007c42:	e000      	b.n	8007c46 <__cvt+0x3a>
 8007c44:	2103      	movs	r1, #3
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	ab02      	add	r3, sp, #8
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4633      	mov	r3, r6
 8007c52:	eeb0 0b48 	vmov.f64	d0, d8
 8007c56:	f001 fd47 	bl	80096e8 <_dtoa_r>
 8007c5a:	2d47      	cmp	r5, #71	; 0x47
 8007c5c:	d101      	bne.n	8007c62 <__cvt+0x56>
 8007c5e:	07fb      	lsls	r3, r7, #31
 8007c60:	d51a      	bpl.n	8007c98 <__cvt+0x8c>
 8007c62:	2d46      	cmp	r5, #70	; 0x46
 8007c64:	eb00 0204 	add.w	r2, r0, r4
 8007c68:	d10c      	bne.n	8007c84 <__cvt+0x78>
 8007c6a:	7803      	ldrb	r3, [r0, #0]
 8007c6c:	2b30      	cmp	r3, #48	; 0x30
 8007c6e:	d107      	bne.n	8007c80 <__cvt+0x74>
 8007c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c78:	bf1c      	itt	ne
 8007c7a:	f1c4 0401 	rsbne	r4, r4, #1
 8007c7e:	6034      	strne	r4, [r6, #0]
 8007c80:	6833      	ldr	r3, [r6, #0]
 8007c82:	441a      	add	r2, r3
 8007c84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8c:	bf08      	it	eq
 8007c8e:	9203      	streq	r2, [sp, #12]
 8007c90:	2130      	movs	r1, #48	; 0x30
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d307      	bcc.n	8007ca8 <__cvt+0x9c>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c9c:	1a1b      	subs	r3, r3, r0
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	b005      	add	sp, #20
 8007ca2:	ecbd 8b02 	vpop	{d8}
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca8:	1c5c      	adds	r4, r3, #1
 8007caa:	9403      	str	r4, [sp, #12]
 8007cac:	7019      	strb	r1, [r3, #0]
 8007cae:	e7f0      	b.n	8007c92 <__cvt+0x86>

08007cb0 <__exponent>:
 8007cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	bfb8      	it	lt
 8007cb8:	4249      	neglt	r1, r1
 8007cba:	f803 2b02 	strb.w	r2, [r3], #2
 8007cbe:	bfb4      	ite	lt
 8007cc0:	222d      	movlt	r2, #45	; 0x2d
 8007cc2:	222b      	movge	r2, #43	; 0x2b
 8007cc4:	2909      	cmp	r1, #9
 8007cc6:	7042      	strb	r2, [r0, #1]
 8007cc8:	dd2a      	ble.n	8007d20 <__exponent+0x70>
 8007cca:	f10d 0407 	add.w	r4, sp, #7
 8007cce:	46a4      	mov	ip, r4
 8007cd0:	270a      	movs	r7, #10
 8007cd2:	46a6      	mov	lr, r4
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cda:	fb07 1516 	mls	r5, r7, r6, r1
 8007cde:	3530      	adds	r5, #48	; 0x30
 8007ce0:	2a63      	cmp	r2, #99	; 0x63
 8007ce2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ce6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cea:	4631      	mov	r1, r6
 8007cec:	dcf1      	bgt.n	8007cd2 <__exponent+0x22>
 8007cee:	3130      	adds	r1, #48	; 0x30
 8007cf0:	f1ae 0502 	sub.w	r5, lr, #2
 8007cf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cf8:	1c44      	adds	r4, r0, #1
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4561      	cmp	r1, ip
 8007cfe:	d30a      	bcc.n	8007d16 <__exponent+0x66>
 8007d00:	f10d 0209 	add.w	r2, sp, #9
 8007d04:	eba2 020e 	sub.w	r2, r2, lr
 8007d08:	4565      	cmp	r5, ip
 8007d0a:	bf88      	it	hi
 8007d0c:	2200      	movhi	r2, #0
 8007d0e:	4413      	add	r3, r2
 8007d10:	1a18      	subs	r0, r3, r0
 8007d12:	b003      	add	sp, #12
 8007d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d1e:	e7ed      	b.n	8007cfc <__exponent+0x4c>
 8007d20:	2330      	movs	r3, #48	; 0x30
 8007d22:	3130      	adds	r1, #48	; 0x30
 8007d24:	7083      	strb	r3, [r0, #2]
 8007d26:	70c1      	strb	r1, [r0, #3]
 8007d28:	1d03      	adds	r3, r0, #4
 8007d2a:	e7f1      	b.n	8007d10 <__exponent+0x60>
 8007d2c:	0000      	movs	r0, r0
	...

08007d30 <_printf_float>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	b08b      	sub	sp, #44	; 0x2c
 8007d36:	460c      	mov	r4, r1
 8007d38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007d3c:	4616      	mov	r6, r2
 8007d3e:	461f      	mov	r7, r3
 8007d40:	4605      	mov	r5, r0
 8007d42:	f002 fea3 	bl	800aa8c <_localeconv_r>
 8007d46:	f8d0 b000 	ldr.w	fp, [r0]
 8007d4a:	4658      	mov	r0, fp
 8007d4c:	f7f8 fa78 	bl	8000240 <strlen>
 8007d50:	2300      	movs	r3, #0
 8007d52:	9308      	str	r3, [sp, #32]
 8007d54:	f8d8 3000 	ldr.w	r3, [r8]
 8007d58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007d5c:	6822      	ldr	r2, [r4, #0]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	f103 0108 	add.w	r1, r3, #8
 8007d68:	f8c8 1000 	str.w	r1, [r8]
 8007d6c:	4682      	mov	sl, r0
 8007d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007d76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007fd8 <_printf_float+0x2a8>
 8007d7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007d7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007d82:	eeb4 6b47 	vcmp.f64	d6, d7
 8007d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8a:	dd24      	ble.n	8007dd6 <_printf_float+0xa6>
 8007d8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	d502      	bpl.n	8007d9c <_printf_float+0x6c>
 8007d96:	232d      	movs	r3, #45	; 0x2d
 8007d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9c:	4b90      	ldr	r3, [pc, #576]	; (8007fe0 <_printf_float+0x2b0>)
 8007d9e:	4891      	ldr	r0, [pc, #580]	; (8007fe4 <_printf_float+0x2b4>)
 8007da0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007da4:	bf94      	ite	ls
 8007da6:	4698      	movls	r8, r3
 8007da8:	4680      	movhi	r8, r0
 8007daa:	2303      	movs	r3, #3
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	f022 0204 	bic.w	r2, r2, #4
 8007db2:	2300      	movs	r3, #0
 8007db4:	6022      	str	r2, [r4, #0]
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9700      	str	r7, [sp, #0]
 8007dba:	4633      	mov	r3, r6
 8007dbc:	aa09      	add	r2, sp, #36	; 0x24
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f9d3 	bl	800816c <_printf_common>
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f040 808a 	bne.w	8007ee0 <_printf_float+0x1b0>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	b00b      	add	sp, #44	; 0x2c
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	eeb4 0b40 	vcmp.f64	d0, d0
 8007dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dde:	d709      	bvc.n	8007df4 <_printf_float+0xc4>
 8007de0:	ee10 3a90 	vmov	r3, s1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfbc      	itt	lt
 8007de8:	232d      	movlt	r3, #45	; 0x2d
 8007dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dee:	487e      	ldr	r0, [pc, #504]	; (8007fe8 <_printf_float+0x2b8>)
 8007df0:	4b7e      	ldr	r3, [pc, #504]	; (8007fec <_printf_float+0x2bc>)
 8007df2:	e7d5      	b.n	8007da0 <_printf_float+0x70>
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007dfa:	9104      	str	r1, [sp, #16]
 8007dfc:	1c59      	adds	r1, r3, #1
 8007dfe:	d13c      	bne.n	8007e7a <_printf_float+0x14a>
 8007e00:	2306      	movs	r3, #6
 8007e02:	6063      	str	r3, [r4, #4]
 8007e04:	2300      	movs	r3, #0
 8007e06:	9303      	str	r3, [sp, #12]
 8007e08:	ab08      	add	r3, sp, #32
 8007e0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007e0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e12:	ab07      	add	r3, sp, #28
 8007e14:	6861      	ldr	r1, [r4, #4]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	f10d 031b 	add.w	r3, sp, #27
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff fef4 	bl	8007c0c <__cvt>
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	9907      	ldr	r1, [sp, #28]
 8007e28:	2b47      	cmp	r3, #71	; 0x47
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	d108      	bne.n	8007e40 <_printf_float+0x110>
 8007e2e:	1cc8      	adds	r0, r1, #3
 8007e30:	db02      	blt.n	8007e38 <_printf_float+0x108>
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	4299      	cmp	r1, r3
 8007e36:	dd41      	ble.n	8007ebc <_printf_float+0x18c>
 8007e38:	f1a9 0902 	sub.w	r9, r9, #2
 8007e3c:	fa5f f989 	uxtb.w	r9, r9
 8007e40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e44:	d820      	bhi.n	8007e88 <_printf_float+0x158>
 8007e46:	3901      	subs	r1, #1
 8007e48:	464a      	mov	r2, r9
 8007e4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e4e:	9107      	str	r1, [sp, #28]
 8007e50:	f7ff ff2e 	bl	8007cb0 <__exponent>
 8007e54:	9a08      	ldr	r2, [sp, #32]
 8007e56:	9004      	str	r0, [sp, #16]
 8007e58:	1813      	adds	r3, r2, r0
 8007e5a:	2a01      	cmp	r2, #1
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	dc02      	bgt.n	8007e66 <_printf_float+0x136>
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	07d2      	lsls	r2, r2, #31
 8007e64:	d501      	bpl.n	8007e6a <_printf_float+0x13a>
 8007e66:	3301      	adds	r3, #1
 8007e68:	6123      	str	r3, [r4, #16]
 8007e6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0a2      	beq.n	8007db8 <_printf_float+0x88>
 8007e72:	232d      	movs	r3, #45	; 0x2d
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	e79e      	b.n	8007db8 <_printf_float+0x88>
 8007e7a:	9904      	ldr	r1, [sp, #16]
 8007e7c:	2947      	cmp	r1, #71	; 0x47
 8007e7e:	d1c1      	bne.n	8007e04 <_printf_float+0xd4>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1bf      	bne.n	8007e04 <_printf_float+0xd4>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e7bc      	b.n	8007e02 <_printf_float+0xd2>
 8007e88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007e8c:	d118      	bne.n	8007ec0 <_printf_float+0x190>
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	dd0b      	ble.n	8007eac <_printf_float+0x17c>
 8007e94:	6121      	str	r1, [r4, #16]
 8007e96:	b913      	cbnz	r3, 8007e9e <_printf_float+0x16e>
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	07d0      	lsls	r0, r2, #31
 8007e9c:	d502      	bpl.n	8007ea4 <_printf_float+0x174>
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	440b      	add	r3, r1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	e7de      	b.n	8007e6a <_printf_float+0x13a>
 8007eac:	b913      	cbnz	r3, 8007eb4 <_printf_float+0x184>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	07d2      	lsls	r2, r2, #31
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_float+0x188>
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	e7f4      	b.n	8007ea2 <_printf_float+0x172>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7f2      	b.n	8007ea2 <_printf_float+0x172>
 8007ebc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	db05      	blt.n	8007ed2 <_printf_float+0x1a2>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	6121      	str	r1, [r4, #16]
 8007eca:	07d8      	lsls	r0, r3, #31
 8007ecc:	d5ea      	bpl.n	8007ea4 <_printf_float+0x174>
 8007ece:	1c4b      	adds	r3, r1, #1
 8007ed0:	e7e7      	b.n	8007ea2 <_printf_float+0x172>
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	bfd4      	ite	le
 8007ed6:	f1c1 0202 	rsble	r2, r1, #2
 8007eda:	2201      	movgt	r2, #1
 8007edc:	4413      	add	r3, r2
 8007ede:	e7e0      	b.n	8007ea2 <_printf_float+0x172>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	055a      	lsls	r2, r3, #21
 8007ee4:	d407      	bmi.n	8007ef6 <_printf_float+0x1c6>
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	4642      	mov	r2, r8
 8007eea:	4631      	mov	r1, r6
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b8      	blx	r7
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d12a      	bne.n	8007f4a <_printf_float+0x21a>
 8007ef4:	e76a      	b.n	8007dcc <_printf_float+0x9c>
 8007ef6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007efa:	f240 80e2 	bls.w	80080c2 <_printf_float+0x392>
 8007efe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007f02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0a:	d133      	bne.n	8007f74 <_printf_float+0x244>
 8007f0c:	4a38      	ldr	r2, [pc, #224]	; (8007ff0 <_printf_float+0x2c0>)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af58 	beq.w	8007dcc <_printf_float+0x9c>
 8007f1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	db02      	blt.n	8007f2a <_printf_float+0x1fa>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	07d8      	lsls	r0, r3, #31
 8007f28:	d50f      	bpl.n	8007f4a <_printf_float+0x21a>
 8007f2a:	4653      	mov	r3, sl
 8007f2c:	465a      	mov	r2, fp
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f af49 	beq.w	8007dcc <_printf_float+0x9c>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	f104 091a 	add.w	r9, r4, #26
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4543      	cmp	r3, r8
 8007f48:	dc09      	bgt.n	8007f5e <_printf_float+0x22e>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	079b      	lsls	r3, r3, #30
 8007f4e:	f100 8108 	bmi.w	8008162 <_printf_float+0x432>
 8007f52:	68e0      	ldr	r0, [r4, #12]
 8007f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f56:	4298      	cmp	r0, r3
 8007f58:	bfb8      	it	lt
 8007f5a:	4618      	movlt	r0, r3
 8007f5c:	e738      	b.n	8007dd0 <_printf_float+0xa0>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	464a      	mov	r2, r9
 8007f62:	4631      	mov	r1, r6
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b8      	blx	r7
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f43f af2f 	beq.w	8007dcc <_printf_float+0x9c>
 8007f6e:	f108 0801 	add.w	r8, r8, #1
 8007f72:	e7e6      	b.n	8007f42 <_printf_float+0x212>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	dc3c      	bgt.n	8007ff4 <_printf_float+0x2c4>
 8007f7a:	4a1d      	ldr	r2, [pc, #116]	; (8007ff0 <_printf_float+0x2c0>)
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	f43f af21 	beq.w	8007dcc <_printf_float+0x9c>
 8007f8a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d102      	bne.n	8007f98 <_printf_float+0x268>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	07d9      	lsls	r1, r3, #31
 8007f96:	d5d8      	bpl.n	8007f4a <_printf_float+0x21a>
 8007f98:	4653      	mov	r3, sl
 8007f9a:	465a      	mov	r2, fp
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af12 	beq.w	8007dcc <_printf_float+0x9c>
 8007fa8:	f04f 0900 	mov.w	r9, #0
 8007fac:	f104 0a1a 	add.w	sl, r4, #26
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	425b      	negs	r3, r3
 8007fb4:	454b      	cmp	r3, r9
 8007fb6:	dc01      	bgt.n	8007fbc <_printf_float+0x28c>
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	e795      	b.n	8007ee8 <_printf_float+0x1b8>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f af00 	beq.w	8007dcc <_printf_float+0x9c>
 8007fcc:	f109 0901 	add.w	r9, r9, #1
 8007fd0:	e7ee      	b.n	8007fb0 <_printf_float+0x280>
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	ffffffff 	.word	0xffffffff
 8007fdc:	7fefffff 	.word	0x7fefffff
 8007fe0:	0800c35c 	.word	0x0800c35c
 8007fe4:	0800c360 	.word	0x0800c360
 8007fe8:	0800c368 	.word	0x0800c368
 8007fec:	0800c364 	.word	0x0800c364
 8007ff0:	0800c36c 	.word	0x0800c36c
 8007ff4:	9a08      	ldr	r2, [sp, #32]
 8007ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	bfa8      	it	ge
 8007ffc:	461a      	movge	r2, r3
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	4691      	mov	r9, r2
 8008002:	dc38      	bgt.n	8008076 <_printf_float+0x346>
 8008004:	2300      	movs	r3, #0
 8008006:	9305      	str	r3, [sp, #20]
 8008008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800800c:	f104 021a 	add.w	r2, r4, #26
 8008010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008012:	9905      	ldr	r1, [sp, #20]
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	eba3 0309 	sub.w	r3, r3, r9
 800801a:	428b      	cmp	r3, r1
 800801c:	dc33      	bgt.n	8008086 <_printf_float+0x356>
 800801e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008022:	429a      	cmp	r2, r3
 8008024:	db3c      	blt.n	80080a0 <_printf_float+0x370>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	d439      	bmi.n	80080a0 <_printf_float+0x370>
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	9a04      	ldr	r2, [sp, #16]
 8008030:	9907      	ldr	r1, [sp, #28]
 8008032:	1a9a      	subs	r2, r3, r2
 8008034:	eba3 0901 	sub.w	r9, r3, r1
 8008038:	4591      	cmp	r9, r2
 800803a:	bfa8      	it	ge
 800803c:	4691      	movge	r9, r2
 800803e:	f1b9 0f00 	cmp.w	r9, #0
 8008042:	dc35      	bgt.n	80080b0 <_printf_float+0x380>
 8008044:	f04f 0800 	mov.w	r8, #0
 8008048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804c:	f104 0a1a 	add.w	sl, r4, #26
 8008050:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	eba3 0309 	sub.w	r3, r3, r9
 800805a:	4543      	cmp	r3, r8
 800805c:	f77f af75 	ble.w	8007f4a <_printf_float+0x21a>
 8008060:	2301      	movs	r3, #1
 8008062:	4652      	mov	r2, sl
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	f43f aeae 	beq.w	8007dcc <_printf_float+0x9c>
 8008070:	f108 0801 	add.w	r8, r8, #1
 8008074:	e7ec      	b.n	8008050 <_printf_float+0x320>
 8008076:	4613      	mov	r3, r2
 8008078:	4631      	mov	r1, r6
 800807a:	4642      	mov	r2, r8
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d1bf      	bne.n	8008004 <_printf_float+0x2d4>
 8008084:	e6a2      	b.n	8007dcc <_printf_float+0x9c>
 8008086:	2301      	movs	r3, #1
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	9204      	str	r2, [sp, #16]
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f ae9b 	beq.w	8007dcc <_printf_float+0x9c>
 8008096:	9b05      	ldr	r3, [sp, #20]
 8008098:	9a04      	ldr	r2, [sp, #16]
 800809a:	3301      	adds	r3, #1
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	e7b7      	b.n	8008010 <_printf_float+0x2e0>
 80080a0:	4653      	mov	r3, sl
 80080a2:	465a      	mov	r2, fp
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	d1be      	bne.n	800802c <_printf_float+0x2fc>
 80080ae:	e68d      	b.n	8007dcc <_printf_float+0x9c>
 80080b0:	9a04      	ldr	r2, [sp, #16]
 80080b2:	464b      	mov	r3, r9
 80080b4:	4442      	add	r2, r8
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b8      	blx	r7
 80080bc:	3001      	adds	r0, #1
 80080be:	d1c1      	bne.n	8008044 <_printf_float+0x314>
 80080c0:	e684      	b.n	8007dcc <_printf_float+0x9c>
 80080c2:	9a08      	ldr	r2, [sp, #32]
 80080c4:	2a01      	cmp	r2, #1
 80080c6:	dc01      	bgt.n	80080cc <_printf_float+0x39c>
 80080c8:	07db      	lsls	r3, r3, #31
 80080ca:	d537      	bpl.n	800813c <_printf_float+0x40c>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4642      	mov	r2, r8
 80080d0:	4631      	mov	r1, r6
 80080d2:	4628      	mov	r0, r5
 80080d4:	47b8      	blx	r7
 80080d6:	3001      	adds	r0, #1
 80080d8:	f43f ae78 	beq.w	8007dcc <_printf_float+0x9c>
 80080dc:	4653      	mov	r3, sl
 80080de:	465a      	mov	r2, fp
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f ae70 	beq.w	8007dcc <_printf_float+0x9c>
 80080ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80080f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	d01b      	beq.n	8008132 <_printf_float+0x402>
 80080fa:	9b08      	ldr	r3, [sp, #32]
 80080fc:	f108 0201 	add.w	r2, r8, #1
 8008100:	3b01      	subs	r3, #1
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	d10e      	bne.n	800812a <_printf_float+0x3fa>
 800810c:	e65e      	b.n	8007dcc <_printf_float+0x9c>
 800810e:	2301      	movs	r3, #1
 8008110:	464a      	mov	r2, r9
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae57 	beq.w	8007dcc <_printf_float+0x9c>
 800811e:	f108 0801 	add.w	r8, r8, #1
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	3b01      	subs	r3, #1
 8008126:	4543      	cmp	r3, r8
 8008128:	dcf1      	bgt.n	800810e <_printf_float+0x3de>
 800812a:	9b04      	ldr	r3, [sp, #16]
 800812c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008130:	e6db      	b.n	8007eea <_printf_float+0x1ba>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	f104 091a 	add.w	r9, r4, #26
 800813a:	e7f2      	b.n	8008122 <_printf_float+0x3f2>
 800813c:	2301      	movs	r3, #1
 800813e:	4642      	mov	r2, r8
 8008140:	e7df      	b.n	8008102 <_printf_float+0x3d2>
 8008142:	2301      	movs	r3, #1
 8008144:	464a      	mov	r2, r9
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae3d 	beq.w	8007dcc <_printf_float+0x9c>
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	68e3      	ldr	r3, [r4, #12]
 8008158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815a:	1a5b      	subs	r3, r3, r1
 800815c:	4543      	cmp	r3, r8
 800815e:	dcf0      	bgt.n	8008142 <_printf_float+0x412>
 8008160:	e6f7      	b.n	8007f52 <_printf_float+0x222>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	f104 0919 	add.w	r9, r4, #25
 800816a:	e7f4      	b.n	8008156 <_printf_float+0x426>

0800816c <_printf_common>:
 800816c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	4616      	mov	r6, r2
 8008172:	4699      	mov	r9, r3
 8008174:	688a      	ldr	r2, [r1, #8]
 8008176:	690b      	ldr	r3, [r1, #16]
 8008178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800817c:	4293      	cmp	r3, r2
 800817e:	bfb8      	it	lt
 8008180:	4613      	movlt	r3, r2
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008188:	4607      	mov	r7, r0
 800818a:	460c      	mov	r4, r1
 800818c:	b10a      	cbz	r2, 8008192 <_printf_common+0x26>
 800818e:	3301      	adds	r3, #1
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	0699      	lsls	r1, r3, #26
 8008196:	bf42      	ittt	mi
 8008198:	6833      	ldrmi	r3, [r6, #0]
 800819a:	3302      	addmi	r3, #2
 800819c:	6033      	strmi	r3, [r6, #0]
 800819e:	6825      	ldr	r5, [r4, #0]
 80081a0:	f015 0506 	ands.w	r5, r5, #6
 80081a4:	d106      	bne.n	80081b4 <_printf_common+0x48>
 80081a6:	f104 0a19 	add.w	sl, r4, #25
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	6832      	ldr	r2, [r6, #0]
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc26      	bgt.n	8008202 <_printf_common+0x96>
 80081b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b8:	1e13      	subs	r3, r2, #0
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	0692      	lsls	r2, r2, #26
 80081c2:	d42b      	bmi.n	800821c <_printf_common+0xb0>
 80081c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c8:	4649      	mov	r1, r9
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c0      	blx	r8
 80081ce:	3001      	adds	r0, #1
 80081d0:	d01e      	beq.n	8008210 <_printf_common+0xa4>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	68e5      	ldr	r5, [r4, #12]
 80081d6:	6832      	ldr	r2, [r6, #0]
 80081d8:	f003 0306 	and.w	r3, r3, #6
 80081dc:	2b04      	cmp	r3, #4
 80081de:	bf08      	it	eq
 80081e0:	1aad      	subeq	r5, r5, r2
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	6922      	ldr	r2, [r4, #16]
 80081e6:	bf0c      	ite	eq
 80081e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081ec:	2500      	movne	r5, #0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	bfc4      	itt	gt
 80081f2:	1a9b      	subgt	r3, r3, r2
 80081f4:	18ed      	addgt	r5, r5, r3
 80081f6:	2600      	movs	r6, #0
 80081f8:	341a      	adds	r4, #26
 80081fa:	42b5      	cmp	r5, r6
 80081fc:	d11a      	bne.n	8008234 <_printf_common+0xc8>
 80081fe:	2000      	movs	r0, #0
 8008200:	e008      	b.n	8008214 <_printf_common+0xa8>
 8008202:	2301      	movs	r3, #1
 8008204:	4652      	mov	r2, sl
 8008206:	4649      	mov	r1, r9
 8008208:	4638      	mov	r0, r7
 800820a:	47c0      	blx	r8
 800820c:	3001      	adds	r0, #1
 800820e:	d103      	bne.n	8008218 <_printf_common+0xac>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008218:	3501      	adds	r5, #1
 800821a:	e7c6      	b.n	80081aa <_printf_common+0x3e>
 800821c:	18e1      	adds	r1, r4, r3
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	2030      	movs	r0, #48	; 0x30
 8008222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008226:	4422      	add	r2, r4
 8008228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800822c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008230:	3302      	adds	r3, #2
 8008232:	e7c7      	b.n	80081c4 <_printf_common+0x58>
 8008234:	2301      	movs	r3, #1
 8008236:	4622      	mov	r2, r4
 8008238:	4649      	mov	r1, r9
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d0e6      	beq.n	8008210 <_printf_common+0xa4>
 8008242:	3601      	adds	r6, #1
 8008244:	e7d9      	b.n	80081fa <_printf_common+0x8e>
	...

08008248 <_printf_i>:
 8008248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	7e0f      	ldrb	r7, [r1, #24]
 800824e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008250:	2f78      	cmp	r7, #120	; 0x78
 8008252:	4691      	mov	r9, r2
 8008254:	4680      	mov	r8, r0
 8008256:	460c      	mov	r4, r1
 8008258:	469a      	mov	sl, r3
 800825a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800825e:	d807      	bhi.n	8008270 <_printf_i+0x28>
 8008260:	2f62      	cmp	r7, #98	; 0x62
 8008262:	d80a      	bhi.n	800827a <_printf_i+0x32>
 8008264:	2f00      	cmp	r7, #0
 8008266:	f000 80d8 	beq.w	800841a <_printf_i+0x1d2>
 800826a:	2f58      	cmp	r7, #88	; 0x58
 800826c:	f000 80a3 	beq.w	80083b6 <_printf_i+0x16e>
 8008270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008278:	e03a      	b.n	80082f0 <_printf_i+0xa8>
 800827a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800827e:	2b15      	cmp	r3, #21
 8008280:	d8f6      	bhi.n	8008270 <_printf_i+0x28>
 8008282:	a101      	add	r1, pc, #4	; (adr r1, 8008288 <_printf_i+0x40>)
 8008284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082f5 	.word	0x080082f5
 8008290:	08008271 	.word	0x08008271
 8008294:	08008271 	.word	0x08008271
 8008298:	08008271 	.word	0x08008271
 800829c:	08008271 	.word	0x08008271
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	08008271 	.word	0x08008271
 80082a8:	08008271 	.word	0x08008271
 80082ac:	08008271 	.word	0x08008271
 80082b0:	08008271 	.word	0x08008271
 80082b4:	08008401 	.word	0x08008401
 80082b8:	08008325 	.word	0x08008325
 80082bc:	080083e3 	.word	0x080083e3
 80082c0:	08008271 	.word	0x08008271
 80082c4:	08008271 	.word	0x08008271
 80082c8:	08008423 	.word	0x08008423
 80082cc:	08008271 	.word	0x08008271
 80082d0:	08008325 	.word	0x08008325
 80082d4:	08008271 	.word	0x08008271
 80082d8:	08008271 	.word	0x08008271
 80082dc:	080083eb 	.word	0x080083eb
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0a3      	b.n	800843c <_printf_i+0x1f4>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	6829      	ldr	r1, [r5, #0]
 80082f8:	0606      	lsls	r6, r0, #24
 80082fa:	f101 0304 	add.w	r3, r1, #4
 80082fe:	d50a      	bpl.n	8008316 <_printf_i+0xce>
 8008300:	680e      	ldr	r6, [r1, #0]
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	2e00      	cmp	r6, #0
 8008306:	da03      	bge.n	8008310 <_printf_i+0xc8>
 8008308:	232d      	movs	r3, #45	; 0x2d
 800830a:	4276      	negs	r6, r6
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	485e      	ldr	r0, [pc, #376]	; (800848c <_printf_i+0x244>)
 8008312:	230a      	movs	r3, #10
 8008314:	e019      	b.n	800834a <_printf_i+0x102>
 8008316:	680e      	ldr	r6, [r1, #0]
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800831e:	bf18      	it	ne
 8008320:	b236      	sxthne	r6, r6
 8008322:	e7ef      	b.n	8008304 <_printf_i+0xbc>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	1d19      	adds	r1, r3, #4
 800832a:	6029      	str	r1, [r5, #0]
 800832c:	0601      	lsls	r1, r0, #24
 800832e:	d501      	bpl.n	8008334 <_printf_i+0xec>
 8008330:	681e      	ldr	r6, [r3, #0]
 8008332:	e002      	b.n	800833a <_printf_i+0xf2>
 8008334:	0646      	lsls	r6, r0, #25
 8008336:	d5fb      	bpl.n	8008330 <_printf_i+0xe8>
 8008338:	881e      	ldrh	r6, [r3, #0]
 800833a:	4854      	ldr	r0, [pc, #336]	; (800848c <_printf_i+0x244>)
 800833c:	2f6f      	cmp	r7, #111	; 0x6f
 800833e:	bf0c      	ite	eq
 8008340:	2308      	moveq	r3, #8
 8008342:	230a      	movne	r3, #10
 8008344:	2100      	movs	r1, #0
 8008346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800834a:	6865      	ldr	r5, [r4, #4]
 800834c:	60a5      	str	r5, [r4, #8]
 800834e:	2d00      	cmp	r5, #0
 8008350:	bfa2      	ittt	ge
 8008352:	6821      	ldrge	r1, [r4, #0]
 8008354:	f021 0104 	bicge.w	r1, r1, #4
 8008358:	6021      	strge	r1, [r4, #0]
 800835a:	b90e      	cbnz	r6, 8008360 <_printf_i+0x118>
 800835c:	2d00      	cmp	r5, #0
 800835e:	d04d      	beq.n	80083fc <_printf_i+0x1b4>
 8008360:	4615      	mov	r5, r2
 8008362:	fbb6 f1f3 	udiv	r1, r6, r3
 8008366:	fb03 6711 	mls	r7, r3, r1, r6
 800836a:	5dc7      	ldrb	r7, [r0, r7]
 800836c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008370:	4637      	mov	r7, r6
 8008372:	42bb      	cmp	r3, r7
 8008374:	460e      	mov	r6, r1
 8008376:	d9f4      	bls.n	8008362 <_printf_i+0x11a>
 8008378:	2b08      	cmp	r3, #8
 800837a:	d10b      	bne.n	8008394 <_printf_i+0x14c>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	07de      	lsls	r6, r3, #31
 8008380:	d508      	bpl.n	8008394 <_printf_i+0x14c>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	6861      	ldr	r1, [r4, #4]
 8008386:	4299      	cmp	r1, r3
 8008388:	bfde      	ittt	le
 800838a:	2330      	movle	r3, #48	; 0x30
 800838c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008390:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008394:	1b52      	subs	r2, r2, r5
 8008396:	6122      	str	r2, [r4, #16]
 8008398:	f8cd a000 	str.w	sl, [sp]
 800839c:	464b      	mov	r3, r9
 800839e:	aa03      	add	r2, sp, #12
 80083a0:	4621      	mov	r1, r4
 80083a2:	4640      	mov	r0, r8
 80083a4:	f7ff fee2 	bl	800816c <_printf_common>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d14c      	bne.n	8008446 <_printf_i+0x1fe>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	b004      	add	sp, #16
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	4835      	ldr	r0, [pc, #212]	; (800848c <_printf_i+0x244>)
 80083b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083bc:	6829      	ldr	r1, [r5, #0]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083c4:	6029      	str	r1, [r5, #0]
 80083c6:	061d      	lsls	r5, r3, #24
 80083c8:	d514      	bpl.n	80083f4 <_printf_i+0x1ac>
 80083ca:	07df      	lsls	r7, r3, #31
 80083cc:	bf44      	itt	mi
 80083ce:	f043 0320 	orrmi.w	r3, r3, #32
 80083d2:	6023      	strmi	r3, [r4, #0]
 80083d4:	b91e      	cbnz	r6, 80083de <_printf_i+0x196>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	f023 0320 	bic.w	r3, r3, #32
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	2310      	movs	r3, #16
 80083e0:	e7b0      	b.n	8008344 <_printf_i+0xfc>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	f043 0320 	orr.w	r3, r3, #32
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	2378      	movs	r3, #120	; 0x78
 80083ec:	4828      	ldr	r0, [pc, #160]	; (8008490 <_printf_i+0x248>)
 80083ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083f2:	e7e3      	b.n	80083bc <_printf_i+0x174>
 80083f4:	0659      	lsls	r1, r3, #25
 80083f6:	bf48      	it	mi
 80083f8:	b2b6      	uxthmi	r6, r6
 80083fa:	e7e6      	b.n	80083ca <_printf_i+0x182>
 80083fc:	4615      	mov	r5, r2
 80083fe:	e7bb      	b.n	8008378 <_printf_i+0x130>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	6826      	ldr	r6, [r4, #0]
 8008404:	6961      	ldr	r1, [r4, #20]
 8008406:	1d18      	adds	r0, r3, #4
 8008408:	6028      	str	r0, [r5, #0]
 800840a:	0635      	lsls	r5, r6, #24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	d501      	bpl.n	8008414 <_printf_i+0x1cc>
 8008410:	6019      	str	r1, [r3, #0]
 8008412:	e002      	b.n	800841a <_printf_i+0x1d2>
 8008414:	0670      	lsls	r0, r6, #25
 8008416:	d5fb      	bpl.n	8008410 <_printf_i+0x1c8>
 8008418:	8019      	strh	r1, [r3, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	6123      	str	r3, [r4, #16]
 800841e:	4615      	mov	r5, r2
 8008420:	e7ba      	b.n	8008398 <_printf_i+0x150>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	1d1a      	adds	r2, r3, #4
 8008426:	602a      	str	r2, [r5, #0]
 8008428:	681d      	ldr	r5, [r3, #0]
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	2100      	movs	r1, #0
 800842e:	4628      	mov	r0, r5
 8008430:	f7f7 ff0e 	bl	8000250 <memchr>
 8008434:	b108      	cbz	r0, 800843a <_printf_i+0x1f2>
 8008436:	1b40      	subs	r0, r0, r5
 8008438:	6060      	str	r0, [r4, #4]
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	2300      	movs	r3, #0
 8008440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008444:	e7a8      	b.n	8008398 <_printf_i+0x150>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	462a      	mov	r2, r5
 800844a:	4649      	mov	r1, r9
 800844c:	4640      	mov	r0, r8
 800844e:	47d0      	blx	sl
 8008450:	3001      	adds	r0, #1
 8008452:	d0ab      	beq.n	80083ac <_printf_i+0x164>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	079b      	lsls	r3, r3, #30
 8008458:	d413      	bmi.n	8008482 <_printf_i+0x23a>
 800845a:	68e0      	ldr	r0, [r4, #12]
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	4298      	cmp	r0, r3
 8008460:	bfb8      	it	lt
 8008462:	4618      	movlt	r0, r3
 8008464:	e7a4      	b.n	80083b0 <_printf_i+0x168>
 8008466:	2301      	movs	r3, #1
 8008468:	4632      	mov	r2, r6
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d09b      	beq.n	80083ac <_printf_i+0x164>
 8008474:	3501      	adds	r5, #1
 8008476:	68e3      	ldr	r3, [r4, #12]
 8008478:	9903      	ldr	r1, [sp, #12]
 800847a:	1a5b      	subs	r3, r3, r1
 800847c:	42ab      	cmp	r3, r5
 800847e:	dcf2      	bgt.n	8008466 <_printf_i+0x21e>
 8008480:	e7eb      	b.n	800845a <_printf_i+0x212>
 8008482:	2500      	movs	r5, #0
 8008484:	f104 0619 	add.w	r6, r4, #25
 8008488:	e7f5      	b.n	8008476 <_printf_i+0x22e>
 800848a:	bf00      	nop
 800848c:	0800c36e 	.word	0x0800c36e
 8008490:	0800c37f 	.word	0x0800c37f

08008494 <_scanf_float>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	b087      	sub	sp, #28
 800849a:	4617      	mov	r7, r2
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	688b      	ldr	r3, [r1, #8]
 80084a0:	1e5a      	subs	r2, r3, #1
 80084a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084a6:	bf83      	ittte	hi
 80084a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084ac:	195b      	addhi	r3, r3, r5
 80084ae:	9302      	strhi	r3, [sp, #8]
 80084b0:	2300      	movls	r3, #0
 80084b2:	bf86      	itte	hi
 80084b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084b8:	608b      	strhi	r3, [r1, #8]
 80084ba:	9302      	strls	r3, [sp, #8]
 80084bc:	680b      	ldr	r3, [r1, #0]
 80084be:	468b      	mov	fp, r1
 80084c0:	2500      	movs	r5, #0
 80084c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80084ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084ce:	4680      	mov	r8, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	465e      	mov	r6, fp
 80084d4:	46aa      	mov	sl, r5
 80084d6:	46a9      	mov	r9, r5
 80084d8:	9501      	str	r5, [sp, #4]
 80084da:	68a2      	ldr	r2, [r4, #8]
 80084dc:	b152      	cbz	r2, 80084f4 <_scanf_float+0x60>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b4e      	cmp	r3, #78	; 0x4e
 80084e4:	d864      	bhi.n	80085b0 <_scanf_float+0x11c>
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d83c      	bhi.n	8008564 <_scanf_float+0xd0>
 80084ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80084ee:	b2c8      	uxtb	r0, r1
 80084f0:	280e      	cmp	r0, #14
 80084f2:	d93a      	bls.n	800856a <_scanf_float+0xd6>
 80084f4:	f1b9 0f00 	cmp.w	r9, #0
 80084f8:	d003      	beq.n	8008502 <_scanf_float+0x6e>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008506:	f1ba 0f01 	cmp.w	sl, #1
 800850a:	f200 8113 	bhi.w	8008734 <_scanf_float+0x2a0>
 800850e:	455e      	cmp	r6, fp
 8008510:	f200 8105 	bhi.w	800871e <_scanf_float+0x28a>
 8008514:	2501      	movs	r5, #1
 8008516:	4628      	mov	r0, r5
 8008518:	b007      	add	sp, #28
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008522:	2a0d      	cmp	r2, #13
 8008524:	d8e6      	bhi.n	80084f4 <_scanf_float+0x60>
 8008526:	a101      	add	r1, pc, #4	; (adr r1, 800852c <_scanf_float+0x98>)
 8008528:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800852c:	0800866b 	.word	0x0800866b
 8008530:	080084f5 	.word	0x080084f5
 8008534:	080084f5 	.word	0x080084f5
 8008538:	080084f5 	.word	0x080084f5
 800853c:	080086cb 	.word	0x080086cb
 8008540:	080086a3 	.word	0x080086a3
 8008544:	080084f5 	.word	0x080084f5
 8008548:	080084f5 	.word	0x080084f5
 800854c:	08008679 	.word	0x08008679
 8008550:	080084f5 	.word	0x080084f5
 8008554:	080084f5 	.word	0x080084f5
 8008558:	080084f5 	.word	0x080084f5
 800855c:	080084f5 	.word	0x080084f5
 8008560:	08008631 	.word	0x08008631
 8008564:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008568:	e7db      	b.n	8008522 <_scanf_float+0x8e>
 800856a:	290e      	cmp	r1, #14
 800856c:	d8c2      	bhi.n	80084f4 <_scanf_float+0x60>
 800856e:	a001      	add	r0, pc, #4	; (adr r0, 8008574 <_scanf_float+0xe0>)
 8008570:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008574:	08008623 	.word	0x08008623
 8008578:	080084f5 	.word	0x080084f5
 800857c:	08008623 	.word	0x08008623
 8008580:	080086b7 	.word	0x080086b7
 8008584:	080084f5 	.word	0x080084f5
 8008588:	080085d1 	.word	0x080085d1
 800858c:	0800860d 	.word	0x0800860d
 8008590:	0800860d 	.word	0x0800860d
 8008594:	0800860d 	.word	0x0800860d
 8008598:	0800860d 	.word	0x0800860d
 800859c:	0800860d 	.word	0x0800860d
 80085a0:	0800860d 	.word	0x0800860d
 80085a4:	0800860d 	.word	0x0800860d
 80085a8:	0800860d 	.word	0x0800860d
 80085ac:	0800860d 	.word	0x0800860d
 80085b0:	2b6e      	cmp	r3, #110	; 0x6e
 80085b2:	d809      	bhi.n	80085c8 <_scanf_float+0x134>
 80085b4:	2b60      	cmp	r3, #96	; 0x60
 80085b6:	d8b2      	bhi.n	800851e <_scanf_float+0x8a>
 80085b8:	2b54      	cmp	r3, #84	; 0x54
 80085ba:	d077      	beq.n	80086ac <_scanf_float+0x218>
 80085bc:	2b59      	cmp	r3, #89	; 0x59
 80085be:	d199      	bne.n	80084f4 <_scanf_float+0x60>
 80085c0:	2d07      	cmp	r5, #7
 80085c2:	d197      	bne.n	80084f4 <_scanf_float+0x60>
 80085c4:	2508      	movs	r5, #8
 80085c6:	e029      	b.n	800861c <_scanf_float+0x188>
 80085c8:	2b74      	cmp	r3, #116	; 0x74
 80085ca:	d06f      	beq.n	80086ac <_scanf_float+0x218>
 80085cc:	2b79      	cmp	r3, #121	; 0x79
 80085ce:	e7f6      	b.n	80085be <_scanf_float+0x12a>
 80085d0:	6821      	ldr	r1, [r4, #0]
 80085d2:	05c8      	lsls	r0, r1, #23
 80085d4:	d51a      	bpl.n	800860c <_scanf_float+0x178>
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085dc:	6021      	str	r1, [r4, #0]
 80085de:	f109 0901 	add.w	r9, r9, #1
 80085e2:	b11b      	cbz	r3, 80085ec <_scanf_float+0x158>
 80085e4:	3b01      	subs	r3, #1
 80085e6:	3201      	adds	r2, #1
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	60a2      	str	r2, [r4, #8]
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	3301      	adds	r3, #1
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	607b      	str	r3, [r7, #4]
 8008600:	f340 8084 	ble.w	800870c <_scanf_float+0x278>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	3301      	adds	r3, #1
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	e766      	b.n	80084da <_scanf_float+0x46>
 800860c:	eb1a 0f05 	cmn.w	sl, r5
 8008610:	f47f af70 	bne.w	80084f4 <_scanf_float+0x60>
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800861a:	6022      	str	r2, [r4, #0]
 800861c:	f806 3b01 	strb.w	r3, [r6], #1
 8008620:	e7e4      	b.n	80085ec <_scanf_float+0x158>
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	0610      	lsls	r0, r2, #24
 8008626:	f57f af65 	bpl.w	80084f4 <_scanf_float+0x60>
 800862a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800862e:	e7f4      	b.n	800861a <_scanf_float+0x186>
 8008630:	f1ba 0f00 	cmp.w	sl, #0
 8008634:	d10e      	bne.n	8008654 <_scanf_float+0x1c0>
 8008636:	f1b9 0f00 	cmp.w	r9, #0
 800863a:	d10e      	bne.n	800865a <_scanf_float+0x1c6>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008642:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008646:	d108      	bne.n	800865a <_scanf_float+0x1c6>
 8008648:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	f04f 0a01 	mov.w	sl, #1
 8008652:	e7e3      	b.n	800861c <_scanf_float+0x188>
 8008654:	f1ba 0f02 	cmp.w	sl, #2
 8008658:	d055      	beq.n	8008706 <_scanf_float+0x272>
 800865a:	2d01      	cmp	r5, #1
 800865c:	d002      	beq.n	8008664 <_scanf_float+0x1d0>
 800865e:	2d04      	cmp	r5, #4
 8008660:	f47f af48 	bne.w	80084f4 <_scanf_float+0x60>
 8008664:	3501      	adds	r5, #1
 8008666:	b2ed      	uxtb	r5, r5
 8008668:	e7d8      	b.n	800861c <_scanf_float+0x188>
 800866a:	f1ba 0f01 	cmp.w	sl, #1
 800866e:	f47f af41 	bne.w	80084f4 <_scanf_float+0x60>
 8008672:	f04f 0a02 	mov.w	sl, #2
 8008676:	e7d1      	b.n	800861c <_scanf_float+0x188>
 8008678:	b97d      	cbnz	r5, 800869a <_scanf_float+0x206>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	f47f af3c 	bne.w	80084fa <_scanf_float+0x66>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008688:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800868c:	f47f af39 	bne.w	8008502 <_scanf_float+0x6e>
 8008690:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	2501      	movs	r5, #1
 8008698:	e7c0      	b.n	800861c <_scanf_float+0x188>
 800869a:	2d03      	cmp	r5, #3
 800869c:	d0e2      	beq.n	8008664 <_scanf_float+0x1d0>
 800869e:	2d05      	cmp	r5, #5
 80086a0:	e7de      	b.n	8008660 <_scanf_float+0x1cc>
 80086a2:	2d02      	cmp	r5, #2
 80086a4:	f47f af26 	bne.w	80084f4 <_scanf_float+0x60>
 80086a8:	2503      	movs	r5, #3
 80086aa:	e7b7      	b.n	800861c <_scanf_float+0x188>
 80086ac:	2d06      	cmp	r5, #6
 80086ae:	f47f af21 	bne.w	80084f4 <_scanf_float+0x60>
 80086b2:	2507      	movs	r5, #7
 80086b4:	e7b2      	b.n	800861c <_scanf_float+0x188>
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	0591      	lsls	r1, r2, #22
 80086ba:	f57f af1b 	bpl.w	80084f4 <_scanf_float+0x60>
 80086be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086c8:	e7a8      	b.n	800861c <_scanf_float+0x188>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086d4:	d006      	beq.n	80086e4 <_scanf_float+0x250>
 80086d6:	0550      	lsls	r0, r2, #21
 80086d8:	f57f af0c 	bpl.w	80084f4 <_scanf_float+0x60>
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	f43f af0f 	beq.w	8008502 <_scanf_float+0x6e>
 80086e4:	0591      	lsls	r1, r2, #22
 80086e6:	bf58      	it	pl
 80086e8:	9901      	ldrpl	r1, [sp, #4]
 80086ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086ee:	bf58      	it	pl
 80086f0:	eba9 0101 	subpl.w	r1, r9, r1
 80086f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80086f8:	bf58      	it	pl
 80086fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	f04f 0900 	mov.w	r9, #0
 8008704:	e78a      	b.n	800861c <_scanf_float+0x188>
 8008706:	f04f 0a03 	mov.w	sl, #3
 800870a:	e787      	b.n	800861c <_scanf_float+0x188>
 800870c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008710:	4639      	mov	r1, r7
 8008712:	4640      	mov	r0, r8
 8008714:	4798      	blx	r3
 8008716:	2800      	cmp	r0, #0
 8008718:	f43f aedf 	beq.w	80084da <_scanf_float+0x46>
 800871c:	e6ea      	b.n	80084f4 <_scanf_float+0x60>
 800871e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008726:	463a      	mov	r2, r7
 8008728:	4640      	mov	r0, r8
 800872a:	4798      	blx	r3
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	3b01      	subs	r3, #1
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	e6ec      	b.n	800850e <_scanf_float+0x7a>
 8008734:	1e6b      	subs	r3, r5, #1
 8008736:	2b06      	cmp	r3, #6
 8008738:	d825      	bhi.n	8008786 <_scanf_float+0x2f2>
 800873a:	2d02      	cmp	r5, #2
 800873c:	d836      	bhi.n	80087ac <_scanf_float+0x318>
 800873e:	455e      	cmp	r6, fp
 8008740:	f67f aee8 	bls.w	8008514 <_scanf_float+0x80>
 8008744:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008748:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800874c:	463a      	mov	r2, r7
 800874e:	4640      	mov	r0, r8
 8008750:	4798      	blx	r3
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	3b01      	subs	r3, #1
 8008756:	6123      	str	r3, [r4, #16]
 8008758:	e7f1      	b.n	800873e <_scanf_float+0x2aa>
 800875a:	9802      	ldr	r0, [sp, #8]
 800875c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008760:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008764:	9002      	str	r0, [sp, #8]
 8008766:	463a      	mov	r2, r7
 8008768:	4640      	mov	r0, r8
 800876a:	4798      	blx	r3
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	3b01      	subs	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008776:	fa5f fa8a 	uxtb.w	sl, sl
 800877a:	f1ba 0f02 	cmp.w	sl, #2
 800877e:	d1ec      	bne.n	800875a <_scanf_float+0x2c6>
 8008780:	3d03      	subs	r5, #3
 8008782:	b2ed      	uxtb	r5, r5
 8008784:	1b76      	subs	r6, r6, r5
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	05da      	lsls	r2, r3, #23
 800878a:	d52f      	bpl.n	80087ec <_scanf_float+0x358>
 800878c:	055b      	lsls	r3, r3, #21
 800878e:	d510      	bpl.n	80087b2 <_scanf_float+0x31e>
 8008790:	455e      	cmp	r6, fp
 8008792:	f67f aebf 	bls.w	8008514 <_scanf_float+0x80>
 8008796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800879a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800879e:	463a      	mov	r2, r7
 80087a0:	4640      	mov	r0, r8
 80087a2:	4798      	blx	r3
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	e7f1      	b.n	8008790 <_scanf_float+0x2fc>
 80087ac:	46aa      	mov	sl, r5
 80087ae:	9602      	str	r6, [sp, #8]
 80087b0:	e7df      	b.n	8008772 <_scanf_float+0x2de>
 80087b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	2965      	cmp	r1, #101	; 0x65
 80087ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80087be:	f106 35ff 	add.w	r5, r6, #4294967295
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	d00c      	beq.n	80087e0 <_scanf_float+0x34c>
 80087c6:	2945      	cmp	r1, #69	; 0x45
 80087c8:	d00a      	beq.n	80087e0 <_scanf_float+0x34c>
 80087ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ce:	463a      	mov	r2, r7
 80087d0:	4640      	mov	r0, r8
 80087d2:	4798      	blx	r3
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087da:	3b01      	subs	r3, #1
 80087dc:	1eb5      	subs	r5, r6, #2
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087e4:	463a      	mov	r2, r7
 80087e6:	4640      	mov	r0, r8
 80087e8:	4798      	blx	r3
 80087ea:	462e      	mov	r6, r5
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	f015 0510 	ands.w	r5, r5, #16
 80087f2:	d14e      	bne.n	8008892 <_scanf_float+0x3fe>
 80087f4:	7035      	strb	r5, [r6, #0]
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008800:	d119      	bne.n	8008836 <_scanf_float+0x3a2>
 8008802:	9b01      	ldr	r3, [sp, #4]
 8008804:	454b      	cmp	r3, r9
 8008806:	eba3 0209 	sub.w	r2, r3, r9
 800880a:	d121      	bne.n	8008850 <_scanf_float+0x3bc>
 800880c:	2200      	movs	r2, #0
 800880e:	4659      	mov	r1, fp
 8008810:	4640      	mov	r0, r8
 8008812:	f000 fe53 	bl	80094bc <_strtod_r>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	f012 0f02 	tst.w	r2, #2
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	d021      	beq.n	8008866 <_scanf_float+0x3d2>
 8008822:	9903      	ldr	r1, [sp, #12]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	600a      	str	r2, [r1, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	ed83 0b00 	vstr	d0, [r3]
 800882e:	68e3      	ldr	r3, [r4, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60e3      	str	r3, [r4, #12]
 8008834:	e66f      	b.n	8008516 <_scanf_float+0x82>
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0e7      	beq.n	800880c <_scanf_float+0x378>
 800883c:	9905      	ldr	r1, [sp, #20]
 800883e:	230a      	movs	r3, #10
 8008840:	462a      	mov	r2, r5
 8008842:	3101      	adds	r1, #1
 8008844:	4640      	mov	r0, r8
 8008846:	f000 fec1 	bl	80095cc <_strtol_r>
 800884a:	9b04      	ldr	r3, [sp, #16]
 800884c:	9e05      	ldr	r6, [sp, #20]
 800884e:	1ac2      	subs	r2, r0, r3
 8008850:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008854:	429e      	cmp	r6, r3
 8008856:	bf28      	it	cs
 8008858:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800885c:	490e      	ldr	r1, [pc, #56]	; (8008898 <_scanf_float+0x404>)
 800885e:	4630      	mov	r0, r6
 8008860:	f000 f83c 	bl	80088dc <siprintf>
 8008864:	e7d2      	b.n	800880c <_scanf_float+0x378>
 8008866:	9903      	ldr	r1, [sp, #12]
 8008868:	f012 0f04 	tst.w	r2, #4
 800886c:	f103 0204 	add.w	r2, r3, #4
 8008870:	600a      	str	r2, [r1, #0]
 8008872:	d1d9      	bne.n	8008828 <_scanf_float+0x394>
 8008874:	eeb4 0b40 	vcmp.f64	d0, d0
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	681e      	ldr	r6, [r3, #0]
 800887e:	d705      	bvc.n	800888c <_scanf_float+0x3f8>
 8008880:	4806      	ldr	r0, [pc, #24]	; (800889c <_scanf_float+0x408>)
 8008882:	f000 f825 	bl	80088d0 <nanf>
 8008886:	ed86 0a00 	vstr	s0, [r6]
 800888a:	e7d0      	b.n	800882e <_scanf_float+0x39a>
 800888c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008890:	e7f9      	b.n	8008886 <_scanf_float+0x3f2>
 8008892:	2500      	movs	r5, #0
 8008894:	e63f      	b.n	8008516 <_scanf_float+0x82>
 8008896:	bf00      	nop
 8008898:	0800c390 	.word	0x0800c390
 800889c:	0800c800 	.word	0x0800c800

080088a0 <iprintf>:
 80088a0:	b40f      	push	{r0, r1, r2, r3}
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <iprintf+0x2c>)
 80088a4:	b513      	push	{r0, r1, r4, lr}
 80088a6:	681c      	ldr	r4, [r3, #0]
 80088a8:	b124      	cbz	r4, 80088b4 <iprintf+0x14>
 80088aa:	69a3      	ldr	r3, [r4, #24]
 80088ac:	b913      	cbnz	r3, 80088b4 <iprintf+0x14>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f001 fce0 	bl	800a274 <__sinit>
 80088b4:	ab05      	add	r3, sp, #20
 80088b6:	9a04      	ldr	r2, [sp, #16]
 80088b8:	68a1      	ldr	r1, [r4, #8]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	4620      	mov	r0, r4
 80088be:	f003 f84f 	bl	800b960 <_vfiprintf_r>
 80088c2:	b002      	add	sp, #8
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	b004      	add	sp, #16
 80088ca:	4770      	bx	lr
 80088cc:	20000050 	.word	0x20000050

080088d0 <nanf>:
 80088d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088d8 <nanf+0x8>
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	7fc00000 	.word	0x7fc00000

080088dc <siprintf>:
 80088dc:	b40e      	push	{r1, r2, r3}
 80088de:	b500      	push	{lr}
 80088e0:	b09c      	sub	sp, #112	; 0x70
 80088e2:	ab1d      	add	r3, sp, #116	; 0x74
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	9006      	str	r0, [sp, #24]
 80088e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088ec:	4809      	ldr	r0, [pc, #36]	; (8008914 <siprintf+0x38>)
 80088ee:	9107      	str	r1, [sp, #28]
 80088f0:	9104      	str	r1, [sp, #16]
 80088f2:	4909      	ldr	r1, [pc, #36]	; (8008918 <siprintf+0x3c>)
 80088f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f8:	9105      	str	r1, [sp, #20]
 80088fa:	6800      	ldr	r0, [r0, #0]
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	a902      	add	r1, sp, #8
 8008900:	f002 ff04 	bl	800b70c <_svfiprintf_r>
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	b01c      	add	sp, #112	; 0x70
 800890c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008910:	b003      	add	sp, #12
 8008912:	4770      	bx	lr
 8008914:	20000050 	.word	0x20000050
 8008918:	ffff0208 	.word	0xffff0208

0800891c <sulp>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	4604      	mov	r4, r0
 8008920:	460d      	mov	r5, r1
 8008922:	4616      	mov	r6, r2
 8008924:	ec45 4b10 	vmov	d0, r4, r5
 8008928:	f002 fc52 	bl	800b1d0 <__ulp>
 800892c:	b17e      	cbz	r6, 800894e <sulp+0x32>
 800892e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008932:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008936:	2b00      	cmp	r3, #0
 8008938:	dd09      	ble.n	800894e <sulp+0x32>
 800893a:	051b      	lsls	r3, r3, #20
 800893c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008940:	2000      	movs	r0, #0
 8008942:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008946:	ec41 0b17 	vmov	d7, r0, r1
 800894a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <_strtod_l>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	ed2d 8b0e 	vpush	{d8-d14}
 8008958:	b097      	sub	sp, #92	; 0x5c
 800895a:	461f      	mov	r7, r3
 800895c:	2300      	movs	r3, #0
 800895e:	9312      	str	r3, [sp, #72]	; 0x48
 8008960:	4ba1      	ldr	r3, [pc, #644]	; (8008be8 <_strtod_l+0x298>)
 8008962:	920d      	str	r2, [sp, #52]	; 0x34
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	4604      	mov	r4, r0
 800896a:	4618      	mov	r0, r3
 800896c:	468b      	mov	fp, r1
 800896e:	f7f7 fc67 	bl	8000240 <strlen>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	4605      	mov	r5, r0
 8008978:	f04f 0900 	mov.w	r9, #0
 800897c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008980:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008982:	7813      	ldrb	r3, [r2, #0]
 8008984:	2b2b      	cmp	r3, #43	; 0x2b
 8008986:	d04d      	beq.n	8008a24 <_strtod_l+0xd4>
 8008988:	d83a      	bhi.n	8008a00 <_strtod_l+0xb0>
 800898a:	2b0d      	cmp	r3, #13
 800898c:	d833      	bhi.n	80089f6 <_strtod_l+0xa6>
 800898e:	2b08      	cmp	r3, #8
 8008990:	d833      	bhi.n	80089fa <_strtod_l+0xaa>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d03d      	beq.n	8008a12 <_strtod_l+0xc2>
 8008996:	2300      	movs	r3, #0
 8008998:	9308      	str	r3, [sp, #32]
 800899a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800899c:	7833      	ldrb	r3, [r6, #0]
 800899e:	2b30      	cmp	r3, #48	; 0x30
 80089a0:	f040 80b0 	bne.w	8008b04 <_strtod_l+0x1b4>
 80089a4:	7873      	ldrb	r3, [r6, #1]
 80089a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089aa:	2b58      	cmp	r3, #88	; 0x58
 80089ac:	d167      	bne.n	8008a7e <_strtod_l+0x12e>
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	ab12      	add	r3, sp, #72	; 0x48
 80089b4:	9702      	str	r7, [sp, #8]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	4a8c      	ldr	r2, [pc, #560]	; (8008bec <_strtod_l+0x29c>)
 80089ba:	ab13      	add	r3, sp, #76	; 0x4c
 80089bc:	a911      	add	r1, sp, #68	; 0x44
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 fd5c 	bl	800a47c <__gethex>
 80089c4:	f010 0507 	ands.w	r5, r0, #7
 80089c8:	4607      	mov	r7, r0
 80089ca:	d005      	beq.n	80089d8 <_strtod_l+0x88>
 80089cc:	2d06      	cmp	r5, #6
 80089ce:	d12b      	bne.n	8008a28 <_strtod_l+0xd8>
 80089d0:	3601      	adds	r6, #1
 80089d2:	2300      	movs	r3, #0
 80089d4:	9611      	str	r6, [sp, #68]	; 0x44
 80089d6:	9308      	str	r3, [sp, #32]
 80089d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 854e 	bne.w	800947c <_strtod_l+0xb2c>
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	b1e3      	cbz	r3, 8008a1e <_strtod_l+0xce>
 80089e4:	ec49 8b17 	vmov	d7, r8, r9
 80089e8:	eeb1 0b47 	vneg.f64	d0, d7
 80089ec:	b017      	add	sp, #92	; 0x5c
 80089ee:	ecbd 8b0e 	vpop	{d8-d14}
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d1cd      	bne.n	8008996 <_strtod_l+0x46>
 80089fa:	3201      	adds	r2, #1
 80089fc:	9211      	str	r2, [sp, #68]	; 0x44
 80089fe:	e7bf      	b.n	8008980 <_strtod_l+0x30>
 8008a00:	2b2d      	cmp	r3, #45	; 0x2d
 8008a02:	d1c8      	bne.n	8008996 <_strtod_l+0x46>
 8008a04:	2301      	movs	r3, #1
 8008a06:	9308      	str	r3, [sp, #32]
 8008a08:	1c53      	adds	r3, r2, #1
 8008a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a0c:	7853      	ldrb	r3, [r2, #1]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1c3      	bne.n	800899a <_strtod_l+0x4a>
 8008a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 852d 	bne.w	8009478 <_strtod_l+0xb28>
 8008a1e:	ec49 8b10 	vmov	d0, r8, r9
 8008a22:	e7e3      	b.n	80089ec <_strtod_l+0x9c>
 8008a24:	2300      	movs	r3, #0
 8008a26:	e7ee      	b.n	8008a06 <_strtod_l+0xb6>
 8008a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a2a:	b13a      	cbz	r2, 8008a3c <_strtod_l+0xec>
 8008a2c:	2135      	movs	r1, #53	; 0x35
 8008a2e:	a814      	add	r0, sp, #80	; 0x50
 8008a30:	f002 fcd6 	bl	800b3e0 <__copybits>
 8008a34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a36:	4620      	mov	r0, r4
 8008a38:	f002 f898 	bl	800ab6c <_Bfree>
 8008a3c:	3d01      	subs	r5, #1
 8008a3e:	2d04      	cmp	r5, #4
 8008a40:	d806      	bhi.n	8008a50 <_strtod_l+0x100>
 8008a42:	e8df f005 	tbb	[pc, r5]
 8008a46:	030a      	.short	0x030a
 8008a48:	1714      	.short	0x1714
 8008a4a:	0a          	.byte	0x0a
 8008a4b:	00          	.byte	0x00
 8008a4c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008a50:	073f      	lsls	r7, r7, #28
 8008a52:	d5c1      	bpl.n	80089d8 <_strtod_l+0x88>
 8008a54:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008a58:	e7be      	b.n	80089d8 <_strtod_l+0x88>
 8008a5a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008a5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a6c:	e7f0      	b.n	8008a50 <_strtod_l+0x100>
 8008a6e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008bf0 <_strtod_l+0x2a0>
 8008a72:	e7ed      	b.n	8008a50 <_strtod_l+0x100>
 8008a74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a78:	f04f 38ff 	mov.w	r8, #4294967295
 8008a7c:	e7e8      	b.n	8008a50 <_strtod_l+0x100>
 8008a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	9211      	str	r2, [sp, #68]	; 0x44
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b30      	cmp	r3, #48	; 0x30
 8008a88:	d0f9      	beq.n	8008a7e <_strtod_l+0x12e>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0a4      	beq.n	80089d8 <_strtod_l+0x88>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f04f 0a00 	mov.w	sl, #0
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a98:	930a      	str	r3, [sp, #40]	; 0x28
 8008a9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a9e:	f8cd a018 	str.w	sl, [sp, #24]
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008aa6:	7807      	ldrb	r7, [r0, #0]
 8008aa8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008aac:	b2d9      	uxtb	r1, r3
 8008aae:	2909      	cmp	r1, #9
 8008ab0:	d92a      	bls.n	8008b08 <_strtod_l+0x1b8>
 8008ab2:	9907      	ldr	r1, [sp, #28]
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	f003 f8de 	bl	800bc76 <strncmp>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d033      	beq.n	8008b26 <_strtod_l+0x1d6>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	9b06      	ldr	r3, [sp, #24]
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4601      	mov	r1, r0
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	2a65      	cmp	r2, #101	; 0x65
 8008aca:	d001      	beq.n	8008ad0 <_strtod_l+0x180>
 8008acc:	2a45      	cmp	r2, #69	; 0x45
 8008ace:	d117      	bne.n	8008b00 <_strtod_l+0x1b0>
 8008ad0:	b91b      	cbnz	r3, 8008ada <_strtod_l+0x18a>
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	4303      	orrs	r3, r0
 8008ad6:	d09c      	beq.n	8008a12 <_strtod_l+0xc2>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008ade:	f10b 0201 	add.w	r2, fp, #1
 8008ae2:	9211      	str	r2, [sp, #68]	; 0x44
 8008ae4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008ae8:	2a2b      	cmp	r2, #43	; 0x2b
 8008aea:	d071      	beq.n	8008bd0 <_strtod_l+0x280>
 8008aec:	2a2d      	cmp	r2, #45	; 0x2d
 8008aee:	d077      	beq.n	8008be0 <_strtod_l+0x290>
 8008af0:	f04f 0e00 	mov.w	lr, #0
 8008af4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008af8:	2d09      	cmp	r5, #9
 8008afa:	d97f      	bls.n	8008bfc <_strtod_l+0x2ac>
 8008afc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008b00:	2500      	movs	r5, #0
 8008b02:	e09b      	b.n	8008c3c <_strtod_l+0x2ec>
 8008b04:	2300      	movs	r3, #0
 8008b06:	e7c3      	b.n	8008a90 <_strtod_l+0x140>
 8008b08:	9906      	ldr	r1, [sp, #24]
 8008b0a:	2908      	cmp	r1, #8
 8008b0c:	bfdd      	ittte	le
 8008b0e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b10:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b14:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b16:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	3301      	adds	r3, #1
 8008b20:	9306      	str	r3, [sp, #24]
 8008b22:	9011      	str	r0, [sp, #68]	; 0x44
 8008b24:	e7be      	b.n	8008aa4 <_strtod_l+0x154>
 8008b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b28:	195a      	adds	r2, r3, r5
 8008b2a:	9211      	str	r2, [sp, #68]	; 0x44
 8008b2c:	5d5a      	ldrb	r2, [r3, r5]
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	b3a3      	cbz	r3, 8008b9c <_strtod_l+0x24c>
 8008b32:	4607      	mov	r7, r0
 8008b34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b38:	2909      	cmp	r1, #9
 8008b3a:	d912      	bls.n	8008b62 <_strtod_l+0x212>
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	e7c3      	b.n	8008ac8 <_strtod_l+0x178>
 8008b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	9211      	str	r2, [sp, #68]	; 0x44
 8008b46:	785a      	ldrb	r2, [r3, #1]
 8008b48:	3001      	adds	r0, #1
 8008b4a:	2a30      	cmp	r2, #48	; 0x30
 8008b4c:	d0f8      	beq.n	8008b40 <_strtod_l+0x1f0>
 8008b4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	f200 8497 	bhi.w	8009486 <_strtod_l+0xb36>
 8008b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	2000      	movs	r0, #0
 8008b60:	4603      	mov	r3, r0
 8008b62:	3a30      	subs	r2, #48	; 0x30
 8008b64:	f100 0101 	add.w	r1, r0, #1
 8008b68:	d012      	beq.n	8008b90 <_strtod_l+0x240>
 8008b6a:	440f      	add	r7, r1
 8008b6c:	eb00 0c03 	add.w	ip, r0, r3
 8008b70:	4619      	mov	r1, r3
 8008b72:	250a      	movs	r5, #10
 8008b74:	4561      	cmp	r1, ip
 8008b76:	d113      	bne.n	8008ba0 <_strtod_l+0x250>
 8008b78:	1819      	adds	r1, r3, r0
 8008b7a:	2908      	cmp	r1, #8
 8008b7c:	f103 0301 	add.w	r3, r3, #1
 8008b80:	4403      	add	r3, r0
 8008b82:	dc1c      	bgt.n	8008bbe <_strtod_l+0x26e>
 8008b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b86:	210a      	movs	r1, #10
 8008b88:	fb01 2200 	mla	r2, r1, r0, r2
 8008b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8e:	2100      	movs	r1, #0
 8008b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b92:	1c50      	adds	r0, r2, #1
 8008b94:	9011      	str	r0, [sp, #68]	; 0x44
 8008b96:	7852      	ldrb	r2, [r2, #1]
 8008b98:	4608      	mov	r0, r1
 8008b9a:	e7cb      	b.n	8008b34 <_strtod_l+0x1e4>
 8008b9c:	9806      	ldr	r0, [sp, #24]
 8008b9e:	e7d4      	b.n	8008b4a <_strtod_l+0x1fa>
 8008ba0:	2908      	cmp	r1, #8
 8008ba2:	dc04      	bgt.n	8008bae <_strtod_l+0x25e>
 8008ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ba6:	436e      	muls	r6, r5
 8008ba8:	9609      	str	r6, [sp, #36]	; 0x24
 8008baa:	3101      	adds	r1, #1
 8008bac:	e7e2      	b.n	8008b74 <_strtod_l+0x224>
 8008bae:	f101 0e01 	add.w	lr, r1, #1
 8008bb2:	f1be 0f10 	cmp.w	lr, #16
 8008bb6:	bfd8      	it	le
 8008bb8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008bbc:	e7f5      	b.n	8008baa <_strtod_l+0x25a>
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	bfdc      	itt	le
 8008bc2:	210a      	movle	r1, #10
 8008bc4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008bc8:	e7e1      	b.n	8008b8e <_strtod_l+0x23e>
 8008bca:	2700      	movs	r7, #0
 8008bcc:	2101      	movs	r1, #1
 8008bce:	e780      	b.n	8008ad2 <_strtod_l+0x182>
 8008bd0:	f04f 0e00 	mov.w	lr, #0
 8008bd4:	f10b 0202 	add.w	r2, fp, #2
 8008bd8:	9211      	str	r2, [sp, #68]	; 0x44
 8008bda:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008bde:	e789      	b.n	8008af4 <_strtod_l+0x1a4>
 8008be0:	f04f 0e01 	mov.w	lr, #1
 8008be4:	e7f6      	b.n	8008bd4 <_strtod_l+0x284>
 8008be6:	bf00      	nop
 8008be8:	0800c644 	.word	0x0800c644
 8008bec:	0800c398 	.word	0x0800c398
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bf6:	1c55      	adds	r5, r2, #1
 8008bf8:	9511      	str	r5, [sp, #68]	; 0x44
 8008bfa:	7852      	ldrb	r2, [r2, #1]
 8008bfc:	2a30      	cmp	r2, #48	; 0x30
 8008bfe:	d0f9      	beq.n	8008bf4 <_strtod_l+0x2a4>
 8008c00:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008c04:	2d08      	cmp	r5, #8
 8008c06:	f63f af7b 	bhi.w	8008b00 <_strtod_l+0x1b0>
 8008c0a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008c0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c14:	1c55      	adds	r5, r2, #1
 8008c16:	9511      	str	r5, [sp, #68]	; 0x44
 8008c18:	7852      	ldrb	r2, [r2, #1]
 8008c1a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c1e:	2e09      	cmp	r6, #9
 8008c20:	d937      	bls.n	8008c92 <_strtod_l+0x342>
 8008c22:	9e07      	ldr	r6, [sp, #28]
 8008c24:	1bad      	subs	r5, r5, r6
 8008c26:	2d08      	cmp	r5, #8
 8008c28:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008c2c:	dc02      	bgt.n	8008c34 <_strtod_l+0x2e4>
 8008c2e:	4565      	cmp	r5, ip
 8008c30:	bfa8      	it	ge
 8008c32:	4665      	movge	r5, ip
 8008c34:	f1be 0f00 	cmp.w	lr, #0
 8008c38:	d000      	beq.n	8008c3c <_strtod_l+0x2ec>
 8008c3a:	426d      	negs	r5, r5
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d14d      	bne.n	8008cdc <_strtod_l+0x38c>
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	4303      	orrs	r3, r0
 8008c44:	f47f aec8 	bne.w	80089d8 <_strtod_l+0x88>
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	f47f aee2 	bne.w	8008a12 <_strtod_l+0xc2>
 8008c4e:	2a69      	cmp	r2, #105	; 0x69
 8008c50:	d027      	beq.n	8008ca2 <_strtod_l+0x352>
 8008c52:	dc24      	bgt.n	8008c9e <_strtod_l+0x34e>
 8008c54:	2a49      	cmp	r2, #73	; 0x49
 8008c56:	d024      	beq.n	8008ca2 <_strtod_l+0x352>
 8008c58:	2a4e      	cmp	r2, #78	; 0x4e
 8008c5a:	f47f aeda 	bne.w	8008a12 <_strtod_l+0xc2>
 8008c5e:	4996      	ldr	r1, [pc, #600]	; (8008eb8 <_strtod_l+0x568>)
 8008c60:	a811      	add	r0, sp, #68	; 0x44
 8008c62:	f001 fe63 	bl	800a92c <__match>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f43f aed3 	beq.w	8008a12 <_strtod_l+0xc2>
 8008c6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b28      	cmp	r3, #40	; 0x28
 8008c72:	d12d      	bne.n	8008cd0 <_strtod_l+0x380>
 8008c74:	4991      	ldr	r1, [pc, #580]	; (8008ebc <_strtod_l+0x56c>)
 8008c76:	aa14      	add	r2, sp, #80	; 0x50
 8008c78:	a811      	add	r0, sp, #68	; 0x44
 8008c7a:	f001 fe6b 	bl	800a954 <__hexnan>
 8008c7e:	2805      	cmp	r0, #5
 8008c80:	d126      	bne.n	8008cd0 <_strtod_l+0x380>
 8008c82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c84:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008c88:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c8c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c90:	e6a2      	b.n	80089d8 <_strtod_l+0x88>
 8008c92:	250a      	movs	r5, #10
 8008c94:	fb05 250c 	mla	r5, r5, ip, r2
 8008c98:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008c9c:	e7b9      	b.n	8008c12 <_strtod_l+0x2c2>
 8008c9e:	2a6e      	cmp	r2, #110	; 0x6e
 8008ca0:	e7db      	b.n	8008c5a <_strtod_l+0x30a>
 8008ca2:	4987      	ldr	r1, [pc, #540]	; (8008ec0 <_strtod_l+0x570>)
 8008ca4:	a811      	add	r0, sp, #68	; 0x44
 8008ca6:	f001 fe41 	bl	800a92c <__match>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f43f aeb1 	beq.w	8008a12 <_strtod_l+0xc2>
 8008cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb2:	4984      	ldr	r1, [pc, #528]	; (8008ec4 <_strtod_l+0x574>)
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	a811      	add	r0, sp, #68	; 0x44
 8008cb8:	9311      	str	r3, [sp, #68]	; 0x44
 8008cba:	f001 fe37 	bl	800a92c <__match>
 8008cbe:	b910      	cbnz	r0, 8008cc6 <_strtod_l+0x376>
 8008cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8008cc6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008ed8 <_strtod_l+0x588>
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	e683      	b.n	80089d8 <_strtod_l+0x88>
 8008cd0:	487d      	ldr	r0, [pc, #500]	; (8008ec8 <_strtod_l+0x578>)
 8008cd2:	f002 ff75 	bl	800bbc0 <nan>
 8008cd6:	ec59 8b10 	vmov	r8, r9, d0
 8008cda:	e67d      	b.n	80089d8 <_strtod_l+0x88>
 8008cdc:	1bea      	subs	r2, r5, r7
 8008cde:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	9a06      	ldr	r2, [sp, #24]
 8008ce6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	bf08      	it	eq
 8008cee:	461a      	moveq	r2, r3
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	9206      	str	r2, [sp, #24]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	bfa8      	it	ge
 8008cf8:	2210      	movge	r2, #16
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	ec59 8b17 	vmov	r8, r9, d7
 8008d00:	dd0c      	ble.n	8008d1c <_strtod_l+0x3cc>
 8008d02:	4972      	ldr	r1, [pc, #456]	; (8008ecc <_strtod_l+0x57c>)
 8008d04:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008d08:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008d0c:	ee06 aa90 	vmov	s13, sl
 8008d10:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008d14:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008d18:	ec59 8b16 	vmov	r8, r9, d6
 8008d1c:	2b0f      	cmp	r3, #15
 8008d1e:	dc36      	bgt.n	8008d8e <_strtod_l+0x43e>
 8008d20:	9907      	ldr	r1, [sp, #28]
 8008d22:	2900      	cmp	r1, #0
 8008d24:	f43f ae58 	beq.w	80089d8 <_strtod_l+0x88>
 8008d28:	dd23      	ble.n	8008d72 <_strtod_l+0x422>
 8008d2a:	2916      	cmp	r1, #22
 8008d2c:	dc0b      	bgt.n	8008d46 <_strtod_l+0x3f6>
 8008d2e:	4b67      	ldr	r3, [pc, #412]	; (8008ecc <_strtod_l+0x57c>)
 8008d30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008d34:	ed93 7b00 	vldr	d7, [r3]
 8008d38:	ec49 8b16 	vmov	d6, r8, r9
 8008d3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d40:	ec59 8b17 	vmov	r8, r9, d7
 8008d44:	e648      	b.n	80089d8 <_strtod_l+0x88>
 8008d46:	9807      	ldr	r0, [sp, #28]
 8008d48:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008d4c:	4281      	cmp	r1, r0
 8008d4e:	db1e      	blt.n	8008d8e <_strtod_l+0x43e>
 8008d50:	4a5e      	ldr	r2, [pc, #376]	; (8008ecc <_strtod_l+0x57c>)
 8008d52:	f1c3 030f 	rsb	r3, r3, #15
 8008d56:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008d5a:	ed91 7b00 	vldr	d7, [r1]
 8008d5e:	ec49 8b16 	vmov	d6, r8, r9
 8008d62:	1ac3      	subs	r3, r0, r3
 8008d64:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d6c:	ed92 6b00 	vldr	d6, [r2]
 8008d70:	e7e4      	b.n	8008d3c <_strtod_l+0x3ec>
 8008d72:	9907      	ldr	r1, [sp, #28]
 8008d74:	3116      	adds	r1, #22
 8008d76:	db0a      	blt.n	8008d8e <_strtod_l+0x43e>
 8008d78:	4b54      	ldr	r3, [pc, #336]	; (8008ecc <_strtod_l+0x57c>)
 8008d7a:	1b7d      	subs	r5, r7, r5
 8008d7c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008d80:	ed95 7b00 	vldr	d7, [r5]
 8008d84:	ec49 8b16 	vmov	d6, r8, r9
 8008d88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008d8c:	e7d8      	b.n	8008d40 <_strtod_l+0x3f0>
 8008d8e:	9907      	ldr	r1, [sp, #28]
 8008d90:	1a9a      	subs	r2, r3, r2
 8008d92:	440a      	add	r2, r1
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	dd6f      	ble.n	8008e78 <_strtod_l+0x528>
 8008d98:	f012 000f 	ands.w	r0, r2, #15
 8008d9c:	d00a      	beq.n	8008db4 <_strtod_l+0x464>
 8008d9e:	494b      	ldr	r1, [pc, #300]	; (8008ecc <_strtod_l+0x57c>)
 8008da0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008da4:	ed91 7b00 	vldr	d7, [r1]
 8008da8:	ec49 8b16 	vmov	d6, r8, r9
 8008dac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008db0:	ec59 8b17 	vmov	r8, r9, d7
 8008db4:	f032 020f 	bics.w	r2, r2, #15
 8008db8:	d04f      	beq.n	8008e5a <_strtod_l+0x50a>
 8008dba:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008dbe:	dd22      	ble.n	8008e06 <_strtod_l+0x4b6>
 8008dc0:	2500      	movs	r5, #0
 8008dc2:	462e      	mov	r6, r5
 8008dc4:	9506      	str	r5, [sp, #24]
 8008dc6:	462f      	mov	r7, r5
 8008dc8:	2322      	movs	r3, #34	; 0x22
 8008dca:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008ed8 <_strtod_l+0x588>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	f04f 0800 	mov.w	r8, #0
 8008dd4:	9b06      	ldr	r3, [sp, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f43f adfe 	beq.w	80089d8 <_strtod_l+0x88>
 8008ddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008dde:	4620      	mov	r0, r4
 8008de0:	f001 fec4 	bl	800ab6c <_Bfree>
 8008de4:	4639      	mov	r1, r7
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fec0 	bl	800ab6c <_Bfree>
 8008dec:	4631      	mov	r1, r6
 8008dee:	4620      	mov	r0, r4
 8008df0:	f001 febc 	bl	800ab6c <_Bfree>
 8008df4:	9906      	ldr	r1, [sp, #24]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f001 feb8 	bl	800ab6c <_Bfree>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 feb4 	bl	800ab6c <_Bfree>
 8008e04:	e5e8      	b.n	80089d8 <_strtod_l+0x88>
 8008e06:	2000      	movs	r0, #0
 8008e08:	ec49 8b17 	vmov	d7, r8, r9
 8008e0c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008ed0 <_strtod_l+0x580>
 8008e10:	1112      	asrs	r2, r2, #4
 8008e12:	4601      	mov	r1, r0
 8008e14:	2a01      	cmp	r2, #1
 8008e16:	dc23      	bgt.n	8008e60 <_strtod_l+0x510>
 8008e18:	b108      	cbz	r0, 8008e1e <_strtod_l+0x4ce>
 8008e1a:	ec59 8b17 	vmov	r8, r9, d7
 8008e1e:	4a2c      	ldr	r2, [pc, #176]	; (8008ed0 <_strtod_l+0x580>)
 8008e20:	482c      	ldr	r0, [pc, #176]	; (8008ed4 <_strtod_l+0x584>)
 8008e22:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008e26:	ed92 7b00 	vldr	d7, [r2]
 8008e2a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e2e:	ec49 8b16 	vmov	d6, r8, r9
 8008e32:	4a29      	ldr	r2, [pc, #164]	; (8008ed8 <_strtod_l+0x588>)
 8008e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e38:	ee17 1a90 	vmov	r1, s15
 8008e3c:	400a      	ands	r2, r1
 8008e3e:	4282      	cmp	r2, r0
 8008e40:	ec59 8b17 	vmov	r8, r9, d7
 8008e44:	d8bc      	bhi.n	8008dc0 <_strtod_l+0x470>
 8008e46:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008e4a:	4282      	cmp	r2, r0
 8008e4c:	bf86      	itte	hi
 8008e4e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008edc <_strtod_l+0x58c>
 8008e52:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e56:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	9204      	str	r2, [sp, #16]
 8008e5e:	e078      	b.n	8008f52 <_strtod_l+0x602>
 8008e60:	07d6      	lsls	r6, r2, #31
 8008e62:	d504      	bpl.n	8008e6e <_strtod_l+0x51e>
 8008e64:	ed9c 6b00 	vldr	d6, [ip]
 8008e68:	2001      	movs	r0, #1
 8008e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e6e:	3101      	adds	r1, #1
 8008e70:	1052      	asrs	r2, r2, #1
 8008e72:	f10c 0c08 	add.w	ip, ip, #8
 8008e76:	e7cd      	b.n	8008e14 <_strtod_l+0x4c4>
 8008e78:	d0ef      	beq.n	8008e5a <_strtod_l+0x50a>
 8008e7a:	4252      	negs	r2, r2
 8008e7c:	f012 000f 	ands.w	r0, r2, #15
 8008e80:	d00a      	beq.n	8008e98 <_strtod_l+0x548>
 8008e82:	4912      	ldr	r1, [pc, #72]	; (8008ecc <_strtod_l+0x57c>)
 8008e84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008e88:	ed91 7b00 	vldr	d7, [r1]
 8008e8c:	ec49 8b16 	vmov	d6, r8, r9
 8008e90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008e94:	ec59 8b17 	vmov	r8, r9, d7
 8008e98:	1112      	asrs	r2, r2, #4
 8008e9a:	d0de      	beq.n	8008e5a <_strtod_l+0x50a>
 8008e9c:	2a1f      	cmp	r2, #31
 8008e9e:	dd1f      	ble.n	8008ee0 <_strtod_l+0x590>
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	462e      	mov	r6, r5
 8008ea4:	9506      	str	r5, [sp, #24]
 8008ea6:	462f      	mov	r7, r5
 8008ea8:	2322      	movs	r3, #34	; 0x22
 8008eaa:	f04f 0800 	mov.w	r8, #0
 8008eae:	f04f 0900 	mov.w	r9, #0
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	e78e      	b.n	8008dd4 <_strtod_l+0x484>
 8008eb6:	bf00      	nop
 8008eb8:	0800c369 	.word	0x0800c369
 8008ebc:	0800c3ac 	.word	0x0800c3ac
 8008ec0:	0800c361 	.word	0x0800c361
 8008ec4:	0800c4ec 	.word	0x0800c4ec
 8008ec8:	0800c800 	.word	0x0800c800
 8008ecc:	0800c6e0 	.word	0x0800c6e0
 8008ed0:	0800c6b8 	.word	0x0800c6b8
 8008ed4:	7ca00000 	.word	0x7ca00000
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	7fefffff 	.word	0x7fefffff
 8008ee0:	f012 0110 	ands.w	r1, r2, #16
 8008ee4:	bf18      	it	ne
 8008ee6:	216a      	movne	r1, #106	; 0x6a
 8008ee8:	9104      	str	r1, [sp, #16]
 8008eea:	ec49 8b17 	vmov	d7, r8, r9
 8008eee:	49be      	ldr	r1, [pc, #760]	; (80091e8 <_strtod_l+0x898>)
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	07d6      	lsls	r6, r2, #31
 8008ef4:	d504      	bpl.n	8008f00 <_strtod_l+0x5b0>
 8008ef6:	ed91 6b00 	vldr	d6, [r1]
 8008efa:	2001      	movs	r0, #1
 8008efc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f00:	1052      	asrs	r2, r2, #1
 8008f02:	f101 0108 	add.w	r1, r1, #8
 8008f06:	d1f4      	bne.n	8008ef2 <_strtod_l+0x5a2>
 8008f08:	b108      	cbz	r0, 8008f0e <_strtod_l+0x5be>
 8008f0a:	ec59 8b17 	vmov	r8, r9, d7
 8008f0e:	9a04      	ldr	r2, [sp, #16]
 8008f10:	b1c2      	cbz	r2, 8008f44 <_strtod_l+0x5f4>
 8008f12:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008f16:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	4648      	mov	r0, r9
 8008f1e:	dd11      	ble.n	8008f44 <_strtod_l+0x5f4>
 8008f20:	2a1f      	cmp	r2, #31
 8008f22:	f340 812e 	ble.w	8009182 <_strtod_l+0x832>
 8008f26:	2a34      	cmp	r2, #52	; 0x34
 8008f28:	bfde      	ittt	le
 8008f2a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008f2e:	f04f 32ff 	movle.w	r2, #4294967295
 8008f32:	fa02 f101 	lslle.w	r1, r2, r1
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	bfcc      	ite	gt
 8008f3c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f40:	ea01 0900 	andle.w	r9, r1, r0
 8008f44:	ec49 8b17 	vmov	d7, r8, r9
 8008f48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	d0a6      	beq.n	8008ea0 <_strtod_l+0x550>
 8008f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f54:	9200      	str	r2, [sp, #0]
 8008f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f58:	9a06      	ldr	r2, [sp, #24]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f001 fe6e 	bl	800ac3c <__s2b>
 8008f60:	9006      	str	r0, [sp, #24]
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f43f af2c 	beq.w	8008dc0 <_strtod_l+0x470>
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	1b7d      	subs	r5, r7, r5
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bfb4      	ite	lt
 8008f70:	462b      	movlt	r3, r5
 8008f72:	2300      	movge	r3, #0
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	9b07      	ldr	r3, [sp, #28]
 8008f78:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80091c8 <_strtod_l+0x878>
 8008f7c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80091d0 <_strtod_l+0x880>
 8008f80:	ed9f bb95 	vldr	d11, [pc, #596]	; 80091d8 <_strtod_l+0x888>
 8008f84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f88:	2500      	movs	r5, #0
 8008f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f8c:	462e      	mov	r6, r5
 8008f8e:	9b06      	ldr	r3, [sp, #24]
 8008f90:	4620      	mov	r0, r4
 8008f92:	6859      	ldr	r1, [r3, #4]
 8008f94:	f001 fdaa 	bl	800aaec <_Balloc>
 8008f98:	4607      	mov	r7, r0
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f43f af14 	beq.w	8008dc8 <_strtod_l+0x478>
 8008fa0:	9b06      	ldr	r3, [sp, #24]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	3202      	adds	r2, #2
 8008fa6:	f103 010c 	add.w	r1, r3, #12
 8008faa:	0092      	lsls	r2, r2, #2
 8008fac:	300c      	adds	r0, #12
 8008fae:	f001 fd8f 	bl	800aad0 <memcpy>
 8008fb2:	ec49 8b10 	vmov	d0, r8, r9
 8008fb6:	aa14      	add	r2, sp, #80	; 0x50
 8008fb8:	a913      	add	r1, sp, #76	; 0x4c
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f002 f984 	bl	800b2c8 <__d2b>
 8008fc0:	ec49 8b18 	vmov	d8, r8, r9
 8008fc4:	9012      	str	r0, [sp, #72]	; 0x48
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f aefe 	beq.w	8008dc8 <_strtod_l+0x478>
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f001 fece 	bl	800ad70 <__i2b>
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f aef6 	beq.w	8008dc8 <_strtod_l+0x478>
 8008fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fde:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bfab      	itete	ge
 8008fe4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008fe6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008fe8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008fec:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008ff0:	bfac      	ite	ge
 8008ff2:	eb03 0b02 	addge.w	fp, r3, r2
 8008ff6:	eba2 0a03 	sublt.w	sl, r2, r3
 8008ffa:	9a04      	ldr	r2, [sp, #16]
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	440b      	add	r3, r1
 8009000:	4a7a      	ldr	r2, [pc, #488]	; (80091ec <_strtod_l+0x89c>)
 8009002:	3b01      	subs	r3, #1
 8009004:	4293      	cmp	r3, r2
 8009006:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800900a:	f280 80cd 	bge.w	80091a8 <_strtod_l+0x858>
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	2a1f      	cmp	r2, #31
 8009012:	eba1 0102 	sub.w	r1, r1, r2
 8009016:	f04f 0001 	mov.w	r0, #1
 800901a:	f300 80b9 	bgt.w	8009190 <_strtod_l+0x840>
 800901e:	fa00 f302 	lsl.w	r3, r0, r2
 8009022:	930b      	str	r3, [sp, #44]	; 0x2c
 8009024:	2300      	movs	r3, #0
 8009026:	930a      	str	r3, [sp, #40]	; 0x28
 8009028:	eb0b 0301 	add.w	r3, fp, r1
 800902c:	9a04      	ldr	r2, [sp, #16]
 800902e:	459b      	cmp	fp, r3
 8009030:	448a      	add	sl, r1
 8009032:	4492      	add	sl, r2
 8009034:	465a      	mov	r2, fp
 8009036:	bfa8      	it	ge
 8009038:	461a      	movge	r2, r3
 800903a:	4552      	cmp	r2, sl
 800903c:	bfa8      	it	ge
 800903e:	4652      	movge	r2, sl
 8009040:	2a00      	cmp	r2, #0
 8009042:	bfc2      	ittt	gt
 8009044:	1a9b      	subgt	r3, r3, r2
 8009046:	ebaa 0a02 	subgt.w	sl, sl, r2
 800904a:	ebab 0b02 	subgt.w	fp, fp, r2
 800904e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009050:	2a00      	cmp	r2, #0
 8009052:	dd18      	ble.n	8009086 <_strtod_l+0x736>
 8009054:	4631      	mov	r1, r6
 8009056:	4620      	mov	r0, r4
 8009058:	930f      	str	r3, [sp, #60]	; 0x3c
 800905a:	f001 ff49 	bl	800aef0 <__pow5mult>
 800905e:	4606      	mov	r6, r0
 8009060:	2800      	cmp	r0, #0
 8009062:	f43f aeb1 	beq.w	8008dc8 <_strtod_l+0x478>
 8009066:	4601      	mov	r1, r0
 8009068:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800906a:	4620      	mov	r0, r4
 800906c:	f001 fe96 	bl	800ad9c <__multiply>
 8009070:	900e      	str	r0, [sp, #56]	; 0x38
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f aea8 	beq.w	8008dc8 <_strtod_l+0x478>
 8009078:	9912      	ldr	r1, [sp, #72]	; 0x48
 800907a:	4620      	mov	r0, r4
 800907c:	f001 fd76 	bl	800ab6c <_Bfree>
 8009080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009084:	9212      	str	r2, [sp, #72]	; 0x48
 8009086:	2b00      	cmp	r3, #0
 8009088:	f300 8093 	bgt.w	80091b2 <_strtod_l+0x862>
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd08      	ble.n	80090a4 <_strtod_l+0x754>
 8009092:	4639      	mov	r1, r7
 8009094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009096:	4620      	mov	r0, r4
 8009098:	f001 ff2a 	bl	800aef0 <__pow5mult>
 800909c:	4607      	mov	r7, r0
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f ae92 	beq.w	8008dc8 <_strtod_l+0x478>
 80090a4:	f1ba 0f00 	cmp.w	sl, #0
 80090a8:	dd08      	ble.n	80090bc <_strtod_l+0x76c>
 80090aa:	4639      	mov	r1, r7
 80090ac:	4652      	mov	r2, sl
 80090ae:	4620      	mov	r0, r4
 80090b0:	f001 ff78 	bl	800afa4 <__lshift>
 80090b4:	4607      	mov	r7, r0
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f ae86 	beq.w	8008dc8 <_strtod_l+0x478>
 80090bc:	f1bb 0f00 	cmp.w	fp, #0
 80090c0:	dd08      	ble.n	80090d4 <_strtod_l+0x784>
 80090c2:	4631      	mov	r1, r6
 80090c4:	465a      	mov	r2, fp
 80090c6:	4620      	mov	r0, r4
 80090c8:	f001 ff6c 	bl	800afa4 <__lshift>
 80090cc:	4606      	mov	r6, r0
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f ae7a 	beq.w	8008dc8 <_strtod_l+0x478>
 80090d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80090d6:	463a      	mov	r2, r7
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 ffef 	bl	800b0bc <__mdiff>
 80090de:	4605      	mov	r5, r0
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f43f ae71 	beq.w	8008dc8 <_strtod_l+0x478>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80090ec:	60c3      	str	r3, [r0, #12]
 80090ee:	4631      	mov	r1, r6
 80090f0:	f001 ffc8 	bl	800b084 <__mcmp>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	da7d      	bge.n	80091f4 <_strtod_l+0x8a4>
 80090f8:	ea5a 0308 	orrs.w	r3, sl, r8
 80090fc:	f040 80a3 	bne.w	8009246 <_strtod_l+0x8f6>
 8009100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009104:	2b00      	cmp	r3, #0
 8009106:	f040 809e 	bne.w	8009246 <_strtod_l+0x8f6>
 800910a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800910e:	0d1b      	lsrs	r3, r3, #20
 8009110:	051b      	lsls	r3, r3, #20
 8009112:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009116:	f240 8096 	bls.w	8009246 <_strtod_l+0x8f6>
 800911a:	696b      	ldr	r3, [r5, #20]
 800911c:	b91b      	cbnz	r3, 8009126 <_strtod_l+0x7d6>
 800911e:	692b      	ldr	r3, [r5, #16]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f340 8090 	ble.w	8009246 <_strtod_l+0x8f6>
 8009126:	4629      	mov	r1, r5
 8009128:	2201      	movs	r2, #1
 800912a:	4620      	mov	r0, r4
 800912c:	f001 ff3a 	bl	800afa4 <__lshift>
 8009130:	4631      	mov	r1, r6
 8009132:	4605      	mov	r5, r0
 8009134:	f001 ffa6 	bl	800b084 <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	f340 8084 	ble.w	8009246 <_strtod_l+0x8f6>
 800913e:	9904      	ldr	r1, [sp, #16]
 8009140:	4a2b      	ldr	r2, [pc, #172]	; (80091f0 <_strtod_l+0x8a0>)
 8009142:	464b      	mov	r3, r9
 8009144:	2900      	cmp	r1, #0
 8009146:	f000 809d 	beq.w	8009284 <_strtod_l+0x934>
 800914a:	ea02 0109 	and.w	r1, r2, r9
 800914e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009152:	f300 8097 	bgt.w	8009284 <_strtod_l+0x934>
 8009156:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800915a:	f77f aea5 	ble.w	8008ea8 <_strtod_l+0x558>
 800915e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80091e0 <_strtod_l+0x890>
 8009162:	ec49 8b16 	vmov	d6, r8, r9
 8009166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800916a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800916e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	bf08      	it	eq
 8009176:	2322      	moveq	r3, #34	; 0x22
 8009178:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800917c:	bf08      	it	eq
 800917e:	6023      	streq	r3, [r4, #0]
 8009180:	e62c      	b.n	8008ddc <_strtod_l+0x48c>
 8009182:	f04f 31ff 	mov.w	r1, #4294967295
 8009186:	fa01 f202 	lsl.w	r2, r1, r2
 800918a:	ea02 0808 	and.w	r8, r2, r8
 800918e:	e6d9      	b.n	8008f44 <_strtod_l+0x5f4>
 8009190:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009194:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009198:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800919c:	33e2      	adds	r3, #226	; 0xe2
 800919e:	fa00 f303 	lsl.w	r3, r0, r3
 80091a2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80091a6:	e73f      	b.n	8009028 <_strtod_l+0x6d8>
 80091a8:	2200      	movs	r2, #0
 80091aa:	2301      	movs	r3, #1
 80091ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80091b0:	e73a      	b.n	8009028 <_strtod_l+0x6d8>
 80091b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80091b4:	461a      	mov	r2, r3
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 fef4 	bl	800afa4 <__lshift>
 80091bc:	9012      	str	r0, [sp, #72]	; 0x48
 80091be:	2800      	cmp	r0, #0
 80091c0:	f47f af64 	bne.w	800908c <_strtod_l+0x73c>
 80091c4:	e600      	b.n	8008dc8 <_strtod_l+0x478>
 80091c6:	bf00      	nop
 80091c8:	94a03595 	.word	0x94a03595
 80091cc:	3fcfffff 	.word	0x3fcfffff
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fdfffff 	.word	0x3fdfffff
 80091d8:	35afe535 	.word	0x35afe535
 80091dc:	3fe00000 	.word	0x3fe00000
 80091e0:	00000000 	.word	0x00000000
 80091e4:	39500000 	.word	0x39500000
 80091e8:	0800c3c0 	.word	0x0800c3c0
 80091ec:	fffffc02 	.word	0xfffffc02
 80091f0:	7ff00000 	.word	0x7ff00000
 80091f4:	46cb      	mov	fp, r9
 80091f6:	d15f      	bne.n	80092b8 <_strtod_l+0x968>
 80091f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091fc:	f1ba 0f00 	cmp.w	sl, #0
 8009200:	d02a      	beq.n	8009258 <_strtod_l+0x908>
 8009202:	4aa7      	ldr	r2, [pc, #668]	; (80094a0 <_strtod_l+0xb50>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d12b      	bne.n	8009260 <_strtod_l+0x910>
 8009208:	9b04      	ldr	r3, [sp, #16]
 800920a:	4642      	mov	r2, r8
 800920c:	b1fb      	cbz	r3, 800924e <_strtod_l+0x8fe>
 800920e:	4ba5      	ldr	r3, [pc, #660]	; (80094a4 <_strtod_l+0xb54>)
 8009210:	ea09 0303 	and.w	r3, r9, r3
 8009214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009218:	f04f 31ff 	mov.w	r1, #4294967295
 800921c:	d81a      	bhi.n	8009254 <_strtod_l+0x904>
 800921e:	0d1b      	lsrs	r3, r3, #20
 8009220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009224:	fa01 f303 	lsl.w	r3, r1, r3
 8009228:	429a      	cmp	r2, r3
 800922a:	d119      	bne.n	8009260 <_strtod_l+0x910>
 800922c:	4b9e      	ldr	r3, [pc, #632]	; (80094a8 <_strtod_l+0xb58>)
 800922e:	459b      	cmp	fp, r3
 8009230:	d102      	bne.n	8009238 <_strtod_l+0x8e8>
 8009232:	3201      	adds	r2, #1
 8009234:	f43f adc8 	beq.w	8008dc8 <_strtod_l+0x478>
 8009238:	4b9a      	ldr	r3, [pc, #616]	; (80094a4 <_strtod_l+0xb54>)
 800923a:	ea0b 0303 	and.w	r3, fp, r3
 800923e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009242:	f04f 0800 	mov.w	r8, #0
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d188      	bne.n	800915e <_strtod_l+0x80e>
 800924c:	e5c6      	b.n	8008ddc <_strtod_l+0x48c>
 800924e:	f04f 33ff 	mov.w	r3, #4294967295
 8009252:	e7e9      	b.n	8009228 <_strtod_l+0x8d8>
 8009254:	460b      	mov	r3, r1
 8009256:	e7e7      	b.n	8009228 <_strtod_l+0x8d8>
 8009258:	ea53 0308 	orrs.w	r3, r3, r8
 800925c:	f43f af6f 	beq.w	800913e <_strtod_l+0x7ee>
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	b1cb      	cbz	r3, 8009298 <_strtod_l+0x948>
 8009264:	ea13 0f0b 	tst.w	r3, fp
 8009268:	d0ed      	beq.n	8009246 <_strtod_l+0x8f6>
 800926a:	9a04      	ldr	r2, [sp, #16]
 800926c:	4640      	mov	r0, r8
 800926e:	4649      	mov	r1, r9
 8009270:	f1ba 0f00 	cmp.w	sl, #0
 8009274:	d014      	beq.n	80092a0 <_strtod_l+0x950>
 8009276:	f7ff fb51 	bl	800891c <sulp>
 800927a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800927e:	ec59 8b17 	vmov	r8, r9, d7
 8009282:	e7e0      	b.n	8009246 <_strtod_l+0x8f6>
 8009284:	4013      	ands	r3, r2
 8009286:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800928a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800928e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009292:	f04f 38ff 	mov.w	r8, #4294967295
 8009296:	e7d6      	b.n	8009246 <_strtod_l+0x8f6>
 8009298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929a:	ea13 0f08 	tst.w	r3, r8
 800929e:	e7e3      	b.n	8009268 <_strtod_l+0x918>
 80092a0:	f7ff fb3c 	bl	800891c <sulp>
 80092a4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80092a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80092ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b0:	ec59 8b10 	vmov	r8, r9, d0
 80092b4:	d1c7      	bne.n	8009246 <_strtod_l+0x8f6>
 80092b6:	e5f7      	b.n	8008ea8 <_strtod_l+0x558>
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	f002 f860 	bl	800b380 <__ratio>
 80092c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80092c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80092c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092cc:	d865      	bhi.n	800939a <_strtod_l+0xa4a>
 80092ce:	f1ba 0f00 	cmp.w	sl, #0
 80092d2:	d042      	beq.n	800935a <_strtod_l+0xa0a>
 80092d4:	4b75      	ldr	r3, [pc, #468]	; (80094ac <_strtod_l+0xb5c>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80092dc:	4871      	ldr	r0, [pc, #452]	; (80094a4 <_strtod_l+0xb54>)
 80092de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80094b8 <_strtod_l+0xb68>
 80092e2:	ea0b 0100 	and.w	r1, fp, r0
 80092e6:	4561      	cmp	r1, ip
 80092e8:	f040 808e 	bne.w	8009408 <_strtod_l+0xab8>
 80092ec:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80092f0:	ec49 8b10 	vmov	d0, r8, r9
 80092f4:	ec43 2b1c 	vmov	d12, r2, r3
 80092f8:	910a      	str	r1, [sp, #40]	; 0x28
 80092fa:	f001 ff69 	bl	800b1d0 <__ulp>
 80092fe:	ec49 8b1e 	vmov	d14, r8, r9
 8009302:	4868      	ldr	r0, [pc, #416]	; (80094a4 <_strtod_l+0xb54>)
 8009304:	eeac eb00 	vfma.f64	d14, d12, d0
 8009308:	ee1e 3a90 	vmov	r3, s29
 800930c:	4a68      	ldr	r2, [pc, #416]	; (80094b0 <_strtod_l+0xb60>)
 800930e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009310:	4018      	ands	r0, r3
 8009312:	4290      	cmp	r0, r2
 8009314:	ec59 8b1e 	vmov	r8, r9, d14
 8009318:	d94e      	bls.n	80093b8 <_strtod_l+0xa68>
 800931a:	ee18 3a90 	vmov	r3, s17
 800931e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009322:	4293      	cmp	r3, r2
 8009324:	d104      	bne.n	8009330 <_strtod_l+0x9e0>
 8009326:	ee18 3a10 	vmov	r3, s16
 800932a:	3301      	adds	r3, #1
 800932c:	f43f ad4c 	beq.w	8008dc8 <_strtod_l+0x478>
 8009330:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80094a8 <_strtod_l+0xb58>
 8009334:	f04f 38ff 	mov.w	r8, #4294967295
 8009338:	9912      	ldr	r1, [sp, #72]	; 0x48
 800933a:	4620      	mov	r0, r4
 800933c:	f001 fc16 	bl	800ab6c <_Bfree>
 8009340:	4639      	mov	r1, r7
 8009342:	4620      	mov	r0, r4
 8009344:	f001 fc12 	bl	800ab6c <_Bfree>
 8009348:	4631      	mov	r1, r6
 800934a:	4620      	mov	r0, r4
 800934c:	f001 fc0e 	bl	800ab6c <_Bfree>
 8009350:	4629      	mov	r1, r5
 8009352:	4620      	mov	r0, r4
 8009354:	f001 fc0a 	bl	800ab6c <_Bfree>
 8009358:	e619      	b.n	8008f8e <_strtod_l+0x63e>
 800935a:	f1b8 0f00 	cmp.w	r8, #0
 800935e:	d112      	bne.n	8009386 <_strtod_l+0xa36>
 8009360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009364:	b9b3      	cbnz	r3, 8009394 <_strtod_l+0xa44>
 8009366:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800936a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009372:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009376:	bf58      	it	pl
 8009378:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800937c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009380:	ec53 2b17 	vmov	r2, r3, d7
 8009384:	e7aa      	b.n	80092dc <_strtod_l+0x98c>
 8009386:	f1b8 0f01 	cmp.w	r8, #1
 800938a:	d103      	bne.n	8009394 <_strtod_l+0xa44>
 800938c:	f1b9 0f00 	cmp.w	r9, #0
 8009390:	f43f ad8a 	beq.w	8008ea8 <_strtod_l+0x558>
 8009394:	4b47      	ldr	r3, [pc, #284]	; (80094b4 <_strtod_l+0xb64>)
 8009396:	2200      	movs	r2, #0
 8009398:	e79e      	b.n	80092d8 <_strtod_l+0x988>
 800939a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800939e:	ee20 db0d 	vmul.f64	d13, d0, d13
 80093a2:	f1ba 0f00 	cmp.w	sl, #0
 80093a6:	d104      	bne.n	80093b2 <_strtod_l+0xa62>
 80093a8:	eeb1 7b4d 	vneg.f64	d7, d13
 80093ac:	ec53 2b17 	vmov	r2, r3, d7
 80093b0:	e794      	b.n	80092dc <_strtod_l+0x98c>
 80093b2:	eeb0 7b4d 	vmov.f64	d7, d13
 80093b6:	e7f9      	b.n	80093ac <_strtod_l+0xa5c>
 80093b8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1ba      	bne.n	8009338 <_strtod_l+0x9e8>
 80093c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093c6:	0d1b      	lsrs	r3, r3, #20
 80093c8:	051b      	lsls	r3, r3, #20
 80093ca:	4299      	cmp	r1, r3
 80093cc:	d1b4      	bne.n	8009338 <_strtod_l+0x9e8>
 80093ce:	ec51 0b1d 	vmov	r0, r1, d13
 80093d2:	f7f7 f961 	bl	8000698 <__aeabi_d2lz>
 80093d6:	f7f7 f919 	bl	800060c <__aeabi_l2d>
 80093da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093de:	ec41 0b17 	vmov	d7, r0, r1
 80093e2:	ea43 0308 	orr.w	r3, r3, r8
 80093e6:	ea53 030a 	orrs.w	r3, r3, sl
 80093ea:	ee3d db47 	vsub.f64	d13, d13, d7
 80093ee:	d03c      	beq.n	800946a <_strtod_l+0xb1a>
 80093f0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80093f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f8:	f53f acf0 	bmi.w	8008ddc <_strtod_l+0x48c>
 80093fc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	dd98      	ble.n	8009338 <_strtod_l+0x9e8>
 8009406:	e4e9      	b.n	8008ddc <_strtod_l+0x48c>
 8009408:	9804      	ldr	r0, [sp, #16]
 800940a:	b1f0      	cbz	r0, 800944a <_strtod_l+0xafa>
 800940c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009410:	d81b      	bhi.n	800944a <_strtod_l+0xafa>
 8009412:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009498 <_strtod_l+0xb48>
 8009416:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800941a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941e:	d811      	bhi.n	8009444 <_strtod_l+0xaf4>
 8009420:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009424:	ee1d 3a10 	vmov	r3, s26
 8009428:	2b01      	cmp	r3, #1
 800942a:	bf38      	it	cc
 800942c:	2301      	movcc	r3, #1
 800942e:	ee0d 3a10 	vmov	s26, r3
 8009432:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009436:	f1ba 0f00 	cmp.w	sl, #0
 800943a:	d113      	bne.n	8009464 <_strtod_l+0xb14>
 800943c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009440:	ec53 2b17 	vmov	r2, r3, d7
 8009444:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009448:	1a43      	subs	r3, r0, r1
 800944a:	eeb0 0b48 	vmov.f64	d0, d8
 800944e:	ec43 2b1c 	vmov	d12, r2, r3
 8009452:	910a      	str	r1, [sp, #40]	; 0x28
 8009454:	f001 febc 	bl	800b1d0 <__ulp>
 8009458:	990a      	ldr	r1, [sp, #40]	; 0x28
 800945a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800945e:	ec59 8b18 	vmov	r8, r9, d8
 8009462:	e7ab      	b.n	80093bc <_strtod_l+0xa6c>
 8009464:	eeb0 7b4d 	vmov.f64	d7, d13
 8009468:	e7ea      	b.n	8009440 <_strtod_l+0xaf0>
 800946a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800946e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009472:	f57f af61 	bpl.w	8009338 <_strtod_l+0x9e8>
 8009476:	e4b1      	b.n	8008ddc <_strtod_l+0x48c>
 8009478:	2300      	movs	r3, #0
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800947e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	f7ff baad 	b.w	80089e0 <_strtod_l+0x90>
 8009486:	2a65      	cmp	r2, #101	; 0x65
 8009488:	f43f ab9f 	beq.w	8008bca <_strtod_l+0x27a>
 800948c:	2a45      	cmp	r2, #69	; 0x45
 800948e:	f43f ab9c 	beq.w	8008bca <_strtod_l+0x27a>
 8009492:	2101      	movs	r1, #1
 8009494:	f7ff bbd4 	b.w	8008c40 <_strtod_l+0x2f0>
 8009498:	ffc00000 	.word	0xffc00000
 800949c:	41dfffff 	.word	0x41dfffff
 80094a0:	000fffff 	.word	0x000fffff
 80094a4:	7ff00000 	.word	0x7ff00000
 80094a8:	7fefffff 	.word	0x7fefffff
 80094ac:	3ff00000 	.word	0x3ff00000
 80094b0:	7c9fffff 	.word	0x7c9fffff
 80094b4:	bff00000 	.word	0xbff00000
 80094b8:	7fe00000 	.word	0x7fe00000

080094bc <_strtod_r>:
 80094bc:	4b01      	ldr	r3, [pc, #4]	; (80094c4 <_strtod_r+0x8>)
 80094be:	f7ff ba47 	b.w	8008950 <_strtod_l>
 80094c2:	bf00      	nop
 80094c4:	200000b8 	.word	0x200000b8

080094c8 <_strtol_l.constprop.0>:
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ce:	d001      	beq.n	80094d4 <_strtol_l.constprop.0+0xc>
 80094d0:	2b24      	cmp	r3, #36	; 0x24
 80094d2:	d906      	bls.n	80094e2 <_strtol_l.constprop.0+0x1a>
 80094d4:	f7fe fb68 	bl	8007ba8 <__errno>
 80094d8:	2316      	movs	r3, #22
 80094da:	6003      	str	r3, [r0, #0]
 80094dc:	2000      	movs	r0, #0
 80094de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095c8 <_strtol_l.constprop.0+0x100>
 80094e6:	460d      	mov	r5, r1
 80094e8:	462e      	mov	r6, r5
 80094ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80094f2:	f017 0708 	ands.w	r7, r7, #8
 80094f6:	d1f7      	bne.n	80094e8 <_strtol_l.constprop.0+0x20>
 80094f8:	2c2d      	cmp	r4, #45	; 0x2d
 80094fa:	d132      	bne.n	8009562 <_strtol_l.constprop.0+0x9a>
 80094fc:	782c      	ldrb	r4, [r5, #0]
 80094fe:	2701      	movs	r7, #1
 8009500:	1cb5      	adds	r5, r6, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d05b      	beq.n	80095be <_strtol_l.constprop.0+0xf6>
 8009506:	2b10      	cmp	r3, #16
 8009508:	d109      	bne.n	800951e <_strtol_l.constprop.0+0x56>
 800950a:	2c30      	cmp	r4, #48	; 0x30
 800950c:	d107      	bne.n	800951e <_strtol_l.constprop.0+0x56>
 800950e:	782c      	ldrb	r4, [r5, #0]
 8009510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009514:	2c58      	cmp	r4, #88	; 0x58
 8009516:	d14d      	bne.n	80095b4 <_strtol_l.constprop.0+0xec>
 8009518:	786c      	ldrb	r4, [r5, #1]
 800951a:	2310      	movs	r3, #16
 800951c:	3502      	adds	r5, #2
 800951e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009522:	f108 38ff 	add.w	r8, r8, #4294967295
 8009526:	f04f 0c00 	mov.w	ip, #0
 800952a:	fbb8 f9f3 	udiv	r9, r8, r3
 800952e:	4666      	mov	r6, ip
 8009530:	fb03 8a19 	mls	sl, r3, r9, r8
 8009534:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009538:	f1be 0f09 	cmp.w	lr, #9
 800953c:	d816      	bhi.n	800956c <_strtol_l.constprop.0+0xa4>
 800953e:	4674      	mov	r4, lr
 8009540:	42a3      	cmp	r3, r4
 8009542:	dd24      	ble.n	800958e <_strtol_l.constprop.0+0xc6>
 8009544:	f1bc 0f00 	cmp.w	ip, #0
 8009548:	db1e      	blt.n	8009588 <_strtol_l.constprop.0+0xc0>
 800954a:	45b1      	cmp	r9, r6
 800954c:	d31c      	bcc.n	8009588 <_strtol_l.constprop.0+0xc0>
 800954e:	d101      	bne.n	8009554 <_strtol_l.constprop.0+0x8c>
 8009550:	45a2      	cmp	sl, r4
 8009552:	db19      	blt.n	8009588 <_strtol_l.constprop.0+0xc0>
 8009554:	fb06 4603 	mla	r6, r6, r3, r4
 8009558:	f04f 0c01 	mov.w	ip, #1
 800955c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009560:	e7e8      	b.n	8009534 <_strtol_l.constprop.0+0x6c>
 8009562:	2c2b      	cmp	r4, #43	; 0x2b
 8009564:	bf04      	itt	eq
 8009566:	782c      	ldrbeq	r4, [r5, #0]
 8009568:	1cb5      	addeq	r5, r6, #2
 800956a:	e7ca      	b.n	8009502 <_strtol_l.constprop.0+0x3a>
 800956c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009570:	f1be 0f19 	cmp.w	lr, #25
 8009574:	d801      	bhi.n	800957a <_strtol_l.constprop.0+0xb2>
 8009576:	3c37      	subs	r4, #55	; 0x37
 8009578:	e7e2      	b.n	8009540 <_strtol_l.constprop.0+0x78>
 800957a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800957e:	f1be 0f19 	cmp.w	lr, #25
 8009582:	d804      	bhi.n	800958e <_strtol_l.constprop.0+0xc6>
 8009584:	3c57      	subs	r4, #87	; 0x57
 8009586:	e7db      	b.n	8009540 <_strtol_l.constprop.0+0x78>
 8009588:	f04f 3cff 	mov.w	ip, #4294967295
 800958c:	e7e6      	b.n	800955c <_strtol_l.constprop.0+0x94>
 800958e:	f1bc 0f00 	cmp.w	ip, #0
 8009592:	da05      	bge.n	80095a0 <_strtol_l.constprop.0+0xd8>
 8009594:	2322      	movs	r3, #34	; 0x22
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	4646      	mov	r6, r8
 800959a:	b942      	cbnz	r2, 80095ae <_strtol_l.constprop.0+0xe6>
 800959c:	4630      	mov	r0, r6
 800959e:	e79e      	b.n	80094de <_strtol_l.constprop.0+0x16>
 80095a0:	b107      	cbz	r7, 80095a4 <_strtol_l.constprop.0+0xdc>
 80095a2:	4276      	negs	r6, r6
 80095a4:	2a00      	cmp	r2, #0
 80095a6:	d0f9      	beq.n	800959c <_strtol_l.constprop.0+0xd4>
 80095a8:	f1bc 0f00 	cmp.w	ip, #0
 80095ac:	d000      	beq.n	80095b0 <_strtol_l.constprop.0+0xe8>
 80095ae:	1e69      	subs	r1, r5, #1
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	e7f3      	b.n	800959c <_strtol_l.constprop.0+0xd4>
 80095b4:	2430      	movs	r4, #48	; 0x30
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1b1      	bne.n	800951e <_strtol_l.constprop.0+0x56>
 80095ba:	2308      	movs	r3, #8
 80095bc:	e7af      	b.n	800951e <_strtol_l.constprop.0+0x56>
 80095be:	2c30      	cmp	r4, #48	; 0x30
 80095c0:	d0a5      	beq.n	800950e <_strtol_l.constprop.0+0x46>
 80095c2:	230a      	movs	r3, #10
 80095c4:	e7ab      	b.n	800951e <_strtol_l.constprop.0+0x56>
 80095c6:	bf00      	nop
 80095c8:	0800c3e9 	.word	0x0800c3e9

080095cc <_strtol_r>:
 80095cc:	f7ff bf7c 	b.w	80094c8 <_strtol_l.constprop.0>

080095d0 <quorem>:
 80095d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	6903      	ldr	r3, [r0, #16]
 80095d6:	690c      	ldr	r4, [r1, #16]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	4607      	mov	r7, r0
 80095dc:	f2c0 8081 	blt.w	80096e2 <quorem+0x112>
 80095e0:	3c01      	subs	r4, #1
 80095e2:	f101 0814 	add.w	r8, r1, #20
 80095e6:	f100 0514 	add.w	r5, r0, #20
 80095ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095f8:	3301      	adds	r3, #1
 80095fa:	429a      	cmp	r2, r3
 80095fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009604:	fbb2 f6f3 	udiv	r6, r2, r3
 8009608:	d331      	bcc.n	800966e <quorem+0x9e>
 800960a:	f04f 0e00 	mov.w	lr, #0
 800960e:	4640      	mov	r0, r8
 8009610:	46ac      	mov	ip, r5
 8009612:	46f2      	mov	sl, lr
 8009614:	f850 2b04 	ldr.w	r2, [r0], #4
 8009618:	b293      	uxth	r3, r2
 800961a:	fb06 e303 	mla	r3, r6, r3, lr
 800961e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009622:	b29b      	uxth	r3, r3
 8009624:	ebaa 0303 	sub.w	r3, sl, r3
 8009628:	f8dc a000 	ldr.w	sl, [ip]
 800962c:	0c12      	lsrs	r2, r2, #16
 800962e:	fa13 f38a 	uxtah	r3, r3, sl
 8009632:	fb06 e202 	mla	r2, r6, r2, lr
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800963e:	b292      	uxth	r2, r2
 8009640:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009648:	f8bd 3000 	ldrh.w	r3, [sp]
 800964c:	4581      	cmp	r9, r0
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	f84c 3b04 	str.w	r3, [ip], #4
 8009656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800965a:	d2db      	bcs.n	8009614 <quorem+0x44>
 800965c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009660:	b92b      	cbnz	r3, 800966e <quorem+0x9e>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	3b04      	subs	r3, #4
 8009666:	429d      	cmp	r5, r3
 8009668:	461a      	mov	r2, r3
 800966a:	d32e      	bcc.n	80096ca <quorem+0xfa>
 800966c:	613c      	str	r4, [r7, #16]
 800966e:	4638      	mov	r0, r7
 8009670:	f001 fd08 	bl	800b084 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	db24      	blt.n	80096c2 <quorem+0xf2>
 8009678:	3601      	adds	r6, #1
 800967a:	4628      	mov	r0, r5
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	f858 2b04 	ldr.w	r2, [r8], #4
 8009684:	f8d0 e000 	ldr.w	lr, [r0]
 8009688:	b293      	uxth	r3, r2
 800968a:	ebac 0303 	sub.w	r3, ip, r3
 800968e:	0c12      	lsrs	r2, r2, #16
 8009690:	fa13 f38e 	uxtah	r3, r3, lr
 8009694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969c:	b29b      	uxth	r3, r3
 800969e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a2:	45c1      	cmp	r9, r8
 80096a4:	f840 3b04 	str.w	r3, [r0], #4
 80096a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096ac:	d2e8      	bcs.n	8009680 <quorem+0xb0>
 80096ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	b922      	cbnz	r2, 80096c2 <quorem+0xf2>
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d30a      	bcc.n	80096d6 <quorem+0x106>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	4630      	mov	r0, r6
 80096c4:	b003      	add	sp, #12
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d1cc      	bne.n	800966c <quorem+0x9c>
 80096d2:	3c01      	subs	r4, #1
 80096d4:	e7c7      	b.n	8009666 <quorem+0x96>
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	3b04      	subs	r3, #4
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1f0      	bne.n	80096c0 <quorem+0xf0>
 80096de:	3c01      	subs	r4, #1
 80096e0:	e7eb      	b.n	80096ba <quorem+0xea>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e7ee      	b.n	80096c4 <quorem+0xf4>
	...

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ed2d 8b02 	vpush	{d8}
 80096f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f2:	b091      	sub	sp, #68	; 0x44
 80096f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096f8:	ec59 8b10 	vmov	r8, r9, d0
 80096fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80096fe:	9106      	str	r1, [sp, #24]
 8009700:	4606      	mov	r6, r0
 8009702:	9208      	str	r2, [sp, #32]
 8009704:	930c      	str	r3, [sp, #48]	; 0x30
 8009706:	b975      	cbnz	r5, 8009726 <_dtoa_r+0x3e>
 8009708:	2010      	movs	r0, #16
 800970a:	f001 f9c7 	bl	800aa9c <malloc>
 800970e:	4602      	mov	r2, r0
 8009710:	6270      	str	r0, [r6, #36]	; 0x24
 8009712:	b920      	cbnz	r0, 800971e <_dtoa_r+0x36>
 8009714:	4baa      	ldr	r3, [pc, #680]	; (80099c0 <_dtoa_r+0x2d8>)
 8009716:	21ea      	movs	r1, #234	; 0xea
 8009718:	48aa      	ldr	r0, [pc, #680]	; (80099c4 <_dtoa_r+0x2dc>)
 800971a:	f002 fba1 	bl	800be60 <__assert_func>
 800971e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009722:	6005      	str	r5, [r0, #0]
 8009724:	60c5      	str	r5, [r0, #12]
 8009726:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009728:	6819      	ldr	r1, [r3, #0]
 800972a:	b151      	cbz	r1, 8009742 <_dtoa_r+0x5a>
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	604a      	str	r2, [r1, #4]
 8009730:	2301      	movs	r3, #1
 8009732:	4093      	lsls	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
 8009736:	4630      	mov	r0, r6
 8009738:	f001 fa18 	bl	800ab6c <_Bfree>
 800973c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	f1b9 0300 	subs.w	r3, r9, #0
 8009746:	bfbb      	ittet	lt
 8009748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800974c:	9303      	strlt	r3, [sp, #12]
 800974e:	2300      	movge	r3, #0
 8009750:	2201      	movlt	r2, #1
 8009752:	bfac      	ite	ge
 8009754:	6023      	strge	r3, [r4, #0]
 8009756:	6022      	strlt	r2, [r4, #0]
 8009758:	4b9b      	ldr	r3, [pc, #620]	; (80099c8 <_dtoa_r+0x2e0>)
 800975a:	9c03      	ldr	r4, [sp, #12]
 800975c:	43a3      	bics	r3, r4
 800975e:	d11c      	bne.n	800979a <_dtoa_r+0xb2>
 8009760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009762:	f242 730f 	movw	r3, #9999	; 0x270f
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800976c:	ea53 0308 	orrs.w	r3, r3, r8
 8009770:	f000 84fd 	beq.w	800a16e <_dtoa_r+0xa86>
 8009774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009776:	b963      	cbnz	r3, 8009792 <_dtoa_r+0xaa>
 8009778:	4b94      	ldr	r3, [pc, #592]	; (80099cc <_dtoa_r+0x2e4>)
 800977a:	e01f      	b.n	80097bc <_dtoa_r+0xd4>
 800977c:	4b94      	ldr	r3, [pc, #592]	; (80099d0 <_dtoa_r+0x2e8>)
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	3308      	adds	r3, #8
 8009782:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	9801      	ldr	r0, [sp, #4]
 8009788:	b011      	add	sp, #68	; 0x44
 800978a:	ecbd 8b02 	vpop	{d8}
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	4b8e      	ldr	r3, [pc, #568]	; (80099cc <_dtoa_r+0x2e4>)
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	3303      	adds	r3, #3
 8009798:	e7f3      	b.n	8009782 <_dtoa_r+0x9a>
 800979a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800979e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	d10b      	bne.n	80097c0 <_dtoa_r+0xd8>
 80097a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097aa:	2301      	movs	r3, #1
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 84d9 	beq.w	800a168 <_dtoa_r+0xa80>
 80097b6:	4887      	ldr	r0, [pc, #540]	; (80099d4 <_dtoa_r+0x2ec>)
 80097b8:	6018      	str	r0, [r3, #0]
 80097ba:	1e43      	subs	r3, r0, #1
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	e7e2      	b.n	8009786 <_dtoa_r+0x9e>
 80097c0:	a90f      	add	r1, sp, #60	; 0x3c
 80097c2:	aa0e      	add	r2, sp, #56	; 0x38
 80097c4:	4630      	mov	r0, r6
 80097c6:	eeb0 0b48 	vmov.f64	d0, d8
 80097ca:	f001 fd7d 	bl	800b2c8 <__d2b>
 80097ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80097d2:	4605      	mov	r5, r0
 80097d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80097d6:	2900      	cmp	r1, #0
 80097d8:	d046      	beq.n	8009868 <_dtoa_r+0x180>
 80097da:	ee18 4a90 	vmov	r4, s17
 80097de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097e2:	ec53 2b18 	vmov	r2, r3, d8
 80097e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80097ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80097f2:	2400      	movs	r4, #0
 80097f4:	ec43 2b16 	vmov	d6, r2, r3
 80097f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80097fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80099a8 <_dtoa_r+0x2c0>
 8009800:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009804:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80099b0 <_dtoa_r+0x2c8>
 8009808:	eea7 6b05 	vfma.f64	d6, d7, d5
 800980c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80099b8 <_dtoa_r+0x2d0>
 8009810:	ee07 1a90 	vmov	s15, r1
 8009814:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009818:	eeb0 7b46 	vmov.f64	d7, d6
 800981c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009820:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009824:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982c:	ee16 ba90 	vmov	fp, s13
 8009830:	940a      	str	r4, [sp, #40]	; 0x28
 8009832:	d508      	bpl.n	8009846 <_dtoa_r+0x15e>
 8009834:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009838:	eeb4 6b47 	vcmp.f64	d6, d7
 800983c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009840:	bf18      	it	ne
 8009842:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009846:	f1bb 0f16 	cmp.w	fp, #22
 800984a:	d82f      	bhi.n	80098ac <_dtoa_r+0x1c4>
 800984c:	4b62      	ldr	r3, [pc, #392]	; (80099d8 <_dtoa_r+0x2f0>)
 800984e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009852:	ed93 7b00 	vldr	d7, [r3]
 8009856:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	d501      	bpl.n	8009864 <_dtoa_r+0x17c>
 8009860:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009864:	2300      	movs	r3, #0
 8009866:	e022      	b.n	80098ae <_dtoa_r+0x1c6>
 8009868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800986a:	4401      	add	r1, r0
 800986c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009870:	2b20      	cmp	r3, #32
 8009872:	bfc1      	itttt	gt
 8009874:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009878:	fa04 f303 	lslgt.w	r3, r4, r3
 800987c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009880:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009884:	bfd6      	itet	le
 8009886:	f1c3 0320 	rsble	r3, r3, #32
 800988a:	ea43 0808 	orrgt.w	r8, r3, r8
 800988e:	fa08 f803 	lslle.w	r8, r8, r3
 8009892:	ee07 8a90 	vmov	s15, r8
 8009896:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800989a:	3901      	subs	r1, #1
 800989c:	ee17 4a90 	vmov	r4, s15
 80098a0:	ec53 2b17 	vmov	r2, r3, d7
 80098a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80098a8:	2401      	movs	r4, #1
 80098aa:	e7a3      	b.n	80097f4 <_dtoa_r+0x10c>
 80098ac:	2301      	movs	r3, #1
 80098ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80098b0:	1a43      	subs	r3, r0, r1
 80098b2:	1e5a      	subs	r2, r3, #1
 80098b4:	bf45      	ittet	mi
 80098b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80098ba:	9304      	strmi	r3, [sp, #16]
 80098bc:	2300      	movpl	r3, #0
 80098be:	2300      	movmi	r3, #0
 80098c0:	9205      	str	r2, [sp, #20]
 80098c2:	bf54      	ite	pl
 80098c4:	9304      	strpl	r3, [sp, #16]
 80098c6:	9305      	strmi	r3, [sp, #20]
 80098c8:	f1bb 0f00 	cmp.w	fp, #0
 80098cc:	db18      	blt.n	8009900 <_dtoa_r+0x218>
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80098d4:	445b      	add	r3, fp
 80098d6:	9305      	str	r3, [sp, #20]
 80098d8:	2300      	movs	r3, #0
 80098da:	9a06      	ldr	r2, [sp, #24]
 80098dc:	2a09      	cmp	r2, #9
 80098de:	d849      	bhi.n	8009974 <_dtoa_r+0x28c>
 80098e0:	2a05      	cmp	r2, #5
 80098e2:	bfc4      	itt	gt
 80098e4:	3a04      	subgt	r2, #4
 80098e6:	9206      	strgt	r2, [sp, #24]
 80098e8:	9a06      	ldr	r2, [sp, #24]
 80098ea:	f1a2 0202 	sub.w	r2, r2, #2
 80098ee:	bfcc      	ite	gt
 80098f0:	2400      	movgt	r4, #0
 80098f2:	2401      	movle	r4, #1
 80098f4:	2a03      	cmp	r2, #3
 80098f6:	d848      	bhi.n	800998a <_dtoa_r+0x2a2>
 80098f8:	e8df f002 	tbb	[pc, r2]
 80098fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009900:	9b04      	ldr	r3, [sp, #16]
 8009902:	2200      	movs	r2, #0
 8009904:	eba3 030b 	sub.w	r3, r3, fp
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	9209      	str	r2, [sp, #36]	; 0x24
 800990c:	f1cb 0300 	rsb	r3, fp, #0
 8009910:	e7e3      	b.n	80098da <_dtoa_r+0x1f2>
 8009912:	2200      	movs	r2, #0
 8009914:	9207      	str	r2, [sp, #28]
 8009916:	9a08      	ldr	r2, [sp, #32]
 8009918:	2a00      	cmp	r2, #0
 800991a:	dc39      	bgt.n	8009990 <_dtoa_r+0x2a8>
 800991c:	f04f 0a01 	mov.w	sl, #1
 8009920:	46d1      	mov	r9, sl
 8009922:	4652      	mov	r2, sl
 8009924:	f8cd a020 	str.w	sl, [sp, #32]
 8009928:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800992a:	2100      	movs	r1, #0
 800992c:	6079      	str	r1, [r7, #4]
 800992e:	2004      	movs	r0, #4
 8009930:	f100 0c14 	add.w	ip, r0, #20
 8009934:	4594      	cmp	ip, r2
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	d92f      	bls.n	800999a <_dtoa_r+0x2b2>
 800993a:	4630      	mov	r0, r6
 800993c:	930d      	str	r3, [sp, #52]	; 0x34
 800993e:	f001 f8d5 	bl	800aaec <_Balloc>
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	9001      	str	r0, [sp, #4]
 8009946:	4602      	mov	r2, r0
 8009948:	2800      	cmp	r0, #0
 800994a:	d149      	bne.n	80099e0 <_dtoa_r+0x2f8>
 800994c:	4b23      	ldr	r3, [pc, #140]	; (80099dc <_dtoa_r+0x2f4>)
 800994e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009952:	e6e1      	b.n	8009718 <_dtoa_r+0x30>
 8009954:	2201      	movs	r2, #1
 8009956:	e7dd      	b.n	8009914 <_dtoa_r+0x22c>
 8009958:	2200      	movs	r2, #0
 800995a:	9207      	str	r2, [sp, #28]
 800995c:	9a08      	ldr	r2, [sp, #32]
 800995e:	eb0b 0a02 	add.w	sl, fp, r2
 8009962:	f10a 0901 	add.w	r9, sl, #1
 8009966:	464a      	mov	r2, r9
 8009968:	2a01      	cmp	r2, #1
 800996a:	bfb8      	it	lt
 800996c:	2201      	movlt	r2, #1
 800996e:	e7db      	b.n	8009928 <_dtoa_r+0x240>
 8009970:	2201      	movs	r2, #1
 8009972:	e7f2      	b.n	800995a <_dtoa_r+0x272>
 8009974:	2401      	movs	r4, #1
 8009976:	2200      	movs	r2, #0
 8009978:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800997c:	f04f 3aff 	mov.w	sl, #4294967295
 8009980:	2100      	movs	r1, #0
 8009982:	46d1      	mov	r9, sl
 8009984:	2212      	movs	r2, #18
 8009986:	9108      	str	r1, [sp, #32]
 8009988:	e7ce      	b.n	8009928 <_dtoa_r+0x240>
 800998a:	2201      	movs	r2, #1
 800998c:	9207      	str	r2, [sp, #28]
 800998e:	e7f5      	b.n	800997c <_dtoa_r+0x294>
 8009990:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009994:	46d1      	mov	r9, sl
 8009996:	4652      	mov	r2, sl
 8009998:	e7c6      	b.n	8009928 <_dtoa_r+0x240>
 800999a:	3101      	adds	r1, #1
 800999c:	6079      	str	r1, [r7, #4]
 800999e:	0040      	lsls	r0, r0, #1
 80099a0:	e7c6      	b.n	8009930 <_dtoa_r+0x248>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	0800c4f6 	.word	0x0800c4f6
 80099c4:	0800c50d 	.word	0x0800c50d
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	0800c4f2 	.word	0x0800c4f2
 80099d0:	0800c4e9 	.word	0x0800c4e9
 80099d4:	0800c36d 	.word	0x0800c36d
 80099d8:	0800c6e0 	.word	0x0800c6e0
 80099dc:	0800c568 	.word	0x0800c568
 80099e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	f1b9 0f0e 	cmp.w	r9, #14
 80099ea:	d86c      	bhi.n	8009ac6 <_dtoa_r+0x3de>
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	d06a      	beq.n	8009ac6 <_dtoa_r+0x3de>
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	f340 80a0 	ble.w	8009b38 <_dtoa_r+0x450>
 80099f8:	49c1      	ldr	r1, [pc, #772]	; (8009d00 <_dtoa_r+0x618>)
 80099fa:	f00b 020f 	and.w	r2, fp, #15
 80099fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009a02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a06:	ed92 7b00 	vldr	d7, [r2]
 8009a0a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009a0e:	f000 8087 	beq.w	8009b20 <_dtoa_r+0x438>
 8009a12:	4abc      	ldr	r2, [pc, #752]	; (8009d04 <_dtoa_r+0x61c>)
 8009a14:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a20:	f001 010f 	and.w	r1, r1, #15
 8009a24:	2203      	movs	r2, #3
 8009a26:	48b7      	ldr	r0, [pc, #732]	; (8009d04 <_dtoa_r+0x61c>)
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	d17b      	bne.n	8009b24 <_dtoa_r+0x43c>
 8009a2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	f000 80a2 	beq.w	8009b84 <_dtoa_r+0x49c>
 8009a40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a50:	f140 8098 	bpl.w	8009b84 <_dtoa_r+0x49c>
 8009a54:	f1b9 0f00 	cmp.w	r9, #0
 8009a58:	f000 8094 	beq.w	8009b84 <_dtoa_r+0x49c>
 8009a5c:	f1ba 0f00 	cmp.w	sl, #0
 8009a60:	dd2f      	ble.n	8009ac2 <_dtoa_r+0x3da>
 8009a62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009a66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a6e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009a72:	3201      	adds	r2, #1
 8009a74:	4650      	mov	r0, sl
 8009a76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009a7e:	ee07 2a90 	vmov	s15, r2
 8009a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a8a:	ee15 4a90 	vmov	r4, s11
 8009a8e:	ec52 1b15 	vmov	r1, r2, d5
 8009a92:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d177      	bne.n	8009b8a <_dtoa_r+0x4a2>
 8009a9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009a9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009aa2:	ec42 1b17 	vmov	d7, r1, r2
 8009aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aae:	f300 8263 	bgt.w	8009f78 <_dtoa_r+0x890>
 8009ab2:	eeb1 7b47 	vneg.f64	d7, d7
 8009ab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abe:	f100 8258 	bmi.w	8009f72 <_dtoa_r+0x88a>
 8009ac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	f2c0 811d 	blt.w	8009d08 <_dtoa_r+0x620>
 8009ace:	f1bb 0f0e 	cmp.w	fp, #14
 8009ad2:	f300 8119 	bgt.w	8009d08 <_dtoa_r+0x620>
 8009ad6:	4b8a      	ldr	r3, [pc, #552]	; (8009d00 <_dtoa_r+0x618>)
 8009ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009adc:	ed93 6b00 	vldr	d6, [r3]
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f280 80b7 	bge.w	8009c56 <_dtoa_r+0x56e>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	f300 80b3 	bgt.w	8009c56 <_dtoa_r+0x56e>
 8009af0:	f040 823f 	bne.w	8009f72 <_dtoa_r+0x88a>
 8009af4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	464c      	mov	r4, r9
 8009b0a:	464f      	mov	r7, r9
 8009b0c:	f280 8215 	bge.w	8009f3a <_dtoa_r+0x852>
 8009b10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b14:	2331      	movs	r3, #49	; 0x31
 8009b16:	f808 3b01 	strb.w	r3, [r8], #1
 8009b1a:	f10b 0b01 	add.w	fp, fp, #1
 8009b1e:	e211      	b.n	8009f44 <_dtoa_r+0x85c>
 8009b20:	2202      	movs	r2, #2
 8009b22:	e780      	b.n	8009a26 <_dtoa_r+0x33e>
 8009b24:	07cc      	lsls	r4, r1, #31
 8009b26:	d504      	bpl.n	8009b32 <_dtoa_r+0x44a>
 8009b28:	ed90 6b00 	vldr	d6, [r0]
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b32:	1049      	asrs	r1, r1, #1
 8009b34:	3008      	adds	r0, #8
 8009b36:	e777      	b.n	8009a28 <_dtoa_r+0x340>
 8009b38:	d022      	beq.n	8009b80 <_dtoa_r+0x498>
 8009b3a:	f1cb 0100 	rsb	r1, fp, #0
 8009b3e:	4a70      	ldr	r2, [pc, #448]	; (8009d00 <_dtoa_r+0x618>)
 8009b40:	f001 000f 	and.w	r0, r1, #15
 8009b44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b48:	ed92 7b00 	vldr	d7, [r2]
 8009b4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b54:	486b      	ldr	r0, [pc, #428]	; (8009d04 <_dtoa_r+0x61c>)
 8009b56:	1109      	asrs	r1, r1, #4
 8009b58:	2400      	movs	r4, #0
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	b929      	cbnz	r1, 8009b6a <_dtoa_r+0x482>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	f43f af6a 	beq.w	8009a38 <_dtoa_r+0x350>
 8009b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b68:	e766      	b.n	8009a38 <_dtoa_r+0x350>
 8009b6a:	07cf      	lsls	r7, r1, #31
 8009b6c:	d505      	bpl.n	8009b7a <_dtoa_r+0x492>
 8009b6e:	ed90 6b00 	vldr	d6, [r0]
 8009b72:	3201      	adds	r2, #1
 8009b74:	2401      	movs	r4, #1
 8009b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b7a:	1049      	asrs	r1, r1, #1
 8009b7c:	3008      	adds	r0, #8
 8009b7e:	e7ed      	b.n	8009b5c <_dtoa_r+0x474>
 8009b80:	2202      	movs	r2, #2
 8009b82:	e759      	b.n	8009a38 <_dtoa_r+0x350>
 8009b84:	465f      	mov	r7, fp
 8009b86:	4648      	mov	r0, r9
 8009b88:	e775      	b.n	8009a76 <_dtoa_r+0x38e>
 8009b8a:	ec42 1b17 	vmov	d7, r1, r2
 8009b8e:	4a5c      	ldr	r2, [pc, #368]	; (8009d00 <_dtoa_r+0x618>)
 8009b90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009b98:	9a01      	ldr	r2, [sp, #4]
 8009b9a:	1814      	adds	r4, r2, r0
 8009b9c:	9a07      	ldr	r2, [sp, #28]
 8009b9e:	b352      	cbz	r2, 8009bf6 <_dtoa_r+0x50e>
 8009ba0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009ba4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009ba8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009bb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009bb4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009bb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bbc:	ee14 2a90 	vmov	r2, s9
 8009bc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bc4:	3230      	adds	r2, #48	; 0x30
 8009bc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	f808 2b01 	strb.w	r2, [r8], #1
 8009bd6:	d439      	bmi.n	8009c4c <_dtoa_r+0x564>
 8009bd8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009bdc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	d472      	bmi.n	8009ccc <_dtoa_r+0x5e4>
 8009be6:	45a0      	cmp	r8, r4
 8009be8:	f43f af6b 	beq.w	8009ac2 <_dtoa_r+0x3da>
 8009bec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bf0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009bf4:	e7e0      	b.n	8009bb8 <_dtoa_r+0x4d0>
 8009bf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bfa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bfe:	4621      	mov	r1, r4
 8009c00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c08:	ee14 2a90 	vmov	r2, s9
 8009c0c:	3230      	adds	r2, #48	; 0x30
 8009c0e:	f808 2b01 	strb.w	r2, [r8], #1
 8009c12:	45a0      	cmp	r8, r4
 8009c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c1c:	d118      	bne.n	8009c50 <_dtoa_r+0x568>
 8009c1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	dc4d      	bgt.n	8009ccc <_dtoa_r+0x5e4>
 8009c30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	f57f af41 	bpl.w	8009ac2 <_dtoa_r+0x3da>
 8009c40:	4688      	mov	r8, r1
 8009c42:	3901      	subs	r1, #1
 8009c44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009c48:	2b30      	cmp	r3, #48	; 0x30
 8009c4a:	d0f9      	beq.n	8009c40 <_dtoa_r+0x558>
 8009c4c:	46bb      	mov	fp, r7
 8009c4e:	e02a      	b.n	8009ca6 <_dtoa_r+0x5be>
 8009c50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c54:	e7d6      	b.n	8009c04 <_dtoa_r+0x51c>
 8009c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009c5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c6a:	ee15 3a10 	vmov	r3, s10
 8009c6e:	3330      	adds	r3, #48	; 0x30
 8009c70:	f808 3b01 	strb.w	r3, [r8], #1
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	eba8 0303 	sub.w	r3, r8, r3
 8009c7a:	4599      	cmp	r9, r3
 8009c7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009c80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009c84:	d133      	bne.n	8009cee <_dtoa_r+0x606>
 8009c86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009c8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c92:	dc1a      	bgt.n	8009cca <_dtoa_r+0x5e2>
 8009c94:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9c:	d103      	bne.n	8009ca6 <_dtoa_r+0x5be>
 8009c9e:	ee15 3a10 	vmov	r3, s10
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	d411      	bmi.n	8009cca <_dtoa_r+0x5e2>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 ff5f 	bl	800ab6c <_Bfree>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb2:	f888 3000 	strb.w	r3, [r8]
 8009cb6:	f10b 0301 	add.w	r3, fp, #1
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f43f ad61 	beq.w	8009786 <_dtoa_r+0x9e>
 8009cc4:	f8c3 8000 	str.w	r8, [r3]
 8009cc8:	e55d      	b.n	8009786 <_dtoa_r+0x9e>
 8009cca:	465f      	mov	r7, fp
 8009ccc:	4643      	mov	r3, r8
 8009cce:	4698      	mov	r8, r3
 8009cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cd4:	2a39      	cmp	r2, #57	; 0x39
 8009cd6:	d106      	bne.n	8009ce6 <_dtoa_r+0x5fe>
 8009cd8:	9a01      	ldr	r2, [sp, #4]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d1f7      	bne.n	8009cce <_dtoa_r+0x5e6>
 8009cde:	9901      	ldr	r1, [sp, #4]
 8009ce0:	2230      	movs	r2, #48	; 0x30
 8009ce2:	3701      	adds	r7, #1
 8009ce4:	700a      	strb	r2, [r1, #0]
 8009ce6:	781a      	ldrb	r2, [r3, #0]
 8009ce8:	3201      	adds	r2, #1
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	e7ae      	b.n	8009c4c <_dtoa_r+0x564>
 8009cee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfa:	d1b2      	bne.n	8009c62 <_dtoa_r+0x57a>
 8009cfc:	e7d3      	b.n	8009ca6 <_dtoa_r+0x5be>
 8009cfe:	bf00      	nop
 8009d00:	0800c6e0 	.word	0x0800c6e0
 8009d04:	0800c6b8 	.word	0x0800c6b8
 8009d08:	9907      	ldr	r1, [sp, #28]
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	f000 80d0 	beq.w	8009eb0 <_dtoa_r+0x7c8>
 8009d10:	9906      	ldr	r1, [sp, #24]
 8009d12:	2901      	cmp	r1, #1
 8009d14:	f300 80b4 	bgt.w	8009e80 <_dtoa_r+0x798>
 8009d18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	f000 80ac 	beq.w	8009e78 <_dtoa_r+0x790>
 8009d20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d28:	461c      	mov	r4, r3
 8009d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4413      	add	r3, r2
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	2101      	movs	r1, #1
 8009d36:	4413      	add	r3, r2
 8009d38:	4630      	mov	r0, r6
 8009d3a:	9305      	str	r3, [sp, #20]
 8009d3c:	f001 f818 	bl	800ad70 <__i2b>
 8009d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d42:	4607      	mov	r7, r0
 8009d44:	f1b8 0f00 	cmp.w	r8, #0
 8009d48:	dd0d      	ble.n	8009d66 <_dtoa_r+0x67e>
 8009d4a:	9a05      	ldr	r2, [sp, #20]
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	dd0a      	ble.n	8009d66 <_dtoa_r+0x67e>
 8009d50:	4542      	cmp	r2, r8
 8009d52:	9904      	ldr	r1, [sp, #16]
 8009d54:	bfa8      	it	ge
 8009d56:	4642      	movge	r2, r8
 8009d58:	1a89      	subs	r1, r1, r2
 8009d5a:	9104      	str	r1, [sp, #16]
 8009d5c:	9905      	ldr	r1, [sp, #20]
 8009d5e:	eba8 0802 	sub.w	r8, r8, r2
 8009d62:	1a8a      	subs	r2, r1, r2
 8009d64:	9205      	str	r2, [sp, #20]
 8009d66:	b303      	cbz	r3, 8009daa <_dtoa_r+0x6c2>
 8009d68:	9a07      	ldr	r2, [sp, #28]
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	f000 80a5 	beq.w	8009eba <_dtoa_r+0x7d2>
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	dd13      	ble.n	8009d9c <_dtoa_r+0x6b4>
 8009d74:	4639      	mov	r1, r7
 8009d76:	4622      	mov	r2, r4
 8009d78:	4630      	mov	r0, r6
 8009d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d7c:	f001 f8b8 	bl	800aef0 <__pow5mult>
 8009d80:	462a      	mov	r2, r5
 8009d82:	4601      	mov	r1, r0
 8009d84:	4607      	mov	r7, r0
 8009d86:	4630      	mov	r0, r6
 8009d88:	f001 f808 	bl	800ad9c <__multiply>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	900a      	str	r0, [sp, #40]	; 0x28
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 feeb 	bl	800ab6c <_Bfree>
 8009d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9a:	4615      	mov	r5, r2
 8009d9c:	1b1a      	subs	r2, r3, r4
 8009d9e:	d004      	beq.n	8009daa <_dtoa_r+0x6c2>
 8009da0:	4629      	mov	r1, r5
 8009da2:	4630      	mov	r0, r6
 8009da4:	f001 f8a4 	bl	800aef0 <__pow5mult>
 8009da8:	4605      	mov	r5, r0
 8009daa:	2101      	movs	r1, #1
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 ffdf 	bl	800ad70 <__i2b>
 8009db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	f340 8081 	ble.w	8009ebe <_dtoa_r+0x7d6>
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f001 f895 	bl	800aef0 <__pow5mult>
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	4604      	mov	r4, r0
 8009dcc:	dd7a      	ble.n	8009ec4 <_dtoa_r+0x7dc>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd2:	6922      	ldr	r2, [r4, #16]
 8009dd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009dd8:	6910      	ldr	r0, [r2, #16]
 8009dda:	f000 ff79 	bl	800acd0 <__hi0bits>
 8009dde:	f1c0 0020 	rsb	r0, r0, #32
 8009de2:	9b05      	ldr	r3, [sp, #20]
 8009de4:	4418      	add	r0, r3
 8009de6:	f010 001f 	ands.w	r0, r0, #31
 8009dea:	f000 808c 	beq.w	8009f06 <_dtoa_r+0x81e>
 8009dee:	f1c0 0220 	rsb	r2, r0, #32
 8009df2:	2a04      	cmp	r2, #4
 8009df4:	f340 8085 	ble.w	8009f02 <_dtoa_r+0x81a>
 8009df8:	f1c0 001c 	rsb	r0, r0, #28
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	4403      	add	r3, r0
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	9b05      	ldr	r3, [sp, #20]
 8009e04:	4403      	add	r3, r0
 8009e06:	4480      	add	r8, r0
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	9b04      	ldr	r3, [sp, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd05      	ble.n	8009e1c <_dtoa_r+0x734>
 8009e10:	4629      	mov	r1, r5
 8009e12:	461a      	mov	r2, r3
 8009e14:	4630      	mov	r0, r6
 8009e16:	f001 f8c5 	bl	800afa4 <__lshift>
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b05      	ldr	r3, [sp, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd05      	ble.n	8009e2e <_dtoa_r+0x746>
 8009e22:	4621      	mov	r1, r4
 8009e24:	461a      	mov	r2, r3
 8009e26:	4630      	mov	r0, r6
 8009e28:	f001 f8bc 	bl	800afa4 <__lshift>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d06a      	beq.n	8009f0a <_dtoa_r+0x822>
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f001 f924 	bl	800b084 <__mcmp>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	da64      	bge.n	8009f0a <_dtoa_r+0x822>
 8009e40:	2300      	movs	r3, #0
 8009e42:	4629      	mov	r1, r5
 8009e44:	220a      	movs	r2, #10
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 feb2 	bl	800abb0 <__multadd>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e52:	4605      	mov	r5, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8191 	beq.w	800a17c <_dtoa_r+0xa94>
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	220a      	movs	r2, #10
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 fea5 	bl	800abb0 <__multadd>
 8009e66:	f1ba 0f00 	cmp.w	sl, #0
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	f300 808d 	bgt.w	8009f8a <_dtoa_r+0x8a2>
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	dc50      	bgt.n	8009f18 <_dtoa_r+0x830>
 8009e76:	e088      	b.n	8009f8a <_dtoa_r+0x8a2>
 8009e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e7e:	e751      	b.n	8009d24 <_dtoa_r+0x63c>
 8009e80:	f109 34ff 	add.w	r4, r9, #4294967295
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	bfbf      	itttt	lt
 8009e88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009e8a:	1ae3      	sublt	r3, r4, r3
 8009e8c:	18d2      	addlt	r2, r2, r3
 8009e8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009e90:	bfb6      	itet	lt
 8009e92:	4623      	movlt	r3, r4
 8009e94:	1b1c      	subge	r4, r3, r4
 8009e96:	2400      	movlt	r4, #0
 8009e98:	f1b9 0f00 	cmp.w	r9, #0
 8009e9c:	bfb5      	itete	lt
 8009e9e:	9a04      	ldrlt	r2, [sp, #16]
 8009ea0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009ea4:	eba2 0809 	sublt.w	r8, r2, r9
 8009ea8:	464a      	movge	r2, r9
 8009eaa:	bfb8      	it	lt
 8009eac:	2200      	movlt	r2, #0
 8009eae:	e73c      	b.n	8009d2a <_dtoa_r+0x642>
 8009eb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009eb4:	9f07      	ldr	r7, [sp, #28]
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	e744      	b.n	8009d44 <_dtoa_r+0x65c>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	e770      	b.n	8009da0 <_dtoa_r+0x6b8>
 8009ebe:	9b06      	ldr	r3, [sp, #24]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	dc18      	bgt.n	8009ef6 <_dtoa_r+0x80e>
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	b9b3      	cbnz	r3, 8009ef6 <_dtoa_r+0x80e>
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009ece:	b9a2      	cbnz	r2, 8009efa <_dtoa_r+0x812>
 8009ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ed4:	0d12      	lsrs	r2, r2, #20
 8009ed6:	0512      	lsls	r2, r2, #20
 8009ed8:	b18a      	cbz	r2, 8009efe <_dtoa_r+0x816>
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	3301      	adds	r3, #1
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	9b05      	ldr	r3, [sp, #20]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8009eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f af70 	bne.w	8009dd2 <_dtoa_r+0x6ea>
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	e775      	b.n	8009de2 <_dtoa_r+0x6fa>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e7f6      	b.n	8009ee8 <_dtoa_r+0x800>
 8009efa:	9b02      	ldr	r3, [sp, #8]
 8009efc:	e7f4      	b.n	8009ee8 <_dtoa_r+0x800>
 8009efe:	920a      	str	r2, [sp, #40]	; 0x28
 8009f00:	e7f3      	b.n	8009eea <_dtoa_r+0x802>
 8009f02:	d082      	beq.n	8009e0a <_dtoa_r+0x722>
 8009f04:	4610      	mov	r0, r2
 8009f06:	301c      	adds	r0, #28
 8009f08:	e778      	b.n	8009dfc <_dtoa_r+0x714>
 8009f0a:	f1b9 0f00 	cmp.w	r9, #0
 8009f0e:	dc37      	bgt.n	8009f80 <_dtoa_r+0x898>
 8009f10:	9b06      	ldr	r3, [sp, #24]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	dd34      	ble.n	8009f80 <_dtoa_r+0x898>
 8009f16:	46ca      	mov	sl, r9
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	d10d      	bne.n	8009f3a <_dtoa_r+0x852>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4653      	mov	r3, sl
 8009f22:	2205      	movs	r2, #5
 8009f24:	4630      	mov	r0, r6
 8009f26:	f000 fe43 	bl	800abb0 <__multadd>
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f001 f8a8 	bl	800b084 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f73f adeb 	bgt.w	8009b10 <_dtoa_r+0x428>
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f40:	ea6f 0b03 	mvn.w	fp, r3
 8009f44:	f04f 0900 	mov.w	r9, #0
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f000 fe0e 	bl	800ab6c <_Bfree>
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	f43f aea8 	beq.w	8009ca6 <_dtoa_r+0x5be>
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	d005      	beq.n	8009f68 <_dtoa_r+0x880>
 8009f5c:	45b9      	cmp	r9, r7
 8009f5e:	d003      	beq.n	8009f68 <_dtoa_r+0x880>
 8009f60:	4649      	mov	r1, r9
 8009f62:	4630      	mov	r0, r6
 8009f64:	f000 fe02 	bl	800ab6c <_Bfree>
 8009f68:	4639      	mov	r1, r7
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 fdfe 	bl	800ab6c <_Bfree>
 8009f70:	e699      	b.n	8009ca6 <_dtoa_r+0x5be>
 8009f72:	2400      	movs	r4, #0
 8009f74:	4627      	mov	r7, r4
 8009f76:	e7e0      	b.n	8009f3a <_dtoa_r+0x852>
 8009f78:	46bb      	mov	fp, r7
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	e5c7      	b.n	8009b10 <_dtoa_r+0x428>
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	46ca      	mov	sl, r9
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8100 	beq.w	800a18a <_dtoa_r+0xaa2>
 8009f8a:	f1b8 0f00 	cmp.w	r8, #0
 8009f8e:	dd05      	ble.n	8009f9c <_dtoa_r+0x8b4>
 8009f90:	4639      	mov	r1, r7
 8009f92:	4642      	mov	r2, r8
 8009f94:	4630      	mov	r0, r6
 8009f96:	f001 f805 	bl	800afa4 <__lshift>
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d05d      	beq.n	800a05e <_dtoa_r+0x976>
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f000 fda1 	bl	800aaec <_Balloc>
 8009faa:	4680      	mov	r8, r0
 8009fac:	b928      	cbnz	r0, 8009fba <_dtoa_r+0x8d2>
 8009fae:	4b82      	ldr	r3, [pc, #520]	; (800a1b8 <_dtoa_r+0xad0>)
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009fb6:	f7ff bbaf 	b.w	8009718 <_dtoa_r+0x30>
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	3202      	adds	r2, #2
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	f107 010c 	add.w	r1, r7, #12
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f000 fd83 	bl	800aad0 <memcpy>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4641      	mov	r1, r8
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f000 ffe8 	bl	800afa4 <__lshift>
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9b01      	ldr	r3, [sp, #4]
 8009fdc:	4453      	add	r3, sl
 8009fde:	9308      	str	r3, [sp, #32]
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	46b9      	mov	r9, r7
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	4607      	mov	r7, r0
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	9302      	str	r3, [sp, #8]
 8009ff6:	f7ff faeb 	bl	80095d0 <quorem>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	3330      	adds	r3, #48	; 0x30
 8009ffe:	9005      	str	r0, [sp, #20]
 800a000:	4649      	mov	r1, r9
 800a002:	4628      	mov	r0, r5
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	f001 f83d 	bl	800b084 <__mcmp>
 800a00a:	463a      	mov	r2, r7
 800a00c:	4682      	mov	sl, r0
 800a00e:	4621      	mov	r1, r4
 800a010:	4630      	mov	r0, r6
 800a012:	f001 f853 	bl	800b0bc <__mdiff>
 800a016:	68c2      	ldr	r2, [r0, #12]
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	4680      	mov	r8, r0
 800a01c:	bb0a      	cbnz	r2, 800a062 <_dtoa_r+0x97a>
 800a01e:	4601      	mov	r1, r0
 800a020:	4628      	mov	r0, r5
 800a022:	f001 f82f 	bl	800b084 <__mcmp>
 800a026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a028:	4602      	mov	r2, r0
 800a02a:	4641      	mov	r1, r8
 800a02c:	4630      	mov	r0, r6
 800a02e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a032:	f000 fd9b 	bl	800ab6c <_Bfree>
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a03a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a03e:	ea43 0102 	orr.w	r1, r3, r2
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	430b      	orrs	r3, r1
 800a046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a048:	d10d      	bne.n	800a066 <_dtoa_r+0x97e>
 800a04a:	2b39      	cmp	r3, #57	; 0x39
 800a04c:	d029      	beq.n	800a0a2 <_dtoa_r+0x9ba>
 800a04e:	f1ba 0f00 	cmp.w	sl, #0
 800a052:	dd01      	ble.n	800a058 <_dtoa_r+0x970>
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	3331      	adds	r3, #49	; 0x31
 800a058:	9a02      	ldr	r2, [sp, #8]
 800a05a:	7013      	strb	r3, [r2, #0]
 800a05c:	e774      	b.n	8009f48 <_dtoa_r+0x860>
 800a05e:	4638      	mov	r0, r7
 800a060:	e7b8      	b.n	8009fd4 <_dtoa_r+0x8ec>
 800a062:	2201      	movs	r2, #1
 800a064:	e7e1      	b.n	800a02a <_dtoa_r+0x942>
 800a066:	f1ba 0f00 	cmp.w	sl, #0
 800a06a:	db06      	blt.n	800a07a <_dtoa_r+0x992>
 800a06c:	9906      	ldr	r1, [sp, #24]
 800a06e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a072:	9907      	ldr	r1, [sp, #28]
 800a074:	ea5a 0101 	orrs.w	r1, sl, r1
 800a078:	d120      	bne.n	800a0bc <_dtoa_r+0x9d4>
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	ddec      	ble.n	800a058 <_dtoa_r+0x970>
 800a07e:	4629      	mov	r1, r5
 800a080:	2201      	movs	r2, #1
 800a082:	4630      	mov	r0, r6
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	f000 ff8d 	bl	800afa4 <__lshift>
 800a08a:	4621      	mov	r1, r4
 800a08c:	4605      	mov	r5, r0
 800a08e:	f000 fff9 	bl	800b084 <__mcmp>
 800a092:	2800      	cmp	r0, #0
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	dc02      	bgt.n	800a09e <_dtoa_r+0x9b6>
 800a098:	d1de      	bne.n	800a058 <_dtoa_r+0x970>
 800a09a:	07da      	lsls	r2, r3, #31
 800a09c:	d5dc      	bpl.n	800a058 <_dtoa_r+0x970>
 800a09e:	2b39      	cmp	r3, #57	; 0x39
 800a0a0:	d1d8      	bne.n	800a054 <_dtoa_r+0x96c>
 800a0a2:	9a02      	ldr	r2, [sp, #8]
 800a0a4:	2339      	movs	r3, #57	; 0x39
 800a0a6:	7013      	strb	r3, [r2, #0]
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	4698      	mov	r8, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a0b2:	2a39      	cmp	r2, #57	; 0x39
 800a0b4:	d051      	beq.n	800a15a <_dtoa_r+0xa72>
 800a0b6:	3201      	adds	r2, #1
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e745      	b.n	8009f48 <_dtoa_r+0x860>
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	dd03      	ble.n	800a0c8 <_dtoa_r+0x9e0>
 800a0c0:	2b39      	cmp	r3, #57	; 0x39
 800a0c2:	d0ee      	beq.n	800a0a2 <_dtoa_r+0x9ba>
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	e7c7      	b.n	800a058 <_dtoa_r+0x970>
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	9908      	ldr	r1, [sp, #32]
 800a0cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0d0:	428a      	cmp	r2, r1
 800a0d2:	d02b      	beq.n	800a12c <_dtoa_r+0xa44>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 fd68 	bl	800abb0 <__multadd>
 800a0e0:	45b9      	cmp	r9, r7
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	f04f 020a 	mov.w	r2, #10
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	d107      	bne.n	800a102 <_dtoa_r+0xa1a>
 800a0f2:	f000 fd5d 	bl	800abb0 <__multadd>
 800a0f6:	4681      	mov	r9, r0
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	9b04      	ldr	r3, [sp, #16]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	e774      	b.n	8009fec <_dtoa_r+0x904>
 800a102:	f000 fd55 	bl	800abb0 <__multadd>
 800a106:	4639      	mov	r1, r7
 800a108:	4681      	mov	r9, r0
 800a10a:	2300      	movs	r3, #0
 800a10c:	220a      	movs	r2, #10
 800a10e:	4630      	mov	r0, r6
 800a110:	f000 fd4e 	bl	800abb0 <__multadd>
 800a114:	4607      	mov	r7, r0
 800a116:	e7f0      	b.n	800a0fa <_dtoa_r+0xa12>
 800a118:	f1ba 0f00 	cmp.w	sl, #0
 800a11c:	9a01      	ldr	r2, [sp, #4]
 800a11e:	bfcc      	ite	gt
 800a120:	46d0      	movgt	r8, sl
 800a122:	f04f 0801 	movle.w	r8, #1
 800a126:	4490      	add	r8, r2
 800a128:	f04f 0900 	mov.w	r9, #0
 800a12c:	4629      	mov	r1, r5
 800a12e:	2201      	movs	r2, #1
 800a130:	4630      	mov	r0, r6
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	f000 ff36 	bl	800afa4 <__lshift>
 800a138:	4621      	mov	r1, r4
 800a13a:	4605      	mov	r5, r0
 800a13c:	f000 ffa2 	bl	800b084 <__mcmp>
 800a140:	2800      	cmp	r0, #0
 800a142:	dcb1      	bgt.n	800a0a8 <_dtoa_r+0x9c0>
 800a144:	d102      	bne.n	800a14c <_dtoa_r+0xa64>
 800a146:	9b02      	ldr	r3, [sp, #8]
 800a148:	07db      	lsls	r3, r3, #31
 800a14a:	d4ad      	bmi.n	800a0a8 <_dtoa_r+0x9c0>
 800a14c:	4643      	mov	r3, r8
 800a14e:	4698      	mov	r8, r3
 800a150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a154:	2a30      	cmp	r2, #48	; 0x30
 800a156:	d0fa      	beq.n	800a14e <_dtoa_r+0xa66>
 800a158:	e6f6      	b.n	8009f48 <_dtoa_r+0x860>
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d1a4      	bne.n	800a0aa <_dtoa_r+0x9c2>
 800a160:	f10b 0b01 	add.w	fp, fp, #1
 800a164:	2331      	movs	r3, #49	; 0x31
 800a166:	e778      	b.n	800a05a <_dtoa_r+0x972>
 800a168:	4b14      	ldr	r3, [pc, #80]	; (800a1bc <_dtoa_r+0xad4>)
 800a16a:	f7ff bb27 	b.w	80097bc <_dtoa_r+0xd4>
 800a16e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f ab03 	bne.w	800977c <_dtoa_r+0x94>
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <_dtoa_r+0xad8>)
 800a178:	f7ff bb20 	b.w	80097bc <_dtoa_r+0xd4>
 800a17c:	f1ba 0f00 	cmp.w	sl, #0
 800a180:	dc03      	bgt.n	800a18a <_dtoa_r+0xaa2>
 800a182:	9b06      	ldr	r3, [sp, #24]
 800a184:	2b02      	cmp	r3, #2
 800a186:	f73f aec7 	bgt.w	8009f18 <_dtoa_r+0x830>
 800a18a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f7ff fa1d 	bl	80095d0 <quorem>
 800a196:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a19a:	f808 3b01 	strb.w	r3, [r8], #1
 800a19e:	9a01      	ldr	r2, [sp, #4]
 800a1a0:	eba8 0202 	sub.w	r2, r8, r2
 800a1a4:	4592      	cmp	sl, r2
 800a1a6:	ddb7      	ble.n	800a118 <_dtoa_r+0xa30>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	220a      	movs	r2, #10
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 fcfe 	bl	800abb0 <__multadd>
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	e7ea      	b.n	800a18e <_dtoa_r+0xaa6>
 800a1b8:	0800c568 	.word	0x0800c568
 800a1bc:	0800c36c 	.word	0x0800c36c
 800a1c0:	0800c4e9 	.word	0x0800c4e9

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	; 0x5c
 800a1e2:	f7fd fd0b 	bl	8007bfc <memset>
 800a1e6:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <std+0x38>)
 800a1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <std+0x3c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <std+0x40>)
 800a1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x44>)
 800a1f4:	6224      	str	r4, [r4, #32]
 800a1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800bbf1 	.word	0x0800bbf1
 800a200:	0800bc13 	.word	0x0800bc13
 800a204:	0800bc4b 	.word	0x0800bc4b
 800a208:	0800bc6f 	.word	0x0800bc6f

0800a20c <_cleanup_r>:
 800a20c:	4901      	ldr	r1, [pc, #4]	; (800a214 <_cleanup_r+0x8>)
 800a20e:	f000 b8af 	b.w	800a370 <_fwalk_reent>
 800a212:	bf00      	nop
 800a214:	0800bfc9 	.word	0x0800bfc9

0800a218 <__sfmoreglue>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2268      	movs	r2, #104	; 0x68
 800a21c:	1e4d      	subs	r5, r1, #1
 800a21e:	4355      	muls	r5, r2
 800a220:	460e      	mov	r6, r1
 800a222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a226:	f001 f9a1 	bl	800b56c <_malloc_r>
 800a22a:	4604      	mov	r4, r0
 800a22c:	b140      	cbz	r0, 800a240 <__sfmoreglue+0x28>
 800a22e:	2100      	movs	r1, #0
 800a230:	e9c0 1600 	strd	r1, r6, [r0]
 800a234:	300c      	adds	r0, #12
 800a236:	60a0      	str	r0, [r4, #8]
 800a238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a23c:	f7fd fcde 	bl	8007bfc <memset>
 800a240:	4620      	mov	r0, r4
 800a242:	bd70      	pop	{r4, r5, r6, pc}

0800a244 <__sfp_lock_acquire>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__sfp_lock_acquire+0x8>)
 800a246:	f000 bc26 	b.w	800aa96 <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	200006e9 	.word	0x200006e9

0800a250 <__sfp_lock_release>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_release+0x8>)
 800a252:	f000 bc21 	b.w	800aa98 <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	200006e9 	.word	0x200006e9

0800a25c <__sinit_lock_acquire>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sinit_lock_acquire+0x8>)
 800a25e:	f000 bc1a 	b.w	800aa96 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	200006ea 	.word	0x200006ea

0800a268 <__sinit_lock_release>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sinit_lock_release+0x8>)
 800a26a:	f000 bc15 	b.w	800aa98 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	200006ea 	.word	0x200006ea

0800a274 <__sinit>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff fff0 	bl	800a25c <__sinit_lock_acquire>
 800a27c:	69a3      	ldr	r3, [r4, #24]
 800a27e:	b11b      	cbz	r3, 800a288 <__sinit+0x14>
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bff0 	b.w	800a268 <__sinit_lock_release>
 800a288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a28c:	6523      	str	r3, [r4, #80]	; 0x50
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <__sinit+0x68>)
 800a290:	4a13      	ldr	r2, [pc, #76]	; (800a2e0 <__sinit+0x6c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	62a2      	str	r2, [r4, #40]	; 0x28
 800a296:	42a3      	cmp	r3, r4
 800a298:	bf04      	itt	eq
 800a29a:	2301      	moveq	r3, #1
 800a29c:	61a3      	streq	r3, [r4, #24]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f820 	bl	800a2e4 <__sfp>
 800a2a4:	6060      	str	r0, [r4, #4]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 f81c 	bl	800a2e4 <__sfp>
 800a2ac:	60a0      	str	r0, [r4, #8]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 f818 	bl	800a2e4 <__sfp>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60e0      	str	r0, [r4, #12]
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	6860      	ldr	r0, [r4, #4]
 800a2bc:	f7ff ff82 	bl	800a1c4 <std>
 800a2c0:	68a0      	ldr	r0, [r4, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2109      	movs	r1, #9
 800a2c6:	f7ff ff7d 	bl	800a1c4 <std>
 800a2ca:	68e0      	ldr	r0, [r4, #12]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	2112      	movs	r1, #18
 800a2d0:	f7ff ff78 	bl	800a1c4 <std>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	61a3      	str	r3, [r4, #24]
 800a2d8:	e7d2      	b.n	800a280 <__sinit+0xc>
 800a2da:	bf00      	nop
 800a2dc:	0800c358 	.word	0x0800c358
 800a2e0:	0800a20d 	.word	0x0800a20d

0800a2e4 <__sfp>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	f7ff ffac 	bl	800a244 <__sfp_lock_acquire>
 800a2ec:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <__sfp+0x84>)
 800a2ee:	681e      	ldr	r6, [r3, #0]
 800a2f0:	69b3      	ldr	r3, [r6, #24]
 800a2f2:	b913      	cbnz	r3, 800a2fa <__sfp+0x16>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ffbd 	bl	800a274 <__sinit>
 800a2fa:	3648      	adds	r6, #72	; 0x48
 800a2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a300:	3b01      	subs	r3, #1
 800a302:	d503      	bpl.n	800a30c <__sfp+0x28>
 800a304:	6833      	ldr	r3, [r6, #0]
 800a306:	b30b      	cbz	r3, 800a34c <__sfp+0x68>
 800a308:	6836      	ldr	r6, [r6, #0]
 800a30a:	e7f7      	b.n	800a2fc <__sfp+0x18>
 800a30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a310:	b9d5      	cbnz	r5, 800a348 <__sfp+0x64>
 800a312:	4b16      	ldr	r3, [pc, #88]	; (800a36c <__sfp+0x88>)
 800a314:	60e3      	str	r3, [r4, #12]
 800a316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a31a:	6665      	str	r5, [r4, #100]	; 0x64
 800a31c:	f000 fbba 	bl	800aa94 <__retarget_lock_init_recursive>
 800a320:	f7ff ff96 	bl	800a250 <__sfp_lock_release>
 800a324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a32c:	6025      	str	r5, [r4, #0]
 800a32e:	61a5      	str	r5, [r4, #24]
 800a330:	2208      	movs	r2, #8
 800a332:	4629      	mov	r1, r5
 800a334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a338:	f7fd fc60 	bl	8007bfc <memset>
 800a33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a344:	4620      	mov	r0, r4
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	3468      	adds	r4, #104	; 0x68
 800a34a:	e7d9      	b.n	800a300 <__sfp+0x1c>
 800a34c:	2104      	movs	r1, #4
 800a34e:	4638      	mov	r0, r7
 800a350:	f7ff ff62 	bl	800a218 <__sfmoreglue>
 800a354:	4604      	mov	r4, r0
 800a356:	6030      	str	r0, [r6, #0]
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1d5      	bne.n	800a308 <__sfp+0x24>
 800a35c:	f7ff ff78 	bl	800a250 <__sfp_lock_release>
 800a360:	230c      	movs	r3, #12
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	e7ee      	b.n	800a344 <__sfp+0x60>
 800a366:	bf00      	nop
 800a368:	0800c358 	.word	0x0800c358
 800a36c:	ffff0001 	.word	0xffff0001

0800a370 <_fwalk_reent>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	4606      	mov	r6, r0
 800a376:	4688      	mov	r8, r1
 800a378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a37c:	2700      	movs	r7, #0
 800a37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a382:	f1b9 0901 	subs.w	r9, r9, #1
 800a386:	d505      	bpl.n	800a394 <_fwalk_reent+0x24>
 800a388:	6824      	ldr	r4, [r4, #0]
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	d1f7      	bne.n	800a37e <_fwalk_reent+0xe>
 800a38e:	4638      	mov	r0, r7
 800a390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a394:	89ab      	ldrh	r3, [r5, #12]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d907      	bls.n	800a3aa <_fwalk_reent+0x3a>
 800a39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <_fwalk_reent+0x3a>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	47c0      	blx	r8
 800a3a8:	4307      	orrs	r7, r0
 800a3aa:	3568      	adds	r5, #104	; 0x68
 800a3ac:	e7e9      	b.n	800a382 <_fwalk_reent+0x12>

0800a3ae <rshift>:
 800a3ae:	6903      	ldr	r3, [r0, #16]
 800a3b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3bc:	f100 0414 	add.w	r4, r0, #20
 800a3c0:	dd45      	ble.n	800a44e <rshift+0xa0>
 800a3c2:	f011 011f 	ands.w	r1, r1, #31
 800a3c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ce:	d10c      	bne.n	800a3ea <rshift+0x3c>
 800a3d0:	f100 0710 	add.w	r7, r0, #16
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	42b1      	cmp	r1, r6
 800a3d8:	d334      	bcc.n	800a444 <rshift+0x96>
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	1eea      	subs	r2, r5, #3
 800a3e0:	4296      	cmp	r6, r2
 800a3e2:	bf38      	it	cc
 800a3e4:	2300      	movcc	r3, #0
 800a3e6:	4423      	add	r3, r4
 800a3e8:	e015      	b.n	800a416 <rshift+0x68>
 800a3ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ee:	f1c1 0820 	rsb	r8, r1, #32
 800a3f2:	40cf      	lsrs	r7, r1
 800a3f4:	f105 0e04 	add.w	lr, r5, #4
 800a3f8:	46a1      	mov	r9, r4
 800a3fa:	4576      	cmp	r6, lr
 800a3fc:	46f4      	mov	ip, lr
 800a3fe:	d815      	bhi.n	800a42c <rshift+0x7e>
 800a400:	1a9a      	subs	r2, r3, r2
 800a402:	0092      	lsls	r2, r2, #2
 800a404:	3a04      	subs	r2, #4
 800a406:	3501      	adds	r5, #1
 800a408:	42ae      	cmp	r6, r5
 800a40a:	bf38      	it	cc
 800a40c:	2200      	movcc	r2, #0
 800a40e:	18a3      	adds	r3, r4, r2
 800a410:	50a7      	str	r7, [r4, r2]
 800a412:	b107      	cbz	r7, 800a416 <rshift+0x68>
 800a414:	3304      	adds	r3, #4
 800a416:	1b1a      	subs	r2, r3, r4
 800a418:	42a3      	cmp	r3, r4
 800a41a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a41e:	bf08      	it	eq
 800a420:	2300      	moveq	r3, #0
 800a422:	6102      	str	r2, [r0, #16]
 800a424:	bf08      	it	eq
 800a426:	6143      	streq	r3, [r0, #20]
 800a428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42c:	f8dc c000 	ldr.w	ip, [ip]
 800a430:	fa0c fc08 	lsl.w	ip, ip, r8
 800a434:	ea4c 0707 	orr.w	r7, ip, r7
 800a438:	f849 7b04 	str.w	r7, [r9], #4
 800a43c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a440:	40cf      	lsrs	r7, r1
 800a442:	e7da      	b.n	800a3fa <rshift+0x4c>
 800a444:	f851 cb04 	ldr.w	ip, [r1], #4
 800a448:	f847 cf04 	str.w	ip, [r7, #4]!
 800a44c:	e7c3      	b.n	800a3d6 <rshift+0x28>
 800a44e:	4623      	mov	r3, r4
 800a450:	e7e1      	b.n	800a416 <rshift+0x68>

0800a452 <__hexdig_fun>:
 800a452:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a456:	2b09      	cmp	r3, #9
 800a458:	d802      	bhi.n	800a460 <__hexdig_fun+0xe>
 800a45a:	3820      	subs	r0, #32
 800a45c:	b2c0      	uxtb	r0, r0
 800a45e:	4770      	bx	lr
 800a460:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a464:	2b05      	cmp	r3, #5
 800a466:	d801      	bhi.n	800a46c <__hexdig_fun+0x1a>
 800a468:	3847      	subs	r0, #71	; 0x47
 800a46a:	e7f7      	b.n	800a45c <__hexdig_fun+0xa>
 800a46c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a470:	2b05      	cmp	r3, #5
 800a472:	d801      	bhi.n	800a478 <__hexdig_fun+0x26>
 800a474:	3827      	subs	r0, #39	; 0x27
 800a476:	e7f1      	b.n	800a45c <__hexdig_fun+0xa>
 800a478:	2000      	movs	r0, #0
 800a47a:	4770      	bx	lr

0800a47c <__gethex>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	ed2d 8b02 	vpush	{d8}
 800a484:	b089      	sub	sp, #36	; 0x24
 800a486:	ee08 0a10 	vmov	s16, r0
 800a48a:	9304      	str	r3, [sp, #16]
 800a48c:	4bb4      	ldr	r3, [pc, #720]	; (800a760 <__gethex+0x2e4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	4618      	mov	r0, r3
 800a494:	468b      	mov	fp, r1
 800a496:	4690      	mov	r8, r2
 800a498:	f7f5 fed2 	bl	8000240 <strlen>
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	f8db 2000 	ldr.w	r2, [fp]
 800a4a2:	4403      	add	r3, r0
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	1c93      	adds	r3, r2, #2
 800a4ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4b6:	32fe      	adds	r2, #254	; 0xfe
 800a4b8:	18d1      	adds	r1, r2, r3
 800a4ba:	461f      	mov	r7, r3
 800a4bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4c0:	9100      	str	r1, [sp, #0]
 800a4c2:	2830      	cmp	r0, #48	; 0x30
 800a4c4:	d0f8      	beq.n	800a4b8 <__gethex+0x3c>
 800a4c6:	f7ff ffc4 	bl	800a452 <__hexdig_fun>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d13a      	bne.n	800a546 <__gethex+0xca>
 800a4d0:	9901      	ldr	r1, [sp, #4]
 800a4d2:	4652      	mov	r2, sl
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f001 fbce 	bl	800bc76 <strncmp>
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d168      	bne.n	800a5b2 <__gethex+0x136>
 800a4e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4e4:	eb07 060a 	add.w	r6, r7, sl
 800a4e8:	f7ff ffb3 	bl	800a452 <__hexdig_fun>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d062      	beq.n	800a5b6 <__gethex+0x13a>
 800a4f0:	4633      	mov	r3, r6
 800a4f2:	7818      	ldrb	r0, [r3, #0]
 800a4f4:	2830      	cmp	r0, #48	; 0x30
 800a4f6:	461f      	mov	r7, r3
 800a4f8:	f103 0301 	add.w	r3, r3, #1
 800a4fc:	d0f9      	beq.n	800a4f2 <__gethex+0x76>
 800a4fe:	f7ff ffa8 	bl	800a452 <__hexdig_fun>
 800a502:	2301      	movs	r3, #1
 800a504:	fab0 f480 	clz	r4, r0
 800a508:	0964      	lsrs	r4, r4, #5
 800a50a:	4635      	mov	r5, r6
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	463a      	mov	r2, r7
 800a510:	4616      	mov	r6, r2
 800a512:	3201      	adds	r2, #1
 800a514:	7830      	ldrb	r0, [r6, #0]
 800a516:	f7ff ff9c 	bl	800a452 <__hexdig_fun>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d1f8      	bne.n	800a510 <__gethex+0x94>
 800a51e:	9901      	ldr	r1, [sp, #4]
 800a520:	4652      	mov	r2, sl
 800a522:	4630      	mov	r0, r6
 800a524:	f001 fba7 	bl	800bc76 <strncmp>
 800a528:	b980      	cbnz	r0, 800a54c <__gethex+0xd0>
 800a52a:	b94d      	cbnz	r5, 800a540 <__gethex+0xc4>
 800a52c:	eb06 050a 	add.w	r5, r6, sl
 800a530:	462a      	mov	r2, r5
 800a532:	4616      	mov	r6, r2
 800a534:	3201      	adds	r2, #1
 800a536:	7830      	ldrb	r0, [r6, #0]
 800a538:	f7ff ff8b 	bl	800a452 <__hexdig_fun>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d1f8      	bne.n	800a532 <__gethex+0xb6>
 800a540:	1bad      	subs	r5, r5, r6
 800a542:	00ad      	lsls	r5, r5, #2
 800a544:	e004      	b.n	800a550 <__gethex+0xd4>
 800a546:	2400      	movs	r4, #0
 800a548:	4625      	mov	r5, r4
 800a54a:	e7e0      	b.n	800a50e <__gethex+0x92>
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	d1f7      	bne.n	800a540 <__gethex+0xc4>
 800a550:	7833      	ldrb	r3, [r6, #0]
 800a552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a556:	2b50      	cmp	r3, #80	; 0x50
 800a558:	d13b      	bne.n	800a5d2 <__gethex+0x156>
 800a55a:	7873      	ldrb	r3, [r6, #1]
 800a55c:	2b2b      	cmp	r3, #43	; 0x2b
 800a55e:	d02c      	beq.n	800a5ba <__gethex+0x13e>
 800a560:	2b2d      	cmp	r3, #45	; 0x2d
 800a562:	d02e      	beq.n	800a5c2 <__gethex+0x146>
 800a564:	1c71      	adds	r1, r6, #1
 800a566:	f04f 0900 	mov.w	r9, #0
 800a56a:	7808      	ldrb	r0, [r1, #0]
 800a56c:	f7ff ff71 	bl	800a452 <__hexdig_fun>
 800a570:	1e43      	subs	r3, r0, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b18      	cmp	r3, #24
 800a576:	d82c      	bhi.n	800a5d2 <__gethex+0x156>
 800a578:	f1a0 0210 	sub.w	r2, r0, #16
 800a57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a580:	f7ff ff67 	bl	800a452 <__hexdig_fun>
 800a584:	1e43      	subs	r3, r0, #1
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b18      	cmp	r3, #24
 800a58a:	d91d      	bls.n	800a5c8 <__gethex+0x14c>
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	d000      	beq.n	800a594 <__gethex+0x118>
 800a592:	4252      	negs	r2, r2
 800a594:	4415      	add	r5, r2
 800a596:	f8cb 1000 	str.w	r1, [fp]
 800a59a:	b1e4      	cbz	r4, 800a5d6 <__gethex+0x15a>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bf14      	ite	ne
 800a5a2:	2700      	movne	r7, #0
 800a5a4:	2706      	moveq	r7, #6
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	b009      	add	sp, #36	; 0x24
 800a5aa:	ecbd 8b02 	vpop	{d8}
 800a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b2:	463e      	mov	r6, r7
 800a5b4:	4625      	mov	r5, r4
 800a5b6:	2401      	movs	r4, #1
 800a5b8:	e7ca      	b.n	800a550 <__gethex+0xd4>
 800a5ba:	f04f 0900 	mov.w	r9, #0
 800a5be:	1cb1      	adds	r1, r6, #2
 800a5c0:	e7d3      	b.n	800a56a <__gethex+0xee>
 800a5c2:	f04f 0901 	mov.w	r9, #1
 800a5c6:	e7fa      	b.n	800a5be <__gethex+0x142>
 800a5c8:	230a      	movs	r3, #10
 800a5ca:	fb03 0202 	mla	r2, r3, r2, r0
 800a5ce:	3a10      	subs	r2, #16
 800a5d0:	e7d4      	b.n	800a57c <__gethex+0x100>
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	e7df      	b.n	800a596 <__gethex+0x11a>
 800a5d6:	1bf3      	subs	r3, r6, r7
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4621      	mov	r1, r4
 800a5dc:	2b07      	cmp	r3, #7
 800a5de:	dc0b      	bgt.n	800a5f8 <__gethex+0x17c>
 800a5e0:	ee18 0a10 	vmov	r0, s16
 800a5e4:	f000 fa82 	bl	800aaec <_Balloc>
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	b940      	cbnz	r0, 800a5fe <__gethex+0x182>
 800a5ec:	4b5d      	ldr	r3, [pc, #372]	; (800a764 <__gethex+0x2e8>)
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	21de      	movs	r1, #222	; 0xde
 800a5f2:	485d      	ldr	r0, [pc, #372]	; (800a768 <__gethex+0x2ec>)
 800a5f4:	f001 fc34 	bl	800be60 <__assert_func>
 800a5f8:	3101      	adds	r1, #1
 800a5fa:	105b      	asrs	r3, r3, #1
 800a5fc:	e7ee      	b.n	800a5dc <__gethex+0x160>
 800a5fe:	f100 0914 	add.w	r9, r0, #20
 800a602:	f04f 0b00 	mov.w	fp, #0
 800a606:	f1ca 0301 	rsb	r3, sl, #1
 800a60a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a60e:	f8cd b000 	str.w	fp, [sp]
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	42b7      	cmp	r7, r6
 800a616:	d340      	bcc.n	800a69a <__gethex+0x21e>
 800a618:	9802      	ldr	r0, [sp, #8]
 800a61a:	9b00      	ldr	r3, [sp, #0]
 800a61c:	f840 3b04 	str.w	r3, [r0], #4
 800a620:	eba0 0009 	sub.w	r0, r0, r9
 800a624:	1080      	asrs	r0, r0, #2
 800a626:	0146      	lsls	r6, r0, #5
 800a628:	6120      	str	r0, [r4, #16]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fb50 	bl	800acd0 <__hi0bits>
 800a630:	1a30      	subs	r0, r6, r0
 800a632:	f8d8 6000 	ldr.w	r6, [r8]
 800a636:	42b0      	cmp	r0, r6
 800a638:	dd63      	ble.n	800a702 <__gethex+0x286>
 800a63a:	1b87      	subs	r7, r0, r6
 800a63c:	4639      	mov	r1, r7
 800a63e:	4620      	mov	r0, r4
 800a640:	f000 fef1 	bl	800b426 <__any_on>
 800a644:	4682      	mov	sl, r0
 800a646:	b1a8      	cbz	r0, 800a674 <__gethex+0x1f8>
 800a648:	1e7b      	subs	r3, r7, #1
 800a64a:	1159      	asrs	r1, r3, #5
 800a64c:	f003 021f 	and.w	r2, r3, #31
 800a650:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a654:	f04f 0a01 	mov.w	sl, #1
 800a658:	fa0a f202 	lsl.w	r2, sl, r2
 800a65c:	420a      	tst	r2, r1
 800a65e:	d009      	beq.n	800a674 <__gethex+0x1f8>
 800a660:	4553      	cmp	r3, sl
 800a662:	dd05      	ble.n	800a670 <__gethex+0x1f4>
 800a664:	1eb9      	subs	r1, r7, #2
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fedd 	bl	800b426 <__any_on>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d145      	bne.n	800a6fc <__gethex+0x280>
 800a670:	f04f 0a02 	mov.w	sl, #2
 800a674:	4639      	mov	r1, r7
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff fe99 	bl	800a3ae <rshift>
 800a67c:	443d      	add	r5, r7
 800a67e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a682:	42ab      	cmp	r3, r5
 800a684:	da4c      	bge.n	800a720 <__gethex+0x2a4>
 800a686:	ee18 0a10 	vmov	r0, s16
 800a68a:	4621      	mov	r1, r4
 800a68c:	f000 fa6e 	bl	800ab6c <_Bfree>
 800a690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a692:	2300      	movs	r3, #0
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	27a3      	movs	r7, #163	; 0xa3
 800a698:	e785      	b.n	800a5a6 <__gethex+0x12a>
 800a69a:	1e73      	subs	r3, r6, #1
 800a69c:	9a05      	ldr	r2, [sp, #20]
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d019      	beq.n	800a6dc <__gethex+0x260>
 800a6a8:	f1bb 0f20 	cmp.w	fp, #32
 800a6ac:	d107      	bne.n	800a6be <__gethex+0x242>
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	9a00      	ldr	r2, [sp, #0]
 800a6b2:	f843 2b04 	str.w	r2, [r3], #4
 800a6b6:	9302      	str	r3, [sp, #8]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	469b      	mov	fp, r3
 800a6be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6c2:	f7ff fec6 	bl	800a452 <__hexdig_fun>
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	f000 000f 	and.w	r0, r0, #15
 800a6cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6d0:	4303      	orrs	r3, r0
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	f10b 0b04 	add.w	fp, fp, #4
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	e00d      	b.n	800a6f8 <__gethex+0x27c>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	9a06      	ldr	r2, [sp, #24]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	42bb      	cmp	r3, r7
 800a6e4:	d3e0      	bcc.n	800a6a8 <__gethex+0x22c>
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	9901      	ldr	r1, [sp, #4]
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	f001 fac2 	bl	800bc76 <strncmp>
 800a6f2:	9b07      	ldr	r3, [sp, #28]
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1d7      	bne.n	800a6a8 <__gethex+0x22c>
 800a6f8:	461e      	mov	r6, r3
 800a6fa:	e78b      	b.n	800a614 <__gethex+0x198>
 800a6fc:	f04f 0a03 	mov.w	sl, #3
 800a700:	e7b8      	b.n	800a674 <__gethex+0x1f8>
 800a702:	da0a      	bge.n	800a71a <__gethex+0x29e>
 800a704:	1a37      	subs	r7, r6, r0
 800a706:	4621      	mov	r1, r4
 800a708:	ee18 0a10 	vmov	r0, s16
 800a70c:	463a      	mov	r2, r7
 800a70e:	f000 fc49 	bl	800afa4 <__lshift>
 800a712:	1bed      	subs	r5, r5, r7
 800a714:	4604      	mov	r4, r0
 800a716:	f100 0914 	add.w	r9, r0, #20
 800a71a:	f04f 0a00 	mov.w	sl, #0
 800a71e:	e7ae      	b.n	800a67e <__gethex+0x202>
 800a720:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a724:	42a8      	cmp	r0, r5
 800a726:	dd72      	ble.n	800a80e <__gethex+0x392>
 800a728:	1b45      	subs	r5, r0, r5
 800a72a:	42ae      	cmp	r6, r5
 800a72c:	dc36      	bgt.n	800a79c <__gethex+0x320>
 800a72e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d02a      	beq.n	800a78c <__gethex+0x310>
 800a736:	2b03      	cmp	r3, #3
 800a738:	d02c      	beq.n	800a794 <__gethex+0x318>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d11c      	bne.n	800a778 <__gethex+0x2fc>
 800a73e:	42ae      	cmp	r6, r5
 800a740:	d11a      	bne.n	800a778 <__gethex+0x2fc>
 800a742:	2e01      	cmp	r6, #1
 800a744:	d112      	bne.n	800a76c <__gethex+0x2f0>
 800a746:	9a04      	ldr	r2, [sp, #16]
 800a748:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	2301      	movs	r3, #1
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	f8c9 3000 	str.w	r3, [r9]
 800a756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a758:	2762      	movs	r7, #98	; 0x62
 800a75a:	601c      	str	r4, [r3, #0]
 800a75c:	e723      	b.n	800a5a6 <__gethex+0x12a>
 800a75e:	bf00      	nop
 800a760:	0800c644 	.word	0x0800c644
 800a764:	0800c568 	.word	0x0800c568
 800a768:	0800c5dc 	.word	0x0800c5dc
 800a76c:	1e71      	subs	r1, r6, #1
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 fe59 	bl	800b426 <__any_on>
 800a774:	2800      	cmp	r0, #0
 800a776:	d1e6      	bne.n	800a746 <__gethex+0x2ca>
 800a778:	ee18 0a10 	vmov	r0, s16
 800a77c:	4621      	mov	r1, r4
 800a77e:	f000 f9f5 	bl	800ab6c <_Bfree>
 800a782:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a784:	2300      	movs	r3, #0
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	2750      	movs	r7, #80	; 0x50
 800a78a:	e70c      	b.n	800a5a6 <__gethex+0x12a>
 800a78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f2      	bne.n	800a778 <__gethex+0x2fc>
 800a792:	e7d8      	b.n	800a746 <__gethex+0x2ca>
 800a794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1d5      	bne.n	800a746 <__gethex+0x2ca>
 800a79a:	e7ed      	b.n	800a778 <__gethex+0x2fc>
 800a79c:	1e6f      	subs	r7, r5, #1
 800a79e:	f1ba 0f00 	cmp.w	sl, #0
 800a7a2:	d131      	bne.n	800a808 <__gethex+0x38c>
 800a7a4:	b127      	cbz	r7, 800a7b0 <__gethex+0x334>
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fe3c 	bl	800b426 <__any_on>
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	117b      	asrs	r3, r7, #5
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7b8:	f007 071f 	and.w	r7, r7, #31
 800a7bc:	fa01 f707 	lsl.w	r7, r1, r7
 800a7c0:	421f      	tst	r7, r3
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	bf18      	it	ne
 800a7c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7cc:	1b76      	subs	r6, r6, r5
 800a7ce:	f7ff fdee 	bl	800a3ae <rshift>
 800a7d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7d6:	2702      	movs	r7, #2
 800a7d8:	f1ba 0f00 	cmp.w	sl, #0
 800a7dc:	d048      	beq.n	800a870 <__gethex+0x3f4>
 800a7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d015      	beq.n	800a812 <__gethex+0x396>
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d017      	beq.n	800a81a <__gethex+0x39e>
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d109      	bne.n	800a802 <__gethex+0x386>
 800a7ee:	f01a 0f02 	tst.w	sl, #2
 800a7f2:	d006      	beq.n	800a802 <__gethex+0x386>
 800a7f4:	f8d9 0000 	ldr.w	r0, [r9]
 800a7f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7fc:	f01a 0f01 	tst.w	sl, #1
 800a800:	d10e      	bne.n	800a820 <__gethex+0x3a4>
 800a802:	f047 0710 	orr.w	r7, r7, #16
 800a806:	e033      	b.n	800a870 <__gethex+0x3f4>
 800a808:	f04f 0a01 	mov.w	sl, #1
 800a80c:	e7d0      	b.n	800a7b0 <__gethex+0x334>
 800a80e:	2701      	movs	r7, #1
 800a810:	e7e2      	b.n	800a7d8 <__gethex+0x35c>
 800a812:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a814:	f1c3 0301 	rsb	r3, r3, #1
 800a818:	9315      	str	r3, [sp, #84]	; 0x54
 800a81a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0f0      	beq.n	800a802 <__gethex+0x386>
 800a820:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a824:	f104 0314 	add.w	r3, r4, #20
 800a828:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a82c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a830:	f04f 0c00 	mov.w	ip, #0
 800a834:	4618      	mov	r0, r3
 800a836:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a83e:	d01c      	beq.n	800a87a <__gethex+0x3fe>
 800a840:	3201      	adds	r2, #1
 800a842:	6002      	str	r2, [r0, #0]
 800a844:	2f02      	cmp	r7, #2
 800a846:	f104 0314 	add.w	r3, r4, #20
 800a84a:	d13f      	bne.n	800a8cc <__gethex+0x450>
 800a84c:	f8d8 2000 	ldr.w	r2, [r8]
 800a850:	3a01      	subs	r2, #1
 800a852:	42b2      	cmp	r2, r6
 800a854:	d10a      	bne.n	800a86c <__gethex+0x3f0>
 800a856:	1171      	asrs	r1, r6, #5
 800a858:	2201      	movs	r2, #1
 800a85a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a85e:	f006 061f 	and.w	r6, r6, #31
 800a862:	fa02 f606 	lsl.w	r6, r2, r6
 800a866:	421e      	tst	r6, r3
 800a868:	bf18      	it	ne
 800a86a:	4617      	movne	r7, r2
 800a86c:	f047 0720 	orr.w	r7, r7, #32
 800a870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a872:	601c      	str	r4, [r3, #0]
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	601d      	str	r5, [r3, #0]
 800a878:	e695      	b.n	800a5a6 <__gethex+0x12a>
 800a87a:	4299      	cmp	r1, r3
 800a87c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a880:	d8d8      	bhi.n	800a834 <__gethex+0x3b8>
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	459b      	cmp	fp, r3
 800a886:	db19      	blt.n	800a8bc <__gethex+0x440>
 800a888:	6861      	ldr	r1, [r4, #4]
 800a88a:	ee18 0a10 	vmov	r0, s16
 800a88e:	3101      	adds	r1, #1
 800a890:	f000 f92c 	bl	800aaec <_Balloc>
 800a894:	4681      	mov	r9, r0
 800a896:	b918      	cbnz	r0, 800a8a0 <__gethex+0x424>
 800a898:	4b1a      	ldr	r3, [pc, #104]	; (800a904 <__gethex+0x488>)
 800a89a:	4602      	mov	r2, r0
 800a89c:	2184      	movs	r1, #132	; 0x84
 800a89e:	e6a8      	b.n	800a5f2 <__gethex+0x176>
 800a8a0:	6922      	ldr	r2, [r4, #16]
 800a8a2:	3202      	adds	r2, #2
 800a8a4:	f104 010c 	add.w	r1, r4, #12
 800a8a8:	0092      	lsls	r2, r2, #2
 800a8aa:	300c      	adds	r0, #12
 800a8ac:	f000 f910 	bl	800aad0 <memcpy>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	ee18 0a10 	vmov	r0, s16
 800a8b6:	f000 f959 	bl	800ab6c <_Bfree>
 800a8ba:	464c      	mov	r4, r9
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8c4:	6122      	str	r2, [r4, #16]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	615a      	str	r2, [r3, #20]
 800a8ca:	e7bb      	b.n	800a844 <__gethex+0x3c8>
 800a8cc:	6922      	ldr	r2, [r4, #16]
 800a8ce:	455a      	cmp	r2, fp
 800a8d0:	dd0b      	ble.n	800a8ea <__gethex+0x46e>
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff fd6a 	bl	800a3ae <rshift>
 800a8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8de:	3501      	adds	r5, #1
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	f6ff aed0 	blt.w	800a686 <__gethex+0x20a>
 800a8e6:	2701      	movs	r7, #1
 800a8e8:	e7c0      	b.n	800a86c <__gethex+0x3f0>
 800a8ea:	f016 061f 	ands.w	r6, r6, #31
 800a8ee:	d0fa      	beq.n	800a8e6 <__gethex+0x46a>
 800a8f0:	4453      	add	r3, sl
 800a8f2:	f1c6 0620 	rsb	r6, r6, #32
 800a8f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8fa:	f000 f9e9 	bl	800acd0 <__hi0bits>
 800a8fe:	42b0      	cmp	r0, r6
 800a900:	dbe7      	blt.n	800a8d2 <__gethex+0x456>
 800a902:	e7f0      	b.n	800a8e6 <__gethex+0x46a>
 800a904:	0800c568 	.word	0x0800c568

0800a908 <L_shift>:
 800a908:	f1c2 0208 	rsb	r2, r2, #8
 800a90c:	0092      	lsls	r2, r2, #2
 800a90e:	b570      	push	{r4, r5, r6, lr}
 800a910:	f1c2 0620 	rsb	r6, r2, #32
 800a914:	6843      	ldr	r3, [r0, #4]
 800a916:	6804      	ldr	r4, [r0, #0]
 800a918:	fa03 f506 	lsl.w	r5, r3, r6
 800a91c:	432c      	orrs	r4, r5
 800a91e:	40d3      	lsrs	r3, r2
 800a920:	6004      	str	r4, [r0, #0]
 800a922:	f840 3f04 	str.w	r3, [r0, #4]!
 800a926:	4288      	cmp	r0, r1
 800a928:	d3f4      	bcc.n	800a914 <L_shift+0xc>
 800a92a:	bd70      	pop	{r4, r5, r6, pc}

0800a92c <__match>:
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	6803      	ldr	r3, [r0, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a936:	b914      	cbnz	r4, 800a93e <__match+0x12>
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	2001      	movs	r0, #1
 800a93c:	bd30      	pop	{r4, r5, pc}
 800a93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a942:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a946:	2d19      	cmp	r5, #25
 800a948:	bf98      	it	ls
 800a94a:	3220      	addls	r2, #32
 800a94c:	42a2      	cmp	r2, r4
 800a94e:	d0f0      	beq.n	800a932 <__match+0x6>
 800a950:	2000      	movs	r0, #0
 800a952:	e7f3      	b.n	800a93c <__match+0x10>

0800a954 <__hexnan>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	680b      	ldr	r3, [r1, #0]
 800a95a:	115e      	asrs	r6, r3, #5
 800a95c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a960:	f013 031f 	ands.w	r3, r3, #31
 800a964:	b087      	sub	sp, #28
 800a966:	bf18      	it	ne
 800a968:	3604      	addne	r6, #4
 800a96a:	2500      	movs	r5, #0
 800a96c:	1f37      	subs	r7, r6, #4
 800a96e:	4690      	mov	r8, r2
 800a970:	6802      	ldr	r2, [r0, #0]
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	4682      	mov	sl, r0
 800a976:	f846 5c04 	str.w	r5, [r6, #-4]
 800a97a:	46b9      	mov	r9, r7
 800a97c:	463c      	mov	r4, r7
 800a97e:	9502      	str	r5, [sp, #8]
 800a980:	46ab      	mov	fp, r5
 800a982:	7851      	ldrb	r1, [r2, #1]
 800a984:	1c53      	adds	r3, r2, #1
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	b341      	cbz	r1, 800a9dc <__hexnan+0x88>
 800a98a:	4608      	mov	r0, r1
 800a98c:	9205      	str	r2, [sp, #20]
 800a98e:	9104      	str	r1, [sp, #16]
 800a990:	f7ff fd5f 	bl	800a452 <__hexdig_fun>
 800a994:	2800      	cmp	r0, #0
 800a996:	d14f      	bne.n	800aa38 <__hexnan+0xe4>
 800a998:	9904      	ldr	r1, [sp, #16]
 800a99a:	9a05      	ldr	r2, [sp, #20]
 800a99c:	2920      	cmp	r1, #32
 800a99e:	d818      	bhi.n	800a9d2 <__hexnan+0x7e>
 800a9a0:	9b02      	ldr	r3, [sp, #8]
 800a9a2:	459b      	cmp	fp, r3
 800a9a4:	dd13      	ble.n	800a9ce <__hexnan+0x7a>
 800a9a6:	454c      	cmp	r4, r9
 800a9a8:	d206      	bcs.n	800a9b8 <__hexnan+0x64>
 800a9aa:	2d07      	cmp	r5, #7
 800a9ac:	dc04      	bgt.n	800a9b8 <__hexnan+0x64>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff ffa8 	bl	800a908 <L_shift>
 800a9b8:	4544      	cmp	r4, r8
 800a9ba:	d950      	bls.n	800aa5e <__hexnan+0x10a>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f1a4 0904 	sub.w	r9, r4, #4
 800a9c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9c6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ca:	464c      	mov	r4, r9
 800a9cc:	461d      	mov	r5, r3
 800a9ce:	9a03      	ldr	r2, [sp, #12]
 800a9d0:	e7d7      	b.n	800a982 <__hexnan+0x2e>
 800a9d2:	2929      	cmp	r1, #41	; 0x29
 800a9d4:	d156      	bne.n	800aa84 <__hexnan+0x130>
 800a9d6:	3202      	adds	r2, #2
 800a9d8:	f8ca 2000 	str.w	r2, [sl]
 800a9dc:	f1bb 0f00 	cmp.w	fp, #0
 800a9e0:	d050      	beq.n	800aa84 <__hexnan+0x130>
 800a9e2:	454c      	cmp	r4, r9
 800a9e4:	d206      	bcs.n	800a9f4 <__hexnan+0xa0>
 800a9e6:	2d07      	cmp	r5, #7
 800a9e8:	dc04      	bgt.n	800a9f4 <__hexnan+0xa0>
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff ff8a 	bl	800a908 <L_shift>
 800a9f4:	4544      	cmp	r4, r8
 800a9f6:	d934      	bls.n	800aa62 <__hexnan+0x10e>
 800a9f8:	f1a8 0204 	sub.w	r2, r8, #4
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa02:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa06:	429f      	cmp	r7, r3
 800aa08:	d2f9      	bcs.n	800a9fe <__hexnan+0xaa>
 800aa0a:	1b3b      	subs	r3, r7, r4
 800aa0c:	f023 0303 	bic.w	r3, r3, #3
 800aa10:	3304      	adds	r3, #4
 800aa12:	3401      	adds	r4, #1
 800aa14:	3e03      	subs	r6, #3
 800aa16:	42b4      	cmp	r4, r6
 800aa18:	bf88      	it	hi
 800aa1a:	2304      	movhi	r3, #4
 800aa1c:	4443      	add	r3, r8
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f843 2b04 	str.w	r2, [r3], #4
 800aa24:	429f      	cmp	r7, r3
 800aa26:	d2fb      	bcs.n	800aa20 <__hexnan+0xcc>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	b91b      	cbnz	r3, 800aa34 <__hexnan+0xe0>
 800aa2c:	4547      	cmp	r7, r8
 800aa2e:	d127      	bne.n	800aa80 <__hexnan+0x12c>
 800aa30:	2301      	movs	r3, #1
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	2005      	movs	r0, #5
 800aa36:	e026      	b.n	800aa86 <__hexnan+0x132>
 800aa38:	3501      	adds	r5, #1
 800aa3a:	2d08      	cmp	r5, #8
 800aa3c:	f10b 0b01 	add.w	fp, fp, #1
 800aa40:	dd06      	ble.n	800aa50 <__hexnan+0xfc>
 800aa42:	4544      	cmp	r4, r8
 800aa44:	d9c3      	bls.n	800a9ce <__hexnan+0x7a>
 800aa46:	2300      	movs	r3, #0
 800aa48:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa4c:	2501      	movs	r5, #1
 800aa4e:	3c04      	subs	r4, #4
 800aa50:	6822      	ldr	r2, [r4, #0]
 800aa52:	f000 000f 	and.w	r0, r0, #15
 800aa56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa5a:	6022      	str	r2, [r4, #0]
 800aa5c:	e7b7      	b.n	800a9ce <__hexnan+0x7a>
 800aa5e:	2508      	movs	r5, #8
 800aa60:	e7b5      	b.n	800a9ce <__hexnan+0x7a>
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0df      	beq.n	800aa28 <__hexnan+0xd4>
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6c:	f1c3 0320 	rsb	r3, r3, #32
 800aa70:	fa22 f303 	lsr.w	r3, r2, r3
 800aa74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa78:	401a      	ands	r2, r3
 800aa7a:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa7e:	e7d3      	b.n	800aa28 <__hexnan+0xd4>
 800aa80:	3f04      	subs	r7, #4
 800aa82:	e7d1      	b.n	800aa28 <__hexnan+0xd4>
 800aa84:	2004      	movs	r0, #4
 800aa86:	b007      	add	sp, #28
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa8c <_localeconv_r>:
 800aa8c:	4800      	ldr	r0, [pc, #0]	; (800aa90 <_localeconv_r+0x4>)
 800aa8e:	4770      	bx	lr
 800aa90:	200001a8 	.word	0x200001a8

0800aa94 <__retarget_lock_init_recursive>:
 800aa94:	4770      	bx	lr

0800aa96 <__retarget_lock_acquire_recursive>:
 800aa96:	4770      	bx	lr

0800aa98 <__retarget_lock_release_recursive>:
 800aa98:	4770      	bx	lr
	...

0800aa9c <malloc>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <malloc+0xc>)
 800aa9e:	4601      	mov	r1, r0
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	f000 bd63 	b.w	800b56c <_malloc_r>
 800aaa6:	bf00      	nop
 800aaa8:	20000050 	.word	0x20000050

0800aaac <__ascii_mbtowc>:
 800aaac:	b082      	sub	sp, #8
 800aaae:	b901      	cbnz	r1, 800aab2 <__ascii_mbtowc+0x6>
 800aab0:	a901      	add	r1, sp, #4
 800aab2:	b142      	cbz	r2, 800aac6 <__ascii_mbtowc+0x1a>
 800aab4:	b14b      	cbz	r3, 800aaca <__ascii_mbtowc+0x1e>
 800aab6:	7813      	ldrb	r3, [r2, #0]
 800aab8:	600b      	str	r3, [r1, #0]
 800aaba:	7812      	ldrb	r2, [r2, #0]
 800aabc:	1e10      	subs	r0, r2, #0
 800aabe:	bf18      	it	ne
 800aac0:	2001      	movne	r0, #1
 800aac2:	b002      	add	sp, #8
 800aac4:	4770      	bx	lr
 800aac6:	4610      	mov	r0, r2
 800aac8:	e7fb      	b.n	800aac2 <__ascii_mbtowc+0x16>
 800aaca:	f06f 0001 	mvn.w	r0, #1
 800aace:	e7f8      	b.n	800aac2 <__ascii_mbtowc+0x16>

0800aad0 <memcpy>:
 800aad0:	440a      	add	r2, r1
 800aad2:	4291      	cmp	r1, r2
 800aad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	4770      	bx	lr
 800aadc:	b510      	push	{r4, lr}
 800aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae6:	4291      	cmp	r1, r2
 800aae8:	d1f9      	bne.n	800aade <memcpy+0xe>
 800aaea:	bd10      	pop	{r4, pc}

0800aaec <_Balloc>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	b976      	cbnz	r6, 800ab14 <_Balloc+0x28>
 800aaf6:	2010      	movs	r0, #16
 800aaf8:	f7ff ffd0 	bl	800aa9c <malloc>
 800aafc:	4602      	mov	r2, r0
 800aafe:	6260      	str	r0, [r4, #36]	; 0x24
 800ab00:	b920      	cbnz	r0, 800ab0c <_Balloc+0x20>
 800ab02:	4b18      	ldr	r3, [pc, #96]	; (800ab64 <_Balloc+0x78>)
 800ab04:	4818      	ldr	r0, [pc, #96]	; (800ab68 <_Balloc+0x7c>)
 800ab06:	2166      	movs	r1, #102	; 0x66
 800ab08:	f001 f9aa 	bl	800be60 <__assert_func>
 800ab0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab10:	6006      	str	r6, [r0, #0]
 800ab12:	60c6      	str	r6, [r0, #12]
 800ab14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab16:	68f3      	ldr	r3, [r6, #12]
 800ab18:	b183      	cbz	r3, 800ab3c <_Balloc+0x50>
 800ab1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab22:	b9b8      	cbnz	r0, 800ab54 <_Balloc+0x68>
 800ab24:	2101      	movs	r1, #1
 800ab26:	fa01 f605 	lsl.w	r6, r1, r5
 800ab2a:	1d72      	adds	r2, r6, #5
 800ab2c:	0092      	lsls	r2, r2, #2
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 fc9a 	bl	800b468 <_calloc_r>
 800ab34:	b160      	cbz	r0, 800ab50 <_Balloc+0x64>
 800ab36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab3a:	e00e      	b.n	800ab5a <_Balloc+0x6e>
 800ab3c:	2221      	movs	r2, #33	; 0x21
 800ab3e:	2104      	movs	r1, #4
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fc91 	bl	800b468 <_calloc_r>
 800ab46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab48:	60f0      	str	r0, [r6, #12]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1e4      	bne.n	800ab1a <_Balloc+0x2e>
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	6802      	ldr	r2, [r0, #0]
 800ab56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab60:	e7f7      	b.n	800ab52 <_Balloc+0x66>
 800ab62:	bf00      	nop
 800ab64:	0800c4f6 	.word	0x0800c4f6
 800ab68:	0800c658 	.word	0x0800c658

0800ab6c <_Bfree>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab70:	4605      	mov	r5, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	b976      	cbnz	r6, 800ab94 <_Bfree+0x28>
 800ab76:	2010      	movs	r0, #16
 800ab78:	f7ff ff90 	bl	800aa9c <malloc>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ab80:	b920      	cbnz	r0, 800ab8c <_Bfree+0x20>
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <_Bfree+0x3c>)
 800ab84:	4809      	ldr	r0, [pc, #36]	; (800abac <_Bfree+0x40>)
 800ab86:	218a      	movs	r1, #138	; 0x8a
 800ab88:	f001 f96a 	bl	800be60 <__assert_func>
 800ab8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab90:	6006      	str	r6, [r0, #0]
 800ab92:	60c6      	str	r6, [r0, #12]
 800ab94:	b13c      	cbz	r4, 800aba6 <_Bfree+0x3a>
 800ab96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab98:	6862      	ldr	r2, [r4, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aba0:	6021      	str	r1, [r4, #0]
 800aba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	0800c4f6 	.word	0x0800c4f6
 800abac:	0800c658 	.word	0x0800c658

0800abb0 <__multadd>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	690d      	ldr	r5, [r1, #16]
 800abb6:	4607      	mov	r7, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	461e      	mov	r6, r3
 800abbc:	f101 0c14 	add.w	ip, r1, #20
 800abc0:	2000      	movs	r0, #0
 800abc2:	f8dc 3000 	ldr.w	r3, [ip]
 800abc6:	b299      	uxth	r1, r3
 800abc8:	fb02 6101 	mla	r1, r2, r1, r6
 800abcc:	0c1e      	lsrs	r6, r3, #16
 800abce:	0c0b      	lsrs	r3, r1, #16
 800abd0:	fb02 3306 	mla	r3, r2, r6, r3
 800abd4:	b289      	uxth	r1, r1
 800abd6:	3001      	adds	r0, #1
 800abd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abdc:	4285      	cmp	r5, r0
 800abde:	f84c 1b04 	str.w	r1, [ip], #4
 800abe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abe6:	dcec      	bgt.n	800abc2 <__multadd+0x12>
 800abe8:	b30e      	cbz	r6, 800ac2e <__multadd+0x7e>
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	42ab      	cmp	r3, r5
 800abee:	dc19      	bgt.n	800ac24 <__multadd+0x74>
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	4638      	mov	r0, r7
 800abf4:	3101      	adds	r1, #1
 800abf6:	f7ff ff79 	bl	800aaec <_Balloc>
 800abfa:	4680      	mov	r8, r0
 800abfc:	b928      	cbnz	r0, 800ac0a <__multadd+0x5a>
 800abfe:	4602      	mov	r2, r0
 800ac00:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <__multadd+0x84>)
 800ac02:	480d      	ldr	r0, [pc, #52]	; (800ac38 <__multadd+0x88>)
 800ac04:	21b5      	movs	r1, #181	; 0xb5
 800ac06:	f001 f92b 	bl	800be60 <__assert_func>
 800ac0a:	6922      	ldr	r2, [r4, #16]
 800ac0c:	3202      	adds	r2, #2
 800ac0e:	f104 010c 	add.w	r1, r4, #12
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	300c      	adds	r0, #12
 800ac16:	f7ff ff5b 	bl	800aad0 <memcpy>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff ffa5 	bl	800ab6c <_Bfree>
 800ac22:	4644      	mov	r4, r8
 800ac24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac28:	3501      	adds	r5, #1
 800ac2a:	615e      	str	r6, [r3, #20]
 800ac2c:	6125      	str	r5, [r4, #16]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	0800c568 	.word	0x0800c568
 800ac38:	0800c658 	.word	0x0800c658

0800ac3c <__s2b>:
 800ac3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac40:	460c      	mov	r4, r1
 800ac42:	4615      	mov	r5, r2
 800ac44:	461f      	mov	r7, r3
 800ac46:	2209      	movs	r2, #9
 800ac48:	3308      	adds	r3, #8
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac50:	2100      	movs	r1, #0
 800ac52:	2201      	movs	r2, #1
 800ac54:	429a      	cmp	r2, r3
 800ac56:	db09      	blt.n	800ac6c <__s2b+0x30>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ff47 	bl	800aaec <_Balloc>
 800ac5e:	b940      	cbnz	r0, 800ac72 <__s2b+0x36>
 800ac60:	4602      	mov	r2, r0
 800ac62:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <__s2b+0x8c>)
 800ac64:	4819      	ldr	r0, [pc, #100]	; (800accc <__s2b+0x90>)
 800ac66:	21ce      	movs	r1, #206	; 0xce
 800ac68:	f001 f8fa 	bl	800be60 <__assert_func>
 800ac6c:	0052      	lsls	r2, r2, #1
 800ac6e:	3101      	adds	r1, #1
 800ac70:	e7f0      	b.n	800ac54 <__s2b+0x18>
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	6143      	str	r3, [r0, #20]
 800ac76:	2d09      	cmp	r5, #9
 800ac78:	f04f 0301 	mov.w	r3, #1
 800ac7c:	6103      	str	r3, [r0, #16]
 800ac7e:	dd16      	ble.n	800acae <__s2b+0x72>
 800ac80:	f104 0909 	add.w	r9, r4, #9
 800ac84:	46c8      	mov	r8, r9
 800ac86:	442c      	add	r4, r5
 800ac88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	3b30      	subs	r3, #48	; 0x30
 800ac90:	220a      	movs	r2, #10
 800ac92:	4630      	mov	r0, r6
 800ac94:	f7ff ff8c 	bl	800abb0 <__multadd>
 800ac98:	45a0      	cmp	r8, r4
 800ac9a:	d1f5      	bne.n	800ac88 <__s2b+0x4c>
 800ac9c:	f1a5 0408 	sub.w	r4, r5, #8
 800aca0:	444c      	add	r4, r9
 800aca2:	1b2d      	subs	r5, r5, r4
 800aca4:	1963      	adds	r3, r4, r5
 800aca6:	42bb      	cmp	r3, r7
 800aca8:	db04      	blt.n	800acb4 <__s2b+0x78>
 800acaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acae:	340a      	adds	r4, #10
 800acb0:	2509      	movs	r5, #9
 800acb2:	e7f6      	b.n	800aca2 <__s2b+0x66>
 800acb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb8:	4601      	mov	r1, r0
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	220a      	movs	r2, #10
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7ff ff76 	bl	800abb0 <__multadd>
 800acc4:	e7ee      	b.n	800aca4 <__s2b+0x68>
 800acc6:	bf00      	nop
 800acc8:	0800c568 	.word	0x0800c568
 800accc:	0800c658 	.word	0x0800c658

0800acd0 <__hi0bits>:
 800acd0:	0c03      	lsrs	r3, r0, #16
 800acd2:	041b      	lsls	r3, r3, #16
 800acd4:	b9d3      	cbnz	r3, 800ad0c <__hi0bits+0x3c>
 800acd6:	0400      	lsls	r0, r0, #16
 800acd8:	2310      	movs	r3, #16
 800acda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acde:	bf04      	itt	eq
 800ace0:	0200      	lsleq	r0, r0, #8
 800ace2:	3308      	addeq	r3, #8
 800ace4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ace8:	bf04      	itt	eq
 800acea:	0100      	lsleq	r0, r0, #4
 800acec:	3304      	addeq	r3, #4
 800acee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acf2:	bf04      	itt	eq
 800acf4:	0080      	lsleq	r0, r0, #2
 800acf6:	3302      	addeq	r3, #2
 800acf8:	2800      	cmp	r0, #0
 800acfa:	db05      	blt.n	800ad08 <__hi0bits+0x38>
 800acfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad00:	f103 0301 	add.w	r3, r3, #1
 800ad04:	bf08      	it	eq
 800ad06:	2320      	moveq	r3, #32
 800ad08:	4618      	mov	r0, r3
 800ad0a:	4770      	bx	lr
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e7e4      	b.n	800acda <__hi0bits+0xa>

0800ad10 <__lo0bits>:
 800ad10:	6803      	ldr	r3, [r0, #0]
 800ad12:	f013 0207 	ands.w	r2, r3, #7
 800ad16:	4601      	mov	r1, r0
 800ad18:	d00b      	beq.n	800ad32 <__lo0bits+0x22>
 800ad1a:	07da      	lsls	r2, r3, #31
 800ad1c:	d423      	bmi.n	800ad66 <__lo0bits+0x56>
 800ad1e:	0798      	lsls	r0, r3, #30
 800ad20:	bf49      	itett	mi
 800ad22:	085b      	lsrmi	r3, r3, #1
 800ad24:	089b      	lsrpl	r3, r3, #2
 800ad26:	2001      	movmi	r0, #1
 800ad28:	600b      	strmi	r3, [r1, #0]
 800ad2a:	bf5c      	itt	pl
 800ad2c:	600b      	strpl	r3, [r1, #0]
 800ad2e:	2002      	movpl	r0, #2
 800ad30:	4770      	bx	lr
 800ad32:	b298      	uxth	r0, r3
 800ad34:	b9a8      	cbnz	r0, 800ad62 <__lo0bits+0x52>
 800ad36:	0c1b      	lsrs	r3, r3, #16
 800ad38:	2010      	movs	r0, #16
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	b90a      	cbnz	r2, 800ad42 <__lo0bits+0x32>
 800ad3e:	3008      	adds	r0, #8
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	071a      	lsls	r2, r3, #28
 800ad44:	bf04      	itt	eq
 800ad46:	091b      	lsreq	r3, r3, #4
 800ad48:	3004      	addeq	r0, #4
 800ad4a:	079a      	lsls	r2, r3, #30
 800ad4c:	bf04      	itt	eq
 800ad4e:	089b      	lsreq	r3, r3, #2
 800ad50:	3002      	addeq	r0, #2
 800ad52:	07da      	lsls	r2, r3, #31
 800ad54:	d403      	bmi.n	800ad5e <__lo0bits+0x4e>
 800ad56:	085b      	lsrs	r3, r3, #1
 800ad58:	f100 0001 	add.w	r0, r0, #1
 800ad5c:	d005      	beq.n	800ad6a <__lo0bits+0x5a>
 800ad5e:	600b      	str	r3, [r1, #0]
 800ad60:	4770      	bx	lr
 800ad62:	4610      	mov	r0, r2
 800ad64:	e7e9      	b.n	800ad3a <__lo0bits+0x2a>
 800ad66:	2000      	movs	r0, #0
 800ad68:	4770      	bx	lr
 800ad6a:	2020      	movs	r0, #32
 800ad6c:	4770      	bx	lr
	...

0800ad70 <__i2b>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	460c      	mov	r4, r1
 800ad74:	2101      	movs	r1, #1
 800ad76:	f7ff feb9 	bl	800aaec <_Balloc>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	b928      	cbnz	r0, 800ad8a <__i2b+0x1a>
 800ad7e:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <__i2b+0x24>)
 800ad80:	4805      	ldr	r0, [pc, #20]	; (800ad98 <__i2b+0x28>)
 800ad82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad86:	f001 f86b 	bl	800be60 <__assert_func>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	6144      	str	r4, [r0, #20]
 800ad8e:	6103      	str	r3, [r0, #16]
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	bf00      	nop
 800ad94:	0800c568 	.word	0x0800c568
 800ad98:	0800c658 	.word	0x0800c658

0800ad9c <__multiply>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	4691      	mov	r9, r2
 800ada2:	690a      	ldr	r2, [r1, #16]
 800ada4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	bfb8      	it	lt
 800adac:	460b      	movlt	r3, r1
 800adae:	460c      	mov	r4, r1
 800adb0:	bfbc      	itt	lt
 800adb2:	464c      	movlt	r4, r9
 800adb4:	4699      	movlt	r9, r3
 800adb6:	6927      	ldr	r7, [r4, #16]
 800adb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adbc:	68a3      	ldr	r3, [r4, #8]
 800adbe:	6861      	ldr	r1, [r4, #4]
 800adc0:	eb07 060a 	add.w	r6, r7, sl
 800adc4:	42b3      	cmp	r3, r6
 800adc6:	b085      	sub	sp, #20
 800adc8:	bfb8      	it	lt
 800adca:	3101      	addlt	r1, #1
 800adcc:	f7ff fe8e 	bl	800aaec <_Balloc>
 800add0:	b930      	cbnz	r0, 800ade0 <__multiply+0x44>
 800add2:	4602      	mov	r2, r0
 800add4:	4b44      	ldr	r3, [pc, #272]	; (800aee8 <__multiply+0x14c>)
 800add6:	4845      	ldr	r0, [pc, #276]	; (800aeec <__multiply+0x150>)
 800add8:	f240 115d 	movw	r1, #349	; 0x15d
 800addc:	f001 f840 	bl	800be60 <__assert_func>
 800ade0:	f100 0514 	add.w	r5, r0, #20
 800ade4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ade8:	462b      	mov	r3, r5
 800adea:	2200      	movs	r2, #0
 800adec:	4543      	cmp	r3, r8
 800adee:	d321      	bcc.n	800ae34 <__multiply+0x98>
 800adf0:	f104 0314 	add.w	r3, r4, #20
 800adf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adf8:	f109 0314 	add.w	r3, r9, #20
 800adfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae00:	9202      	str	r2, [sp, #8]
 800ae02:	1b3a      	subs	r2, r7, r4
 800ae04:	3a15      	subs	r2, #21
 800ae06:	f022 0203 	bic.w	r2, r2, #3
 800ae0a:	3204      	adds	r2, #4
 800ae0c:	f104 0115 	add.w	r1, r4, #21
 800ae10:	428f      	cmp	r7, r1
 800ae12:	bf38      	it	cc
 800ae14:	2204      	movcc	r2, #4
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	9a02      	ldr	r2, [sp, #8]
 800ae1a:	9303      	str	r3, [sp, #12]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d80c      	bhi.n	800ae3a <__multiply+0x9e>
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	dd03      	ble.n	800ae2c <__multiply+0x90>
 800ae24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d05a      	beq.n	800aee2 <__multiply+0x146>
 800ae2c:	6106      	str	r6, [r0, #16]
 800ae2e:	b005      	add	sp, #20
 800ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	f843 2b04 	str.w	r2, [r3], #4
 800ae38:	e7d8      	b.n	800adec <__multiply+0x50>
 800ae3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae3e:	f1ba 0f00 	cmp.w	sl, #0
 800ae42:	d024      	beq.n	800ae8e <__multiply+0xf2>
 800ae44:	f104 0e14 	add.w	lr, r4, #20
 800ae48:	46a9      	mov	r9, r5
 800ae4a:	f04f 0c00 	mov.w	ip, #0
 800ae4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae52:	f8d9 1000 	ldr.w	r1, [r9]
 800ae56:	fa1f fb82 	uxth.w	fp, r2
 800ae5a:	b289      	uxth	r1, r1
 800ae5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae64:	f8d9 2000 	ldr.w	r2, [r9]
 800ae68:	4461      	add	r1, ip
 800ae6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae76:	b289      	uxth	r1, r1
 800ae78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae7c:	4577      	cmp	r7, lr
 800ae7e:	f849 1b04 	str.w	r1, [r9], #4
 800ae82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae86:	d8e2      	bhi.n	800ae4e <__multiply+0xb2>
 800ae88:	9a01      	ldr	r2, [sp, #4]
 800ae8a:	f845 c002 	str.w	ip, [r5, r2]
 800ae8e:	9a03      	ldr	r2, [sp, #12]
 800ae90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae94:	3304      	adds	r3, #4
 800ae96:	f1b9 0f00 	cmp.w	r9, #0
 800ae9a:	d020      	beq.n	800aede <__multiply+0x142>
 800ae9c:	6829      	ldr	r1, [r5, #0]
 800ae9e:	f104 0c14 	add.w	ip, r4, #20
 800aea2:	46ae      	mov	lr, r5
 800aea4:	f04f 0a00 	mov.w	sl, #0
 800aea8:	f8bc b000 	ldrh.w	fp, [ip]
 800aeac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aeb0:	fb09 220b 	mla	r2, r9, fp, r2
 800aeb4:	4492      	add	sl, r2
 800aeb6:	b289      	uxth	r1, r1
 800aeb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aebc:	f84e 1b04 	str.w	r1, [lr], #4
 800aec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aec4:	f8be 1000 	ldrh.w	r1, [lr]
 800aec8:	0c12      	lsrs	r2, r2, #16
 800aeca:	fb09 1102 	mla	r1, r9, r2, r1
 800aece:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aed2:	4567      	cmp	r7, ip
 800aed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aed8:	d8e6      	bhi.n	800aea8 <__multiply+0x10c>
 800aeda:	9a01      	ldr	r2, [sp, #4]
 800aedc:	50a9      	str	r1, [r5, r2]
 800aede:	3504      	adds	r5, #4
 800aee0:	e79a      	b.n	800ae18 <__multiply+0x7c>
 800aee2:	3e01      	subs	r6, #1
 800aee4:	e79c      	b.n	800ae20 <__multiply+0x84>
 800aee6:	bf00      	nop
 800aee8:	0800c568 	.word	0x0800c568
 800aeec:	0800c658 	.word	0x0800c658

0800aef0 <__pow5mult>:
 800aef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aef4:	4615      	mov	r5, r2
 800aef6:	f012 0203 	ands.w	r2, r2, #3
 800aefa:	4606      	mov	r6, r0
 800aefc:	460f      	mov	r7, r1
 800aefe:	d007      	beq.n	800af10 <__pow5mult+0x20>
 800af00:	4c25      	ldr	r4, [pc, #148]	; (800af98 <__pow5mult+0xa8>)
 800af02:	3a01      	subs	r2, #1
 800af04:	2300      	movs	r3, #0
 800af06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af0a:	f7ff fe51 	bl	800abb0 <__multadd>
 800af0e:	4607      	mov	r7, r0
 800af10:	10ad      	asrs	r5, r5, #2
 800af12:	d03d      	beq.n	800af90 <__pow5mult+0xa0>
 800af14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af16:	b97c      	cbnz	r4, 800af38 <__pow5mult+0x48>
 800af18:	2010      	movs	r0, #16
 800af1a:	f7ff fdbf 	bl	800aa9c <malloc>
 800af1e:	4602      	mov	r2, r0
 800af20:	6270      	str	r0, [r6, #36]	; 0x24
 800af22:	b928      	cbnz	r0, 800af30 <__pow5mult+0x40>
 800af24:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <__pow5mult+0xac>)
 800af26:	481e      	ldr	r0, [pc, #120]	; (800afa0 <__pow5mult+0xb0>)
 800af28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af2c:	f000 ff98 	bl	800be60 <__assert_func>
 800af30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af34:	6004      	str	r4, [r0, #0]
 800af36:	60c4      	str	r4, [r0, #12]
 800af38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af40:	b94c      	cbnz	r4, 800af56 <__pow5mult+0x66>
 800af42:	f240 2171 	movw	r1, #625	; 0x271
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ff12 	bl	800ad70 <__i2b>
 800af4c:	2300      	movs	r3, #0
 800af4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af52:	4604      	mov	r4, r0
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	f04f 0900 	mov.w	r9, #0
 800af5a:	07eb      	lsls	r3, r5, #31
 800af5c:	d50a      	bpl.n	800af74 <__pow5mult+0x84>
 800af5e:	4639      	mov	r1, r7
 800af60:	4622      	mov	r2, r4
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff ff1a 	bl	800ad9c <__multiply>
 800af68:	4639      	mov	r1, r7
 800af6a:	4680      	mov	r8, r0
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff fdfd 	bl	800ab6c <_Bfree>
 800af72:	4647      	mov	r7, r8
 800af74:	106d      	asrs	r5, r5, #1
 800af76:	d00b      	beq.n	800af90 <__pow5mult+0xa0>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	b938      	cbnz	r0, 800af8c <__pow5mult+0x9c>
 800af7c:	4622      	mov	r2, r4
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff ff0b 	bl	800ad9c <__multiply>
 800af86:	6020      	str	r0, [r4, #0]
 800af88:	f8c0 9000 	str.w	r9, [r0]
 800af8c:	4604      	mov	r4, r0
 800af8e:	e7e4      	b.n	800af5a <__pow5mult+0x6a>
 800af90:	4638      	mov	r0, r7
 800af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af96:	bf00      	nop
 800af98:	0800c7a8 	.word	0x0800c7a8
 800af9c:	0800c4f6 	.word	0x0800c4f6
 800afa0:	0800c658 	.word	0x0800c658

0800afa4 <__lshift>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	460c      	mov	r4, r1
 800afaa:	6849      	ldr	r1, [r1, #4]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afb2:	68a3      	ldr	r3, [r4, #8]
 800afb4:	4607      	mov	r7, r0
 800afb6:	4691      	mov	r9, r2
 800afb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afbc:	f108 0601 	add.w	r6, r8, #1
 800afc0:	42b3      	cmp	r3, r6
 800afc2:	db0b      	blt.n	800afdc <__lshift+0x38>
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff fd91 	bl	800aaec <_Balloc>
 800afca:	4605      	mov	r5, r0
 800afcc:	b948      	cbnz	r0, 800afe2 <__lshift+0x3e>
 800afce:	4602      	mov	r2, r0
 800afd0:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <__lshift+0xd8>)
 800afd2:	482b      	ldr	r0, [pc, #172]	; (800b080 <__lshift+0xdc>)
 800afd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afd8:	f000 ff42 	bl	800be60 <__assert_func>
 800afdc:	3101      	adds	r1, #1
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	e7ee      	b.n	800afc0 <__lshift+0x1c>
 800afe2:	2300      	movs	r3, #0
 800afe4:	f100 0114 	add.w	r1, r0, #20
 800afe8:	f100 0210 	add.w	r2, r0, #16
 800afec:	4618      	mov	r0, r3
 800afee:	4553      	cmp	r3, sl
 800aff0:	db37      	blt.n	800b062 <__lshift+0xbe>
 800aff2:	6920      	ldr	r0, [r4, #16]
 800aff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aff8:	f104 0314 	add.w	r3, r4, #20
 800affc:	f019 091f 	ands.w	r9, r9, #31
 800b000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b008:	d02f      	beq.n	800b06a <__lshift+0xc6>
 800b00a:	f1c9 0e20 	rsb	lr, r9, #32
 800b00e:	468a      	mov	sl, r1
 800b010:	f04f 0c00 	mov.w	ip, #0
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	fa02 f209 	lsl.w	r2, r2, r9
 800b01a:	ea42 020c 	orr.w	r2, r2, ip
 800b01e:	f84a 2b04 	str.w	r2, [sl], #4
 800b022:	f853 2b04 	ldr.w	r2, [r3], #4
 800b026:	4298      	cmp	r0, r3
 800b028:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b02c:	d8f2      	bhi.n	800b014 <__lshift+0x70>
 800b02e:	1b03      	subs	r3, r0, r4
 800b030:	3b15      	subs	r3, #21
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	3304      	adds	r3, #4
 800b038:	f104 0215 	add.w	r2, r4, #21
 800b03c:	4290      	cmp	r0, r2
 800b03e:	bf38      	it	cc
 800b040:	2304      	movcc	r3, #4
 800b042:	f841 c003 	str.w	ip, [r1, r3]
 800b046:	f1bc 0f00 	cmp.w	ip, #0
 800b04a:	d001      	beq.n	800b050 <__lshift+0xac>
 800b04c:	f108 0602 	add.w	r6, r8, #2
 800b050:	3e01      	subs	r6, #1
 800b052:	4638      	mov	r0, r7
 800b054:	612e      	str	r6, [r5, #16]
 800b056:	4621      	mov	r1, r4
 800b058:	f7ff fd88 	bl	800ab6c <_Bfree>
 800b05c:	4628      	mov	r0, r5
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	f842 0f04 	str.w	r0, [r2, #4]!
 800b066:	3301      	adds	r3, #1
 800b068:	e7c1      	b.n	800afee <__lshift+0x4a>
 800b06a:	3904      	subs	r1, #4
 800b06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b070:	f841 2f04 	str.w	r2, [r1, #4]!
 800b074:	4298      	cmp	r0, r3
 800b076:	d8f9      	bhi.n	800b06c <__lshift+0xc8>
 800b078:	e7ea      	b.n	800b050 <__lshift+0xac>
 800b07a:	bf00      	nop
 800b07c:	0800c568 	.word	0x0800c568
 800b080:	0800c658 	.word	0x0800c658

0800b084 <__mcmp>:
 800b084:	b530      	push	{r4, r5, lr}
 800b086:	6902      	ldr	r2, [r0, #16]
 800b088:	690c      	ldr	r4, [r1, #16]
 800b08a:	1b12      	subs	r2, r2, r4
 800b08c:	d10e      	bne.n	800b0ac <__mcmp+0x28>
 800b08e:	f100 0314 	add.w	r3, r0, #20
 800b092:	3114      	adds	r1, #20
 800b094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b09c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0a4:	42a5      	cmp	r5, r4
 800b0a6:	d003      	beq.n	800b0b0 <__mcmp+0x2c>
 800b0a8:	d305      	bcc.n	800b0b6 <__mcmp+0x32>
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	bd30      	pop	{r4, r5, pc}
 800b0b0:	4283      	cmp	r3, r0
 800b0b2:	d3f3      	bcc.n	800b09c <__mcmp+0x18>
 800b0b4:	e7fa      	b.n	800b0ac <__mcmp+0x28>
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ba:	e7f7      	b.n	800b0ac <__mcmp+0x28>

0800b0bc <__mdiff>:
 800b0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4690      	mov	r8, r2
 800b0ca:	f7ff ffdb 	bl	800b084 <__mcmp>
 800b0ce:	1e05      	subs	r5, r0, #0
 800b0d0:	d110      	bne.n	800b0f4 <__mdiff+0x38>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff fd09 	bl	800aaec <_Balloc>
 800b0da:	b930      	cbnz	r0, 800b0ea <__mdiff+0x2e>
 800b0dc:	4b3a      	ldr	r3, [pc, #232]	; (800b1c8 <__mdiff+0x10c>)
 800b0de:	4602      	mov	r2, r0
 800b0e0:	f240 2132 	movw	r1, #562	; 0x232
 800b0e4:	4839      	ldr	r0, [pc, #228]	; (800b1cc <__mdiff+0x110>)
 800b0e6:	f000 febb 	bl	800be60 <__assert_func>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f4:	bfa4      	itt	ge
 800b0f6:	4643      	movge	r3, r8
 800b0f8:	46a0      	movge	r8, r4
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b100:	bfa6      	itte	ge
 800b102:	461c      	movge	r4, r3
 800b104:	2500      	movge	r5, #0
 800b106:	2501      	movlt	r5, #1
 800b108:	f7ff fcf0 	bl	800aaec <_Balloc>
 800b10c:	b920      	cbnz	r0, 800b118 <__mdiff+0x5c>
 800b10e:	4b2e      	ldr	r3, [pc, #184]	; (800b1c8 <__mdiff+0x10c>)
 800b110:	4602      	mov	r2, r0
 800b112:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b116:	e7e5      	b.n	800b0e4 <__mdiff+0x28>
 800b118:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b11c:	6926      	ldr	r6, [r4, #16]
 800b11e:	60c5      	str	r5, [r0, #12]
 800b120:	f104 0914 	add.w	r9, r4, #20
 800b124:	f108 0514 	add.w	r5, r8, #20
 800b128:	f100 0e14 	add.w	lr, r0, #20
 800b12c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b134:	f108 0210 	add.w	r2, r8, #16
 800b138:	46f2      	mov	sl, lr
 800b13a:	2100      	movs	r1, #0
 800b13c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b144:	fa1f f883 	uxth.w	r8, r3
 800b148:	fa11 f18b 	uxtah	r1, r1, fp
 800b14c:	0c1b      	lsrs	r3, r3, #16
 800b14e:	eba1 0808 	sub.w	r8, r1, r8
 800b152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b156:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b15a:	fa1f f888 	uxth.w	r8, r8
 800b15e:	1419      	asrs	r1, r3, #16
 800b160:	454e      	cmp	r6, r9
 800b162:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b166:	f84a 3b04 	str.w	r3, [sl], #4
 800b16a:	d8e7      	bhi.n	800b13c <__mdiff+0x80>
 800b16c:	1b33      	subs	r3, r6, r4
 800b16e:	3b15      	subs	r3, #21
 800b170:	f023 0303 	bic.w	r3, r3, #3
 800b174:	3304      	adds	r3, #4
 800b176:	3415      	adds	r4, #21
 800b178:	42a6      	cmp	r6, r4
 800b17a:	bf38      	it	cc
 800b17c:	2304      	movcc	r3, #4
 800b17e:	441d      	add	r5, r3
 800b180:	4473      	add	r3, lr
 800b182:	469e      	mov	lr, r3
 800b184:	462e      	mov	r6, r5
 800b186:	4566      	cmp	r6, ip
 800b188:	d30e      	bcc.n	800b1a8 <__mdiff+0xec>
 800b18a:	f10c 0203 	add.w	r2, ip, #3
 800b18e:	1b52      	subs	r2, r2, r5
 800b190:	f022 0203 	bic.w	r2, r2, #3
 800b194:	3d03      	subs	r5, #3
 800b196:	45ac      	cmp	ip, r5
 800b198:	bf38      	it	cc
 800b19a:	2200      	movcc	r2, #0
 800b19c:	441a      	add	r2, r3
 800b19e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1a2:	b17b      	cbz	r3, 800b1c4 <__mdiff+0x108>
 800b1a4:	6107      	str	r7, [r0, #16]
 800b1a6:	e7a3      	b.n	800b0f0 <__mdiff+0x34>
 800b1a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1ac:	fa11 f288 	uxtah	r2, r1, r8
 800b1b0:	1414      	asrs	r4, r2, #16
 800b1b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1b6:	b292      	uxth	r2, r2
 800b1b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1bc:	f84e 2b04 	str.w	r2, [lr], #4
 800b1c0:	1421      	asrs	r1, r4, #16
 800b1c2:	e7e0      	b.n	800b186 <__mdiff+0xca>
 800b1c4:	3f01      	subs	r7, #1
 800b1c6:	e7ea      	b.n	800b19e <__mdiff+0xe2>
 800b1c8:	0800c568 	.word	0x0800c568
 800b1cc:	0800c658 	.word	0x0800c658

0800b1d0 <__ulp>:
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	ed8d 0b00 	vstr	d0, [sp]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	4912      	ldr	r1, [pc, #72]	; (800b224 <__ulp+0x54>)
 800b1da:	4019      	ands	r1, r3
 800b1dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	dd05      	ble.n	800b1f0 <__ulp+0x20>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	ec43 2b10 	vmov	d0, r2, r3
 800b1ec:	b002      	add	sp, #8
 800b1ee:	4770      	bx	lr
 800b1f0:	4249      	negs	r1, r1
 800b1f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b1f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	f04f 0300 	mov.w	r3, #0
 800b202:	da04      	bge.n	800b20e <__ulp+0x3e>
 800b204:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b208:	fa41 f300 	asr.w	r3, r1, r0
 800b20c:	e7ec      	b.n	800b1e8 <__ulp+0x18>
 800b20e:	f1a0 0114 	sub.w	r1, r0, #20
 800b212:	291e      	cmp	r1, #30
 800b214:	bfda      	itte	le
 800b216:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b21a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b21e:	2101      	movgt	r1, #1
 800b220:	460a      	mov	r2, r1
 800b222:	e7e1      	b.n	800b1e8 <__ulp+0x18>
 800b224:	7ff00000 	.word	0x7ff00000

0800b228 <__b2d>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	6905      	ldr	r5, [r0, #16]
 800b22c:	f100 0714 	add.w	r7, r0, #20
 800b230:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b234:	1f2e      	subs	r6, r5, #4
 800b236:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff fd48 	bl	800acd0 <__hi0bits>
 800b240:	f1c0 0320 	rsb	r3, r0, #32
 800b244:	280a      	cmp	r0, #10
 800b246:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2c4 <__b2d+0x9c>
 800b24a:	600b      	str	r3, [r1, #0]
 800b24c:	dc14      	bgt.n	800b278 <__b2d+0x50>
 800b24e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b252:	fa24 f10e 	lsr.w	r1, r4, lr
 800b256:	42b7      	cmp	r7, r6
 800b258:	ea41 030c 	orr.w	r3, r1, ip
 800b25c:	bf34      	ite	cc
 800b25e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b262:	2100      	movcs	r1, #0
 800b264:	3015      	adds	r0, #21
 800b266:	fa04 f000 	lsl.w	r0, r4, r0
 800b26a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b26e:	ea40 0201 	orr.w	r2, r0, r1
 800b272:	ec43 2b10 	vmov	d0, r2, r3
 800b276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b278:	42b7      	cmp	r7, r6
 800b27a:	bf3a      	itte	cc
 800b27c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b280:	f1a5 0608 	subcc.w	r6, r5, #8
 800b284:	2100      	movcs	r1, #0
 800b286:	380b      	subs	r0, #11
 800b288:	d017      	beq.n	800b2ba <__b2d+0x92>
 800b28a:	f1c0 0c20 	rsb	ip, r0, #32
 800b28e:	fa04 f500 	lsl.w	r5, r4, r0
 800b292:	42be      	cmp	r6, r7
 800b294:	fa21 f40c 	lsr.w	r4, r1, ip
 800b298:	ea45 0504 	orr.w	r5, r5, r4
 800b29c:	bf8c      	ite	hi
 800b29e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2a2:	2400      	movls	r4, #0
 800b2a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2a8:	fa01 f000 	lsl.w	r0, r1, r0
 800b2ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2b4:	ea40 0204 	orr.w	r2, r0, r4
 800b2b8:	e7db      	b.n	800b272 <__b2d+0x4a>
 800b2ba:	ea44 030c 	orr.w	r3, r4, ip
 800b2be:	460a      	mov	r2, r1
 800b2c0:	e7d7      	b.n	800b272 <__b2d+0x4a>
 800b2c2:	bf00      	nop
 800b2c4:	3ff00000 	.word	0x3ff00000

0800b2c8 <__d2b>:
 800b2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	ec57 6b10 	vmov	r6, r7, d0
 800b2d4:	4690      	mov	r8, r2
 800b2d6:	f7ff fc09 	bl	800aaec <_Balloc>
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b930      	cbnz	r0, 800b2ec <__d2b+0x24>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	4b25      	ldr	r3, [pc, #148]	; (800b378 <__d2b+0xb0>)
 800b2e2:	4826      	ldr	r0, [pc, #152]	; (800b37c <__d2b+0xb4>)
 800b2e4:	f240 310a 	movw	r1, #778	; 0x30a
 800b2e8:	f000 fdba 	bl	800be60 <__assert_func>
 800b2ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2f4:	bb35      	cbnz	r5, 800b344 <__d2b+0x7c>
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	9301      	str	r3, [sp, #4]
 800b2fa:	d028      	beq.n	800b34e <__d2b+0x86>
 800b2fc:	4668      	mov	r0, sp
 800b2fe:	9600      	str	r6, [sp, #0]
 800b300:	f7ff fd06 	bl	800ad10 <__lo0bits>
 800b304:	9900      	ldr	r1, [sp, #0]
 800b306:	b300      	cbz	r0, 800b34a <__d2b+0x82>
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	f1c0 0320 	rsb	r3, r0, #32
 800b30e:	fa02 f303 	lsl.w	r3, r2, r3
 800b312:	430b      	orrs	r3, r1
 800b314:	40c2      	lsrs	r2, r0
 800b316:	6163      	str	r3, [r4, #20]
 800b318:	9201      	str	r2, [sp, #4]
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	61a3      	str	r3, [r4, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bf14      	ite	ne
 800b322:	2202      	movne	r2, #2
 800b324:	2201      	moveq	r2, #1
 800b326:	6122      	str	r2, [r4, #16]
 800b328:	b1d5      	cbz	r5, 800b360 <__d2b+0x98>
 800b32a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b32e:	4405      	add	r5, r0
 800b330:	f8c9 5000 	str.w	r5, [r9]
 800b334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b338:	f8c8 0000 	str.w	r0, [r8]
 800b33c:	4620      	mov	r0, r4
 800b33e:	b003      	add	sp, #12
 800b340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b348:	e7d5      	b.n	800b2f6 <__d2b+0x2e>
 800b34a:	6161      	str	r1, [r4, #20]
 800b34c:	e7e5      	b.n	800b31a <__d2b+0x52>
 800b34e:	a801      	add	r0, sp, #4
 800b350:	f7ff fcde 	bl	800ad10 <__lo0bits>
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	2201      	movs	r2, #1
 800b35a:	6122      	str	r2, [r4, #16]
 800b35c:	3020      	adds	r0, #32
 800b35e:	e7e3      	b.n	800b328 <__d2b+0x60>
 800b360:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b364:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b368:	f8c9 0000 	str.w	r0, [r9]
 800b36c:	6918      	ldr	r0, [r3, #16]
 800b36e:	f7ff fcaf 	bl	800acd0 <__hi0bits>
 800b372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b376:	e7df      	b.n	800b338 <__d2b+0x70>
 800b378:	0800c568 	.word	0x0800c568
 800b37c:	0800c658 	.word	0x0800c658

0800b380 <__ratio>:
 800b380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	4688      	mov	r8, r1
 800b386:	4669      	mov	r1, sp
 800b388:	4681      	mov	r9, r0
 800b38a:	f7ff ff4d 	bl	800b228 <__b2d>
 800b38e:	a901      	add	r1, sp, #4
 800b390:	4640      	mov	r0, r8
 800b392:	ec55 4b10 	vmov	r4, r5, d0
 800b396:	ee10 aa10 	vmov	sl, s0
 800b39a:	f7ff ff45 	bl	800b228 <__b2d>
 800b39e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b3a6:	1a59      	subs	r1, r3, r1
 800b3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b3b2:	ec57 6b10 	vmov	r6, r7, d0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	bfd6      	itet	le
 800b3ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3be:	462a      	movgt	r2, r5
 800b3c0:	463a      	movle	r2, r7
 800b3c2:	46ab      	mov	fp, r5
 800b3c4:	bfd6      	itet	le
 800b3c6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b3ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b3ce:	ee00 3a90 	vmovle	s1, r3
 800b3d2:	ec4b ab17 	vmov	d7, sl, fp
 800b3d6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b3da:	b003      	add	sp, #12
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3e0 <__copybits>:
 800b3e0:	3901      	subs	r1, #1
 800b3e2:	b570      	push	{r4, r5, r6, lr}
 800b3e4:	1149      	asrs	r1, r1, #5
 800b3e6:	6914      	ldr	r4, [r2, #16]
 800b3e8:	3101      	adds	r1, #1
 800b3ea:	f102 0314 	add.w	r3, r2, #20
 800b3ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3f6:	1f05      	subs	r5, r0, #4
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	d30c      	bcc.n	800b416 <__copybits+0x36>
 800b3fc:	1aa3      	subs	r3, r4, r2
 800b3fe:	3b11      	subs	r3, #17
 800b400:	f023 0303 	bic.w	r3, r3, #3
 800b404:	3211      	adds	r2, #17
 800b406:	42a2      	cmp	r2, r4
 800b408:	bf88      	it	hi
 800b40a:	2300      	movhi	r3, #0
 800b40c:	4418      	add	r0, r3
 800b40e:	2300      	movs	r3, #0
 800b410:	4288      	cmp	r0, r1
 800b412:	d305      	bcc.n	800b420 <__copybits+0x40>
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	f853 6b04 	ldr.w	r6, [r3], #4
 800b41a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b41e:	e7eb      	b.n	800b3f8 <__copybits+0x18>
 800b420:	f840 3b04 	str.w	r3, [r0], #4
 800b424:	e7f4      	b.n	800b410 <__copybits+0x30>

0800b426 <__any_on>:
 800b426:	f100 0214 	add.w	r2, r0, #20
 800b42a:	6900      	ldr	r0, [r0, #16]
 800b42c:	114b      	asrs	r3, r1, #5
 800b42e:	4298      	cmp	r0, r3
 800b430:	b510      	push	{r4, lr}
 800b432:	db11      	blt.n	800b458 <__any_on+0x32>
 800b434:	dd0a      	ble.n	800b44c <__any_on+0x26>
 800b436:	f011 011f 	ands.w	r1, r1, #31
 800b43a:	d007      	beq.n	800b44c <__any_on+0x26>
 800b43c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b440:	fa24 f001 	lsr.w	r0, r4, r1
 800b444:	fa00 f101 	lsl.w	r1, r0, r1
 800b448:	428c      	cmp	r4, r1
 800b44a:	d10b      	bne.n	800b464 <__any_on+0x3e>
 800b44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b450:	4293      	cmp	r3, r2
 800b452:	d803      	bhi.n	800b45c <__any_on+0x36>
 800b454:	2000      	movs	r0, #0
 800b456:	bd10      	pop	{r4, pc}
 800b458:	4603      	mov	r3, r0
 800b45a:	e7f7      	b.n	800b44c <__any_on+0x26>
 800b45c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b460:	2900      	cmp	r1, #0
 800b462:	d0f5      	beq.n	800b450 <__any_on+0x2a>
 800b464:	2001      	movs	r0, #1
 800b466:	e7f6      	b.n	800b456 <__any_on+0x30>

0800b468 <_calloc_r>:
 800b468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b46a:	fba1 2402 	umull	r2, r4, r1, r2
 800b46e:	b94c      	cbnz	r4, 800b484 <_calloc_r+0x1c>
 800b470:	4611      	mov	r1, r2
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	f000 f87a 	bl	800b56c <_malloc_r>
 800b478:	9a01      	ldr	r2, [sp, #4]
 800b47a:	4605      	mov	r5, r0
 800b47c:	b930      	cbnz	r0, 800b48c <_calloc_r+0x24>
 800b47e:	4628      	mov	r0, r5
 800b480:	b003      	add	sp, #12
 800b482:	bd30      	pop	{r4, r5, pc}
 800b484:	220c      	movs	r2, #12
 800b486:	6002      	str	r2, [r0, #0]
 800b488:	2500      	movs	r5, #0
 800b48a:	e7f8      	b.n	800b47e <_calloc_r+0x16>
 800b48c:	4621      	mov	r1, r4
 800b48e:	f7fc fbb5 	bl	8007bfc <memset>
 800b492:	e7f4      	b.n	800b47e <_calloc_r+0x16>

0800b494 <_free_r>:
 800b494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b496:	2900      	cmp	r1, #0
 800b498:	d044      	beq.n	800b524 <_free_r+0x90>
 800b49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b49e:	9001      	str	r0, [sp, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4a6:	bfb8      	it	lt
 800b4a8:	18e4      	addlt	r4, r4, r3
 800b4aa:	f000 fe6d 	bl	800c188 <__malloc_lock>
 800b4ae:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <_free_r+0x94>)
 800b4b0:	9801      	ldr	r0, [sp, #4]
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	b933      	cbnz	r3, 800b4c4 <_free_r+0x30>
 800b4b6:	6063      	str	r3, [r4, #4]
 800b4b8:	6014      	str	r4, [r2, #0]
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c0:	f000 be68 	b.w	800c194 <__malloc_unlock>
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d908      	bls.n	800b4da <_free_r+0x46>
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	1961      	adds	r1, r4, r5
 800b4cc:	428b      	cmp	r3, r1
 800b4ce:	bf01      	itttt	eq
 800b4d0:	6819      	ldreq	r1, [r3, #0]
 800b4d2:	685b      	ldreq	r3, [r3, #4]
 800b4d4:	1949      	addeq	r1, r1, r5
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	e7ed      	b.n	800b4b6 <_free_r+0x22>
 800b4da:	461a      	mov	r2, r3
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	b10b      	cbz	r3, 800b4e4 <_free_r+0x50>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d9fa      	bls.n	800b4da <_free_r+0x46>
 800b4e4:	6811      	ldr	r1, [r2, #0]
 800b4e6:	1855      	adds	r5, r2, r1
 800b4e8:	42a5      	cmp	r5, r4
 800b4ea:	d10b      	bne.n	800b504 <_free_r+0x70>
 800b4ec:	6824      	ldr	r4, [r4, #0]
 800b4ee:	4421      	add	r1, r4
 800b4f0:	1854      	adds	r4, r2, r1
 800b4f2:	42a3      	cmp	r3, r4
 800b4f4:	6011      	str	r1, [r2, #0]
 800b4f6:	d1e0      	bne.n	800b4ba <_free_r+0x26>
 800b4f8:	681c      	ldr	r4, [r3, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	6053      	str	r3, [r2, #4]
 800b4fe:	4421      	add	r1, r4
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	e7da      	b.n	800b4ba <_free_r+0x26>
 800b504:	d902      	bls.n	800b50c <_free_r+0x78>
 800b506:	230c      	movs	r3, #12
 800b508:	6003      	str	r3, [r0, #0]
 800b50a:	e7d6      	b.n	800b4ba <_free_r+0x26>
 800b50c:	6825      	ldr	r5, [r4, #0]
 800b50e:	1961      	adds	r1, r4, r5
 800b510:	428b      	cmp	r3, r1
 800b512:	bf04      	itt	eq
 800b514:	6819      	ldreq	r1, [r3, #0]
 800b516:	685b      	ldreq	r3, [r3, #4]
 800b518:	6063      	str	r3, [r4, #4]
 800b51a:	bf04      	itt	eq
 800b51c:	1949      	addeq	r1, r1, r5
 800b51e:	6021      	streq	r1, [r4, #0]
 800b520:	6054      	str	r4, [r2, #4]
 800b522:	e7ca      	b.n	800b4ba <_free_r+0x26>
 800b524:	b003      	add	sp, #12
 800b526:	bd30      	pop	{r4, r5, pc}
 800b528:	200006ec 	.word	0x200006ec

0800b52c <sbrk_aligned>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4e0e      	ldr	r6, [pc, #56]	; (800b568 <sbrk_aligned+0x3c>)
 800b530:	460c      	mov	r4, r1
 800b532:	6831      	ldr	r1, [r6, #0]
 800b534:	4605      	mov	r5, r0
 800b536:	b911      	cbnz	r1, 800b53e <sbrk_aligned+0x12>
 800b538:	f000 fb4a 	bl	800bbd0 <_sbrk_r>
 800b53c:	6030      	str	r0, [r6, #0]
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f000 fb45 	bl	800bbd0 <_sbrk_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d00a      	beq.n	800b560 <sbrk_aligned+0x34>
 800b54a:	1cc4      	adds	r4, r0, #3
 800b54c:	f024 0403 	bic.w	r4, r4, #3
 800b550:	42a0      	cmp	r0, r4
 800b552:	d007      	beq.n	800b564 <sbrk_aligned+0x38>
 800b554:	1a21      	subs	r1, r4, r0
 800b556:	4628      	mov	r0, r5
 800b558:	f000 fb3a 	bl	800bbd0 <_sbrk_r>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d101      	bne.n	800b564 <sbrk_aligned+0x38>
 800b560:	f04f 34ff 	mov.w	r4, #4294967295
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	200006f0 	.word	0x200006f0

0800b56c <_malloc_r>:
 800b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	1ccd      	adds	r5, r1, #3
 800b572:	f025 0503 	bic.w	r5, r5, #3
 800b576:	3508      	adds	r5, #8
 800b578:	2d0c      	cmp	r5, #12
 800b57a:	bf38      	it	cc
 800b57c:	250c      	movcc	r5, #12
 800b57e:	2d00      	cmp	r5, #0
 800b580:	4607      	mov	r7, r0
 800b582:	db01      	blt.n	800b588 <_malloc_r+0x1c>
 800b584:	42a9      	cmp	r1, r5
 800b586:	d905      	bls.n	800b594 <_malloc_r+0x28>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	2600      	movs	r6, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b594:	4e2e      	ldr	r6, [pc, #184]	; (800b650 <_malloc_r+0xe4>)
 800b596:	f000 fdf7 	bl	800c188 <__malloc_lock>
 800b59a:	6833      	ldr	r3, [r6, #0]
 800b59c:	461c      	mov	r4, r3
 800b59e:	bb34      	cbnz	r4, 800b5ee <_malloc_r+0x82>
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7ff ffc2 	bl	800b52c <sbrk_aligned>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	d14d      	bne.n	800b64a <_malloc_r+0xde>
 800b5ae:	6834      	ldr	r4, [r6, #0]
 800b5b0:	4626      	mov	r6, r4
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d140      	bne.n	800b638 <_malloc_r+0xcc>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	eb04 0803 	add.w	r8, r4, r3
 800b5c0:	f000 fb06 	bl	800bbd0 <_sbrk_r>
 800b5c4:	4580      	cmp	r8, r0
 800b5c6:	d13a      	bne.n	800b63e <_malloc_r+0xd2>
 800b5c8:	6821      	ldr	r1, [r4, #0]
 800b5ca:	3503      	adds	r5, #3
 800b5cc:	1a6d      	subs	r5, r5, r1
 800b5ce:	f025 0503 	bic.w	r5, r5, #3
 800b5d2:	3508      	adds	r5, #8
 800b5d4:	2d0c      	cmp	r5, #12
 800b5d6:	bf38      	it	cc
 800b5d8:	250c      	movcc	r5, #12
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f7ff ffa5 	bl	800b52c <sbrk_aligned>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d02b      	beq.n	800b63e <_malloc_r+0xd2>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	442b      	add	r3, r5
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	e00e      	b.n	800b60c <_malloc_r+0xa0>
 800b5ee:	6822      	ldr	r2, [r4, #0]
 800b5f0:	1b52      	subs	r2, r2, r5
 800b5f2:	d41e      	bmi.n	800b632 <_malloc_r+0xc6>
 800b5f4:	2a0b      	cmp	r2, #11
 800b5f6:	d916      	bls.n	800b626 <_malloc_r+0xba>
 800b5f8:	1961      	adds	r1, r4, r5
 800b5fa:	42a3      	cmp	r3, r4
 800b5fc:	6025      	str	r5, [r4, #0]
 800b5fe:	bf18      	it	ne
 800b600:	6059      	strne	r1, [r3, #4]
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	bf08      	it	eq
 800b606:	6031      	streq	r1, [r6, #0]
 800b608:	5162      	str	r2, [r4, r5]
 800b60a:	604b      	str	r3, [r1, #4]
 800b60c:	4638      	mov	r0, r7
 800b60e:	f104 060b 	add.w	r6, r4, #11
 800b612:	f000 fdbf 	bl	800c194 <__malloc_unlock>
 800b616:	f026 0607 	bic.w	r6, r6, #7
 800b61a:	1d23      	adds	r3, r4, #4
 800b61c:	1af2      	subs	r2, r6, r3
 800b61e:	d0b6      	beq.n	800b58e <_malloc_r+0x22>
 800b620:	1b9b      	subs	r3, r3, r6
 800b622:	50a3      	str	r3, [r4, r2]
 800b624:	e7b3      	b.n	800b58e <_malloc_r+0x22>
 800b626:	6862      	ldr	r2, [r4, #4]
 800b628:	42a3      	cmp	r3, r4
 800b62a:	bf0c      	ite	eq
 800b62c:	6032      	streq	r2, [r6, #0]
 800b62e:	605a      	strne	r2, [r3, #4]
 800b630:	e7ec      	b.n	800b60c <_malloc_r+0xa0>
 800b632:	4623      	mov	r3, r4
 800b634:	6864      	ldr	r4, [r4, #4]
 800b636:	e7b2      	b.n	800b59e <_malloc_r+0x32>
 800b638:	4634      	mov	r4, r6
 800b63a:	6876      	ldr	r6, [r6, #4]
 800b63c:	e7b9      	b.n	800b5b2 <_malloc_r+0x46>
 800b63e:	230c      	movs	r3, #12
 800b640:	603b      	str	r3, [r7, #0]
 800b642:	4638      	mov	r0, r7
 800b644:	f000 fda6 	bl	800c194 <__malloc_unlock>
 800b648:	e7a1      	b.n	800b58e <_malloc_r+0x22>
 800b64a:	6025      	str	r5, [r4, #0]
 800b64c:	e7de      	b.n	800b60c <_malloc_r+0xa0>
 800b64e:	bf00      	nop
 800b650:	200006ec 	.word	0x200006ec

0800b654 <__ssputs_r>:
 800b654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	688e      	ldr	r6, [r1, #8]
 800b65a:	429e      	cmp	r6, r3
 800b65c:	4682      	mov	sl, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	4690      	mov	r8, r2
 800b662:	461f      	mov	r7, r3
 800b664:	d838      	bhi.n	800b6d8 <__ssputs_r+0x84>
 800b666:	898a      	ldrh	r2, [r1, #12]
 800b668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b66c:	d032      	beq.n	800b6d4 <__ssputs_r+0x80>
 800b66e:	6825      	ldr	r5, [r4, #0]
 800b670:	6909      	ldr	r1, [r1, #16]
 800b672:	eba5 0901 	sub.w	r9, r5, r1
 800b676:	6965      	ldr	r5, [r4, #20]
 800b678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b67c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b680:	3301      	adds	r3, #1
 800b682:	444b      	add	r3, r9
 800b684:	106d      	asrs	r5, r5, #1
 800b686:	429d      	cmp	r5, r3
 800b688:	bf38      	it	cc
 800b68a:	461d      	movcc	r5, r3
 800b68c:	0553      	lsls	r3, r2, #21
 800b68e:	d531      	bpl.n	800b6f4 <__ssputs_r+0xa0>
 800b690:	4629      	mov	r1, r5
 800b692:	f7ff ff6b 	bl	800b56c <_malloc_r>
 800b696:	4606      	mov	r6, r0
 800b698:	b950      	cbnz	r0, 800b6b0 <__ssputs_r+0x5c>
 800b69a:	230c      	movs	r3, #12
 800b69c:	f8ca 3000 	str.w	r3, [sl]
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b0:	6921      	ldr	r1, [r4, #16]
 800b6b2:	464a      	mov	r2, r9
 800b6b4:	f7ff fa0c 	bl	800aad0 <memcpy>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	6126      	str	r6, [r4, #16]
 800b6c6:	6165      	str	r5, [r4, #20]
 800b6c8:	444e      	add	r6, r9
 800b6ca:	eba5 0509 	sub.w	r5, r5, r9
 800b6ce:	6026      	str	r6, [r4, #0]
 800b6d0:	60a5      	str	r5, [r4, #8]
 800b6d2:	463e      	mov	r6, r7
 800b6d4:	42be      	cmp	r6, r7
 800b6d6:	d900      	bls.n	800b6da <__ssputs_r+0x86>
 800b6d8:	463e      	mov	r6, r7
 800b6da:	6820      	ldr	r0, [r4, #0]
 800b6dc:	4632      	mov	r2, r6
 800b6de:	4641      	mov	r1, r8
 800b6e0:	f000 fd38 	bl	800c154 <memmove>
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	1b9b      	subs	r3, r3, r6
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	4433      	add	r3, r6
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	e7db      	b.n	800b6ac <__ssputs_r+0x58>
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	f000 fd53 	bl	800c1a0 <_realloc_r>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d1e1      	bne.n	800b6c4 <__ssputs_r+0x70>
 800b700:	6921      	ldr	r1, [r4, #16]
 800b702:	4650      	mov	r0, sl
 800b704:	f7ff fec6 	bl	800b494 <_free_r>
 800b708:	e7c7      	b.n	800b69a <__ssputs_r+0x46>
	...

0800b70c <_svfiprintf_r>:
 800b70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	4698      	mov	r8, r3
 800b712:	898b      	ldrh	r3, [r1, #12]
 800b714:	061b      	lsls	r3, r3, #24
 800b716:	b09d      	sub	sp, #116	; 0x74
 800b718:	4607      	mov	r7, r0
 800b71a:	460d      	mov	r5, r1
 800b71c:	4614      	mov	r4, r2
 800b71e:	d50e      	bpl.n	800b73e <_svfiprintf_r+0x32>
 800b720:	690b      	ldr	r3, [r1, #16]
 800b722:	b963      	cbnz	r3, 800b73e <_svfiprintf_r+0x32>
 800b724:	2140      	movs	r1, #64	; 0x40
 800b726:	f7ff ff21 	bl	800b56c <_malloc_r>
 800b72a:	6028      	str	r0, [r5, #0]
 800b72c:	6128      	str	r0, [r5, #16]
 800b72e:	b920      	cbnz	r0, 800b73a <_svfiprintf_r+0x2e>
 800b730:	230c      	movs	r3, #12
 800b732:	603b      	str	r3, [r7, #0]
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	e0d1      	b.n	800b8de <_svfiprintf_r+0x1d2>
 800b73a:	2340      	movs	r3, #64	; 0x40
 800b73c:	616b      	str	r3, [r5, #20]
 800b73e:	2300      	movs	r3, #0
 800b740:	9309      	str	r3, [sp, #36]	; 0x24
 800b742:	2320      	movs	r3, #32
 800b744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b748:	f8cd 800c 	str.w	r8, [sp, #12]
 800b74c:	2330      	movs	r3, #48	; 0x30
 800b74e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8f8 <_svfiprintf_r+0x1ec>
 800b752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b756:	f04f 0901 	mov.w	r9, #1
 800b75a:	4623      	mov	r3, r4
 800b75c:	469a      	mov	sl, r3
 800b75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b762:	b10a      	cbz	r2, 800b768 <_svfiprintf_r+0x5c>
 800b764:	2a25      	cmp	r2, #37	; 0x25
 800b766:	d1f9      	bne.n	800b75c <_svfiprintf_r+0x50>
 800b768:	ebba 0b04 	subs.w	fp, sl, r4
 800b76c:	d00b      	beq.n	800b786 <_svfiprintf_r+0x7a>
 800b76e:	465b      	mov	r3, fp
 800b770:	4622      	mov	r2, r4
 800b772:	4629      	mov	r1, r5
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff ff6d 	bl	800b654 <__ssputs_r>
 800b77a:	3001      	adds	r0, #1
 800b77c:	f000 80aa 	beq.w	800b8d4 <_svfiprintf_r+0x1c8>
 800b780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b782:	445a      	add	r2, fp
 800b784:	9209      	str	r2, [sp, #36]	; 0x24
 800b786:	f89a 3000 	ldrb.w	r3, [sl]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80a2 	beq.w	800b8d4 <_svfiprintf_r+0x1c8>
 800b790:	2300      	movs	r3, #0
 800b792:	f04f 32ff 	mov.w	r2, #4294967295
 800b796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b79a:	f10a 0a01 	add.w	sl, sl, #1
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	9307      	str	r3, [sp, #28]
 800b7a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b7a8:	4654      	mov	r4, sl
 800b7aa:	2205      	movs	r2, #5
 800b7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b0:	4851      	ldr	r0, [pc, #324]	; (800b8f8 <_svfiprintf_r+0x1ec>)
 800b7b2:	f7f4 fd4d 	bl	8000250 <memchr>
 800b7b6:	9a04      	ldr	r2, [sp, #16]
 800b7b8:	b9d8      	cbnz	r0, 800b7f2 <_svfiprintf_r+0xe6>
 800b7ba:	06d0      	lsls	r0, r2, #27
 800b7bc:	bf44      	itt	mi
 800b7be:	2320      	movmi	r3, #32
 800b7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7c4:	0711      	lsls	r1, r2, #28
 800b7c6:	bf44      	itt	mi
 800b7c8:	232b      	movmi	r3, #43	; 0x2b
 800b7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7d4:	d015      	beq.n	800b802 <_svfiprintf_r+0xf6>
 800b7d6:	9a07      	ldr	r2, [sp, #28]
 800b7d8:	4654      	mov	r4, sl
 800b7da:	2000      	movs	r0, #0
 800b7dc:	f04f 0c0a 	mov.w	ip, #10
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7e6:	3b30      	subs	r3, #48	; 0x30
 800b7e8:	2b09      	cmp	r3, #9
 800b7ea:	d94e      	bls.n	800b88a <_svfiprintf_r+0x17e>
 800b7ec:	b1b0      	cbz	r0, 800b81c <_svfiprintf_r+0x110>
 800b7ee:	9207      	str	r2, [sp, #28]
 800b7f0:	e014      	b.n	800b81c <_svfiprintf_r+0x110>
 800b7f2:	eba0 0308 	sub.w	r3, r0, r8
 800b7f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	46a2      	mov	sl, r4
 800b800:	e7d2      	b.n	800b7a8 <_svfiprintf_r+0x9c>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	1d19      	adds	r1, r3, #4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	9103      	str	r1, [sp, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	bfbb      	ittet	lt
 800b80e:	425b      	neglt	r3, r3
 800b810:	f042 0202 	orrlt.w	r2, r2, #2
 800b814:	9307      	strge	r3, [sp, #28]
 800b816:	9307      	strlt	r3, [sp, #28]
 800b818:	bfb8      	it	lt
 800b81a:	9204      	strlt	r2, [sp, #16]
 800b81c:	7823      	ldrb	r3, [r4, #0]
 800b81e:	2b2e      	cmp	r3, #46	; 0x2e
 800b820:	d10c      	bne.n	800b83c <_svfiprintf_r+0x130>
 800b822:	7863      	ldrb	r3, [r4, #1]
 800b824:	2b2a      	cmp	r3, #42	; 0x2a
 800b826:	d135      	bne.n	800b894 <_svfiprintf_r+0x188>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	1d1a      	adds	r2, r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	9203      	str	r2, [sp, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfb8      	it	lt
 800b834:	f04f 33ff 	movlt.w	r3, #4294967295
 800b838:	3402      	adds	r4, #2
 800b83a:	9305      	str	r3, [sp, #20]
 800b83c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b908 <_svfiprintf_r+0x1fc>
 800b840:	7821      	ldrb	r1, [r4, #0]
 800b842:	2203      	movs	r2, #3
 800b844:	4650      	mov	r0, sl
 800b846:	f7f4 fd03 	bl	8000250 <memchr>
 800b84a:	b140      	cbz	r0, 800b85e <_svfiprintf_r+0x152>
 800b84c:	2340      	movs	r3, #64	; 0x40
 800b84e:	eba0 000a 	sub.w	r0, r0, sl
 800b852:	fa03 f000 	lsl.w	r0, r3, r0
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	4303      	orrs	r3, r0
 800b85a:	3401      	adds	r4, #1
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b862:	4826      	ldr	r0, [pc, #152]	; (800b8fc <_svfiprintf_r+0x1f0>)
 800b864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b868:	2206      	movs	r2, #6
 800b86a:	f7f4 fcf1 	bl	8000250 <memchr>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d038      	beq.n	800b8e4 <_svfiprintf_r+0x1d8>
 800b872:	4b23      	ldr	r3, [pc, #140]	; (800b900 <_svfiprintf_r+0x1f4>)
 800b874:	bb1b      	cbnz	r3, 800b8be <_svfiprintf_r+0x1b2>
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	3307      	adds	r3, #7
 800b87a:	f023 0307 	bic.w	r3, r3, #7
 800b87e:	3308      	adds	r3, #8
 800b880:	9303      	str	r3, [sp, #12]
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	4433      	add	r3, r6
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	e767      	b.n	800b75a <_svfiprintf_r+0x4e>
 800b88a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b88e:	460c      	mov	r4, r1
 800b890:	2001      	movs	r0, #1
 800b892:	e7a5      	b.n	800b7e0 <_svfiprintf_r+0xd4>
 800b894:	2300      	movs	r3, #0
 800b896:	3401      	adds	r4, #1
 800b898:	9305      	str	r3, [sp, #20]
 800b89a:	4619      	mov	r1, r3
 800b89c:	f04f 0c0a 	mov.w	ip, #10
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8a6:	3a30      	subs	r2, #48	; 0x30
 800b8a8:	2a09      	cmp	r2, #9
 800b8aa:	d903      	bls.n	800b8b4 <_svfiprintf_r+0x1a8>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0c5      	beq.n	800b83c <_svfiprintf_r+0x130>
 800b8b0:	9105      	str	r1, [sp, #20]
 800b8b2:	e7c3      	b.n	800b83c <_svfiprintf_r+0x130>
 800b8b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e7f0      	b.n	800b8a0 <_svfiprintf_r+0x194>
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <_svfiprintf_r+0x1f8>)
 800b8c6:	a904      	add	r1, sp, #16
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7fc fa31 	bl	8007d30 <_printf_float>
 800b8ce:	1c42      	adds	r2, r0, #1
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	d1d6      	bne.n	800b882 <_svfiprintf_r+0x176>
 800b8d4:	89ab      	ldrh	r3, [r5, #12]
 800b8d6:	065b      	lsls	r3, r3, #25
 800b8d8:	f53f af2c 	bmi.w	800b734 <_svfiprintf_r+0x28>
 800b8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8de:	b01d      	add	sp, #116	; 0x74
 800b8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e4:	ab03      	add	r3, sp, #12
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	462a      	mov	r2, r5
 800b8ea:	4b06      	ldr	r3, [pc, #24]	; (800b904 <_svfiprintf_r+0x1f8>)
 800b8ec:	a904      	add	r1, sp, #16
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7fc fcaa 	bl	8008248 <_printf_i>
 800b8f4:	e7eb      	b.n	800b8ce <_svfiprintf_r+0x1c2>
 800b8f6:	bf00      	nop
 800b8f8:	0800c7b4 	.word	0x0800c7b4
 800b8fc:	0800c7be 	.word	0x0800c7be
 800b900:	08007d31 	.word	0x08007d31
 800b904:	0800b655 	.word	0x0800b655
 800b908:	0800c7ba 	.word	0x0800c7ba

0800b90c <__sfputc_r>:
 800b90c:	6893      	ldr	r3, [r2, #8]
 800b90e:	3b01      	subs	r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	b410      	push	{r4}
 800b914:	6093      	str	r3, [r2, #8]
 800b916:	da08      	bge.n	800b92a <__sfputc_r+0x1e>
 800b918:	6994      	ldr	r4, [r2, #24]
 800b91a:	42a3      	cmp	r3, r4
 800b91c:	db01      	blt.n	800b922 <__sfputc_r+0x16>
 800b91e:	290a      	cmp	r1, #10
 800b920:	d103      	bne.n	800b92a <__sfputc_r+0x1e>
 800b922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b926:	f000 b9bb 	b.w	800bca0 <__swbuf_r>
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	1c58      	adds	r0, r3, #1
 800b92e:	6010      	str	r0, [r2, #0]
 800b930:	7019      	strb	r1, [r3, #0]
 800b932:	4608      	mov	r0, r1
 800b934:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <__sfputs_r>:
 800b93a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	4614      	mov	r4, r2
 800b942:	18d5      	adds	r5, r2, r3
 800b944:	42ac      	cmp	r4, r5
 800b946:	d101      	bne.n	800b94c <__sfputs_r+0x12>
 800b948:	2000      	movs	r0, #0
 800b94a:	e007      	b.n	800b95c <__sfputs_r+0x22>
 800b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b950:	463a      	mov	r2, r7
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ffda 	bl	800b90c <__sfputc_r>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d1f3      	bne.n	800b944 <__sfputs_r+0xa>
 800b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b960 <_vfiprintf_r>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	460d      	mov	r5, r1
 800b966:	b09d      	sub	sp, #116	; 0x74
 800b968:	4614      	mov	r4, r2
 800b96a:	4698      	mov	r8, r3
 800b96c:	4606      	mov	r6, r0
 800b96e:	b118      	cbz	r0, 800b978 <_vfiprintf_r+0x18>
 800b970:	6983      	ldr	r3, [r0, #24]
 800b972:	b90b      	cbnz	r3, 800b978 <_vfiprintf_r+0x18>
 800b974:	f7fe fc7e 	bl	800a274 <__sinit>
 800b978:	4b89      	ldr	r3, [pc, #548]	; (800bba0 <_vfiprintf_r+0x240>)
 800b97a:	429d      	cmp	r5, r3
 800b97c:	d11b      	bne.n	800b9b6 <_vfiprintf_r+0x56>
 800b97e:	6875      	ldr	r5, [r6, #4]
 800b980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b982:	07d9      	lsls	r1, r3, #31
 800b984:	d405      	bmi.n	800b992 <_vfiprintf_r+0x32>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	059a      	lsls	r2, r3, #22
 800b98a:	d402      	bmi.n	800b992 <_vfiprintf_r+0x32>
 800b98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98e:	f7ff f882 	bl	800aa96 <__retarget_lock_acquire_recursive>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	071b      	lsls	r3, r3, #28
 800b996:	d501      	bpl.n	800b99c <_vfiprintf_r+0x3c>
 800b998:	692b      	ldr	r3, [r5, #16]
 800b99a:	b9eb      	cbnz	r3, 800b9d8 <_vfiprintf_r+0x78>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f000 f9f0 	bl	800bd84 <__swsetup_r>
 800b9a4:	b1c0      	cbz	r0, 800b9d8 <_vfiprintf_r+0x78>
 800b9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a8:	07dc      	lsls	r4, r3, #31
 800b9aa:	d50e      	bpl.n	800b9ca <_vfiprintf_r+0x6a>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	b01d      	add	sp, #116	; 0x74
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	4b7b      	ldr	r3, [pc, #492]	; (800bba4 <_vfiprintf_r+0x244>)
 800b9b8:	429d      	cmp	r5, r3
 800b9ba:	d101      	bne.n	800b9c0 <_vfiprintf_r+0x60>
 800b9bc:	68b5      	ldr	r5, [r6, #8]
 800b9be:	e7df      	b.n	800b980 <_vfiprintf_r+0x20>
 800b9c0:	4b79      	ldr	r3, [pc, #484]	; (800bba8 <_vfiprintf_r+0x248>)
 800b9c2:	429d      	cmp	r5, r3
 800b9c4:	bf08      	it	eq
 800b9c6:	68f5      	ldreq	r5, [r6, #12]
 800b9c8:	e7da      	b.n	800b980 <_vfiprintf_r+0x20>
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	0598      	lsls	r0, r3, #22
 800b9ce:	d4ed      	bmi.n	800b9ac <_vfiprintf_r+0x4c>
 800b9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d2:	f7ff f861 	bl	800aa98 <__retarget_lock_release_recursive>
 800b9d6:	e7e9      	b.n	800b9ac <_vfiprintf_r+0x4c>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	9309      	str	r3, [sp, #36]	; 0x24
 800b9dc:	2320      	movs	r3, #32
 800b9de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e6:	2330      	movs	r3, #48	; 0x30
 800b9e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbac <_vfiprintf_r+0x24c>
 800b9ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f0:	f04f 0901 	mov.w	r9, #1
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	469a      	mov	sl, r3
 800b9f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fc:	b10a      	cbz	r2, 800ba02 <_vfiprintf_r+0xa2>
 800b9fe:	2a25      	cmp	r2, #37	; 0x25
 800ba00:	d1f9      	bne.n	800b9f6 <_vfiprintf_r+0x96>
 800ba02:	ebba 0b04 	subs.w	fp, sl, r4
 800ba06:	d00b      	beq.n	800ba20 <_vfiprintf_r+0xc0>
 800ba08:	465b      	mov	r3, fp
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f7ff ff93 	bl	800b93a <__sfputs_r>
 800ba14:	3001      	adds	r0, #1
 800ba16:	f000 80aa 	beq.w	800bb6e <_vfiprintf_r+0x20e>
 800ba1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1c:	445a      	add	r2, fp
 800ba1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba20:	f89a 3000 	ldrb.w	r3, [sl]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 80a2 	beq.w	800bb6e <_vfiprintf_r+0x20e>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba34:	f10a 0a01 	add.w	sl, sl, #1
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba40:	931a      	str	r3, [sp, #104]	; 0x68
 800ba42:	4654      	mov	r4, sl
 800ba44:	2205      	movs	r2, #5
 800ba46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4a:	4858      	ldr	r0, [pc, #352]	; (800bbac <_vfiprintf_r+0x24c>)
 800ba4c:	f7f4 fc00 	bl	8000250 <memchr>
 800ba50:	9a04      	ldr	r2, [sp, #16]
 800ba52:	b9d8      	cbnz	r0, 800ba8c <_vfiprintf_r+0x12c>
 800ba54:	06d1      	lsls	r1, r2, #27
 800ba56:	bf44      	itt	mi
 800ba58:	2320      	movmi	r3, #32
 800ba5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba5e:	0713      	lsls	r3, r2, #28
 800ba60:	bf44      	itt	mi
 800ba62:	232b      	movmi	r3, #43	; 0x2b
 800ba64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba68:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6e:	d015      	beq.n	800ba9c <_vfiprintf_r+0x13c>
 800ba70:	9a07      	ldr	r2, [sp, #28]
 800ba72:	4654      	mov	r4, sl
 800ba74:	2000      	movs	r0, #0
 800ba76:	f04f 0c0a 	mov.w	ip, #10
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba80:	3b30      	subs	r3, #48	; 0x30
 800ba82:	2b09      	cmp	r3, #9
 800ba84:	d94e      	bls.n	800bb24 <_vfiprintf_r+0x1c4>
 800ba86:	b1b0      	cbz	r0, 800bab6 <_vfiprintf_r+0x156>
 800ba88:	9207      	str	r2, [sp, #28]
 800ba8a:	e014      	b.n	800bab6 <_vfiprintf_r+0x156>
 800ba8c:	eba0 0308 	sub.w	r3, r0, r8
 800ba90:	fa09 f303 	lsl.w	r3, r9, r3
 800ba94:	4313      	orrs	r3, r2
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	46a2      	mov	sl, r4
 800ba9a:	e7d2      	b.n	800ba42 <_vfiprintf_r+0xe2>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1d19      	adds	r1, r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	9103      	str	r1, [sp, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bfbb      	ittet	lt
 800baa8:	425b      	neglt	r3, r3
 800baaa:	f042 0202 	orrlt.w	r2, r2, #2
 800baae:	9307      	strge	r3, [sp, #28]
 800bab0:	9307      	strlt	r3, [sp, #28]
 800bab2:	bfb8      	it	lt
 800bab4:	9204      	strlt	r2, [sp, #16]
 800bab6:	7823      	ldrb	r3, [r4, #0]
 800bab8:	2b2e      	cmp	r3, #46	; 0x2e
 800baba:	d10c      	bne.n	800bad6 <_vfiprintf_r+0x176>
 800babc:	7863      	ldrb	r3, [r4, #1]
 800babe:	2b2a      	cmp	r3, #42	; 0x2a
 800bac0:	d135      	bne.n	800bb2e <_vfiprintf_r+0x1ce>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	1d1a      	adds	r2, r3, #4
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	9203      	str	r2, [sp, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	bfb8      	it	lt
 800bace:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad2:	3402      	adds	r4, #2
 800bad4:	9305      	str	r3, [sp, #20]
 800bad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbbc <_vfiprintf_r+0x25c>
 800bada:	7821      	ldrb	r1, [r4, #0]
 800badc:	2203      	movs	r2, #3
 800bade:	4650      	mov	r0, sl
 800bae0:	f7f4 fbb6 	bl	8000250 <memchr>
 800bae4:	b140      	cbz	r0, 800baf8 <_vfiprintf_r+0x198>
 800bae6:	2340      	movs	r3, #64	; 0x40
 800bae8:	eba0 000a 	sub.w	r0, r0, sl
 800baec:	fa03 f000 	lsl.w	r0, r3, r0
 800baf0:	9b04      	ldr	r3, [sp, #16]
 800baf2:	4303      	orrs	r3, r0
 800baf4:	3401      	adds	r4, #1
 800baf6:	9304      	str	r3, [sp, #16]
 800baf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafc:	482c      	ldr	r0, [pc, #176]	; (800bbb0 <_vfiprintf_r+0x250>)
 800bafe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb02:	2206      	movs	r2, #6
 800bb04:	f7f4 fba4 	bl	8000250 <memchr>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d03f      	beq.n	800bb8c <_vfiprintf_r+0x22c>
 800bb0c:	4b29      	ldr	r3, [pc, #164]	; (800bbb4 <_vfiprintf_r+0x254>)
 800bb0e:	bb1b      	cbnz	r3, 800bb58 <_vfiprintf_r+0x1f8>
 800bb10:	9b03      	ldr	r3, [sp, #12]
 800bb12:	3307      	adds	r3, #7
 800bb14:	f023 0307 	bic.w	r3, r3, #7
 800bb18:	3308      	adds	r3, #8
 800bb1a:	9303      	str	r3, [sp, #12]
 800bb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1e:	443b      	add	r3, r7
 800bb20:	9309      	str	r3, [sp, #36]	; 0x24
 800bb22:	e767      	b.n	800b9f4 <_vfiprintf_r+0x94>
 800bb24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb28:	460c      	mov	r4, r1
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	e7a5      	b.n	800ba7a <_vfiprintf_r+0x11a>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	3401      	adds	r4, #1
 800bb32:	9305      	str	r3, [sp, #20]
 800bb34:	4619      	mov	r1, r3
 800bb36:	f04f 0c0a 	mov.w	ip, #10
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb40:	3a30      	subs	r2, #48	; 0x30
 800bb42:	2a09      	cmp	r2, #9
 800bb44:	d903      	bls.n	800bb4e <_vfiprintf_r+0x1ee>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0c5      	beq.n	800bad6 <_vfiprintf_r+0x176>
 800bb4a:	9105      	str	r1, [sp, #20]
 800bb4c:	e7c3      	b.n	800bad6 <_vfiprintf_r+0x176>
 800bb4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb52:	4604      	mov	r4, r0
 800bb54:	2301      	movs	r3, #1
 800bb56:	e7f0      	b.n	800bb3a <_vfiprintf_r+0x1da>
 800bb58:	ab03      	add	r3, sp, #12
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <_vfiprintf_r+0x258>)
 800bb60:	a904      	add	r1, sp, #16
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7fc f8e4 	bl	8007d30 <_printf_float>
 800bb68:	4607      	mov	r7, r0
 800bb6a:	1c78      	adds	r0, r7, #1
 800bb6c:	d1d6      	bne.n	800bb1c <_vfiprintf_r+0x1bc>
 800bb6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb70:	07d9      	lsls	r1, r3, #31
 800bb72:	d405      	bmi.n	800bb80 <_vfiprintf_r+0x220>
 800bb74:	89ab      	ldrh	r3, [r5, #12]
 800bb76:	059a      	lsls	r2, r3, #22
 800bb78:	d402      	bmi.n	800bb80 <_vfiprintf_r+0x220>
 800bb7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb7c:	f7fe ff8c 	bl	800aa98 <__retarget_lock_release_recursive>
 800bb80:	89ab      	ldrh	r3, [r5, #12]
 800bb82:	065b      	lsls	r3, r3, #25
 800bb84:	f53f af12 	bmi.w	800b9ac <_vfiprintf_r+0x4c>
 800bb88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb8a:	e711      	b.n	800b9b0 <_vfiprintf_r+0x50>
 800bb8c:	ab03      	add	r3, sp, #12
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	462a      	mov	r2, r5
 800bb92:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <_vfiprintf_r+0x258>)
 800bb94:	a904      	add	r1, sp, #16
 800bb96:	4630      	mov	r0, r6
 800bb98:	f7fc fb56 	bl	8008248 <_printf_i>
 800bb9c:	e7e4      	b.n	800bb68 <_vfiprintf_r+0x208>
 800bb9e:	bf00      	nop
 800bba0:	0800c59c 	.word	0x0800c59c
 800bba4:	0800c5bc 	.word	0x0800c5bc
 800bba8:	0800c57c 	.word	0x0800c57c
 800bbac:	0800c7b4 	.word	0x0800c7b4
 800bbb0:	0800c7be 	.word	0x0800c7be
 800bbb4:	08007d31 	.word	0x08007d31
 800bbb8:	0800b93b 	.word	0x0800b93b
 800bbbc:	0800c7ba 	.word	0x0800c7ba

0800bbc0 <nan>:
 800bbc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bbc8 <nan+0x8>
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	7ff80000 	.word	0x7ff80000

0800bbd0 <_sbrk_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d06      	ldr	r5, [pc, #24]	; (800bbec <_sbrk_r+0x1c>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f5 ff68 	bl	8001ab0 <_sbrk>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_sbrk_r+0x1a>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_sbrk_r+0x1a>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	200006f4 	.word	0x200006f4

0800bbf0 <__sread>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf8:	f000 fb02 	bl	800c200 <_read_r>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	bfab      	itete	ge
 800bc00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc02:	89a3      	ldrhlt	r3, [r4, #12]
 800bc04:	181b      	addge	r3, r3, r0
 800bc06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc0a:	bfac      	ite	ge
 800bc0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc0e:	81a3      	strhlt	r3, [r4, #12]
 800bc10:	bd10      	pop	{r4, pc}

0800bc12 <__swrite>:
 800bc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc16:	461f      	mov	r7, r3
 800bc18:	898b      	ldrh	r3, [r1, #12]
 800bc1a:	05db      	lsls	r3, r3, #23
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	4616      	mov	r6, r2
 800bc22:	d505      	bpl.n	800bc30 <__swrite+0x1e>
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	2302      	movs	r3, #2
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f000 fa1a 	bl	800c064 <_lseek_r>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc3a:	81a3      	strh	r3, [r4, #12]
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	463b      	mov	r3, r7
 800bc40:	4628      	mov	r0, r5
 800bc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	f000 b88b 	b.w	800bd60 <_write_r>

0800bc4a <__sseek>:
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc52:	f000 fa07 	bl	800c064 <_lseek_r>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	bf15      	itete	ne
 800bc5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc66:	81a3      	strheq	r3, [r4, #12]
 800bc68:	bf18      	it	ne
 800bc6a:	81a3      	strhne	r3, [r4, #12]
 800bc6c:	bd10      	pop	{r4, pc}

0800bc6e <__sclose>:
 800bc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc72:	f000 b913 	b.w	800be9c <_close_r>

0800bc76 <strncmp>:
 800bc76:	b510      	push	{r4, lr}
 800bc78:	b17a      	cbz	r2, 800bc9a <strncmp+0x24>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	3901      	subs	r1, #1
 800bc7e:	1884      	adds	r4, r0, r2
 800bc80:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc88:	4290      	cmp	r0, r2
 800bc8a:	d101      	bne.n	800bc90 <strncmp+0x1a>
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	d101      	bne.n	800bc94 <strncmp+0x1e>
 800bc90:	1a80      	subs	r0, r0, r2
 800bc92:	bd10      	pop	{r4, pc}
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d1f3      	bne.n	800bc80 <strncmp+0xa>
 800bc98:	e7fa      	b.n	800bc90 <strncmp+0x1a>
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	e7f9      	b.n	800bc92 <strncmp+0x1c>
	...

0800bca0 <__swbuf_r>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	460e      	mov	r6, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	4605      	mov	r5, r0
 800bca8:	b118      	cbz	r0, 800bcb2 <__swbuf_r+0x12>
 800bcaa:	6983      	ldr	r3, [r0, #24]
 800bcac:	b90b      	cbnz	r3, 800bcb2 <__swbuf_r+0x12>
 800bcae:	f7fe fae1 	bl	800a274 <__sinit>
 800bcb2:	4b21      	ldr	r3, [pc, #132]	; (800bd38 <__swbuf_r+0x98>)
 800bcb4:	429c      	cmp	r4, r3
 800bcb6:	d12b      	bne.n	800bd10 <__swbuf_r+0x70>
 800bcb8:	686c      	ldr	r4, [r5, #4]
 800bcba:	69a3      	ldr	r3, [r4, #24]
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	071a      	lsls	r2, r3, #28
 800bcc2:	d52f      	bpl.n	800bd24 <__swbuf_r+0x84>
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	b36b      	cbz	r3, 800bd24 <__swbuf_r+0x84>
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	6820      	ldr	r0, [r4, #0]
 800bccc:	1ac0      	subs	r0, r0, r3
 800bcce:	6963      	ldr	r3, [r4, #20]
 800bcd0:	b2f6      	uxtb	r6, r6
 800bcd2:	4283      	cmp	r3, r0
 800bcd4:	4637      	mov	r7, r6
 800bcd6:	dc04      	bgt.n	800bce2 <__swbuf_r+0x42>
 800bcd8:	4621      	mov	r1, r4
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f974 	bl	800bfc8 <_fflush_r>
 800bce0:	bb30      	cbnz	r0, 800bd30 <__swbuf_r+0x90>
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	3b01      	subs	r3, #1
 800bce6:	60a3      	str	r3, [r4, #8]
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	6022      	str	r2, [r4, #0]
 800bcee:	701e      	strb	r6, [r3, #0]
 800bcf0:	6963      	ldr	r3, [r4, #20]
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	4283      	cmp	r3, r0
 800bcf6:	d004      	beq.n	800bd02 <__swbuf_r+0x62>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	07db      	lsls	r3, r3, #31
 800bcfc:	d506      	bpl.n	800bd0c <__swbuf_r+0x6c>
 800bcfe:	2e0a      	cmp	r6, #10
 800bd00:	d104      	bne.n	800bd0c <__swbuf_r+0x6c>
 800bd02:	4621      	mov	r1, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	f000 f95f 	bl	800bfc8 <_fflush_r>
 800bd0a:	b988      	cbnz	r0, 800bd30 <__swbuf_r+0x90>
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd10:	4b0a      	ldr	r3, [pc, #40]	; (800bd3c <__swbuf_r+0x9c>)
 800bd12:	429c      	cmp	r4, r3
 800bd14:	d101      	bne.n	800bd1a <__swbuf_r+0x7a>
 800bd16:	68ac      	ldr	r4, [r5, #8]
 800bd18:	e7cf      	b.n	800bcba <__swbuf_r+0x1a>
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <__swbuf_r+0xa0>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	bf08      	it	eq
 800bd20:	68ec      	ldreq	r4, [r5, #12]
 800bd22:	e7ca      	b.n	800bcba <__swbuf_r+0x1a>
 800bd24:	4621      	mov	r1, r4
 800bd26:	4628      	mov	r0, r5
 800bd28:	f000 f82c 	bl	800bd84 <__swsetup_r>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d0cb      	beq.n	800bcc8 <__swbuf_r+0x28>
 800bd30:	f04f 37ff 	mov.w	r7, #4294967295
 800bd34:	e7ea      	b.n	800bd0c <__swbuf_r+0x6c>
 800bd36:	bf00      	nop
 800bd38:	0800c59c 	.word	0x0800c59c
 800bd3c:	0800c5bc 	.word	0x0800c5bc
 800bd40:	0800c57c 	.word	0x0800c57c

0800bd44 <__ascii_wctomb>:
 800bd44:	b149      	cbz	r1, 800bd5a <__ascii_wctomb+0x16>
 800bd46:	2aff      	cmp	r2, #255	; 0xff
 800bd48:	bf85      	ittet	hi
 800bd4a:	238a      	movhi	r3, #138	; 0x8a
 800bd4c:	6003      	strhi	r3, [r0, #0]
 800bd4e:	700a      	strbls	r2, [r1, #0]
 800bd50:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd54:	bf98      	it	ls
 800bd56:	2001      	movls	r0, #1
 800bd58:	4770      	bx	lr
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	4770      	bx	lr
	...

0800bd60 <_write_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d07      	ldr	r5, [pc, #28]	; (800bd80 <_write_r+0x20>)
 800bd64:	4604      	mov	r4, r0
 800bd66:	4608      	mov	r0, r1
 800bd68:	4611      	mov	r1, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	602a      	str	r2, [r5, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f7f5 fe4d 	bl	8001a0e <_write>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_write_r+0x1e>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_write_r+0x1e>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	200006f4 	.word	0x200006f4

0800bd84 <__swsetup_r>:
 800bd84:	4b32      	ldr	r3, [pc, #200]	; (800be50 <__swsetup_r+0xcc>)
 800bd86:	b570      	push	{r4, r5, r6, lr}
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	b125      	cbz	r5, 800bd9a <__swsetup_r+0x16>
 800bd90:	69ab      	ldr	r3, [r5, #24]
 800bd92:	b913      	cbnz	r3, 800bd9a <__swsetup_r+0x16>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f7fe fa6d 	bl	800a274 <__sinit>
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <__swsetup_r+0xd0>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	d10f      	bne.n	800bdc0 <__swsetup_r+0x3c>
 800bda0:	686c      	ldr	r4, [r5, #4]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bda8:	0719      	lsls	r1, r3, #28
 800bdaa:	d42c      	bmi.n	800be06 <__swsetup_r+0x82>
 800bdac:	06dd      	lsls	r5, r3, #27
 800bdae:	d411      	bmi.n	800bdd4 <__swsetup_r+0x50>
 800bdb0:	2309      	movs	r3, #9
 800bdb2:	6033      	str	r3, [r6, #0]
 800bdb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e03e      	b.n	800be3e <__swsetup_r+0xba>
 800bdc0:	4b25      	ldr	r3, [pc, #148]	; (800be58 <__swsetup_r+0xd4>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d101      	bne.n	800bdca <__swsetup_r+0x46>
 800bdc6:	68ac      	ldr	r4, [r5, #8]
 800bdc8:	e7eb      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdca:	4b24      	ldr	r3, [pc, #144]	; (800be5c <__swsetup_r+0xd8>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	bf08      	it	eq
 800bdd0:	68ec      	ldreq	r4, [r5, #12]
 800bdd2:	e7e6      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdd4:	0758      	lsls	r0, r3, #29
 800bdd6:	d512      	bpl.n	800bdfe <__swsetup_r+0x7a>
 800bdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdda:	b141      	cbz	r1, 800bdee <__swsetup_r+0x6a>
 800bddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bde0:	4299      	cmp	r1, r3
 800bde2:	d002      	beq.n	800bdea <__swsetup_r+0x66>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff fb55 	bl	800b494 <_free_r>
 800bdea:	2300      	movs	r3, #0
 800bdec:	6363      	str	r3, [r4, #52]	; 0x34
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6063      	str	r3, [r4, #4]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0308 	orr.w	r3, r3, #8
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	b94b      	cbnz	r3, 800be1e <__swsetup_r+0x9a>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d003      	beq.n	800be1e <__swsetup_r+0x9a>
 800be16:	4621      	mov	r1, r4
 800be18:	4630      	mov	r0, r6
 800be1a:	f000 f95b 	bl	800c0d4 <__smakebuf_r>
 800be1e:	89a0      	ldrh	r0, [r4, #12]
 800be20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be24:	f010 0301 	ands.w	r3, r0, #1
 800be28:	d00a      	beq.n	800be40 <__swsetup_r+0xbc>
 800be2a:	2300      	movs	r3, #0
 800be2c:	60a3      	str	r3, [r4, #8]
 800be2e:	6963      	ldr	r3, [r4, #20]
 800be30:	425b      	negs	r3, r3
 800be32:	61a3      	str	r3, [r4, #24]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	b943      	cbnz	r3, 800be4a <__swsetup_r+0xc6>
 800be38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be3c:	d1ba      	bne.n	800bdb4 <__swsetup_r+0x30>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	0781      	lsls	r1, r0, #30
 800be42:	bf58      	it	pl
 800be44:	6963      	ldrpl	r3, [r4, #20]
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	e7f4      	b.n	800be34 <__swsetup_r+0xb0>
 800be4a:	2000      	movs	r0, #0
 800be4c:	e7f7      	b.n	800be3e <__swsetup_r+0xba>
 800be4e:	bf00      	nop
 800be50:	20000050 	.word	0x20000050
 800be54:	0800c59c 	.word	0x0800c59c
 800be58:	0800c5bc 	.word	0x0800c5bc
 800be5c:	0800c57c 	.word	0x0800c57c

0800be60 <__assert_func>:
 800be60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be62:	4614      	mov	r4, r2
 800be64:	461a      	mov	r2, r3
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <__assert_func+0x2c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4605      	mov	r5, r0
 800be6c:	68d8      	ldr	r0, [r3, #12]
 800be6e:	b14c      	cbz	r4, 800be84 <__assert_func+0x24>
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <__assert_func+0x30>)
 800be72:	9100      	str	r1, [sp, #0]
 800be74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be78:	4906      	ldr	r1, [pc, #24]	; (800be94 <__assert_func+0x34>)
 800be7a:	462b      	mov	r3, r5
 800be7c:	f000 f8e0 	bl	800c040 <fiprintf>
 800be80:	f000 f9d0 	bl	800c224 <abort>
 800be84:	4b04      	ldr	r3, [pc, #16]	; (800be98 <__assert_func+0x38>)
 800be86:	461c      	mov	r4, r3
 800be88:	e7f3      	b.n	800be72 <__assert_func+0x12>
 800be8a:	bf00      	nop
 800be8c:	20000050 	.word	0x20000050
 800be90:	0800c7c5 	.word	0x0800c7c5
 800be94:	0800c7d2 	.word	0x0800c7d2
 800be98:	0800c800 	.word	0x0800c800

0800be9c <_close_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d06      	ldr	r5, [pc, #24]	; (800beb8 <_close_r+0x1c>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	602b      	str	r3, [r5, #0]
 800bea8:	f7f5 fdcd 	bl	8001a46 <_close>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_close_r+0x1a>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_close_r+0x1a>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	200006f4 	.word	0x200006f4

0800bebc <__sflush_r>:
 800bebc:	898a      	ldrh	r2, [r1, #12]
 800bebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec2:	4605      	mov	r5, r0
 800bec4:	0710      	lsls	r0, r2, #28
 800bec6:	460c      	mov	r4, r1
 800bec8:	d458      	bmi.n	800bf7c <__sflush_r+0xc0>
 800beca:	684b      	ldr	r3, [r1, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc05      	bgt.n	800bedc <__sflush_r+0x20>
 800bed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dc02      	bgt.n	800bedc <__sflush_r+0x20>
 800bed6:	2000      	movs	r0, #0
 800bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bede:	2e00      	cmp	r6, #0
 800bee0:	d0f9      	beq.n	800bed6 <__sflush_r+0x1a>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bee8:	682f      	ldr	r7, [r5, #0]
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	d032      	beq.n	800bf54 <__sflush_r+0x98>
 800beee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	075a      	lsls	r2, r3, #29
 800bef4:	d505      	bpl.n	800bf02 <__sflush_r+0x46>
 800bef6:	6863      	ldr	r3, [r4, #4]
 800bef8:	1ac0      	subs	r0, r0, r3
 800befa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800befc:	b10b      	cbz	r3, 800bf02 <__sflush_r+0x46>
 800befe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf00:	1ac0      	subs	r0, r0, r3
 800bf02:	2300      	movs	r3, #0
 800bf04:	4602      	mov	r2, r0
 800bf06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf08:	6a21      	ldr	r1, [r4, #32]
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	47b0      	blx	r6
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	d106      	bne.n	800bf22 <__sflush_r+0x66>
 800bf14:	6829      	ldr	r1, [r5, #0]
 800bf16:	291d      	cmp	r1, #29
 800bf18:	d82c      	bhi.n	800bf74 <__sflush_r+0xb8>
 800bf1a:	4a2a      	ldr	r2, [pc, #168]	; (800bfc4 <__sflush_r+0x108>)
 800bf1c:	40ca      	lsrs	r2, r1
 800bf1e:	07d6      	lsls	r6, r2, #31
 800bf20:	d528      	bpl.n	800bf74 <__sflush_r+0xb8>
 800bf22:	2200      	movs	r2, #0
 800bf24:	6062      	str	r2, [r4, #4]
 800bf26:	04d9      	lsls	r1, r3, #19
 800bf28:	6922      	ldr	r2, [r4, #16]
 800bf2a:	6022      	str	r2, [r4, #0]
 800bf2c:	d504      	bpl.n	800bf38 <__sflush_r+0x7c>
 800bf2e:	1c42      	adds	r2, r0, #1
 800bf30:	d101      	bne.n	800bf36 <__sflush_r+0x7a>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	b903      	cbnz	r3, 800bf38 <__sflush_r+0x7c>
 800bf36:	6560      	str	r0, [r4, #84]	; 0x54
 800bf38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf3a:	602f      	str	r7, [r5, #0]
 800bf3c:	2900      	cmp	r1, #0
 800bf3e:	d0ca      	beq.n	800bed6 <__sflush_r+0x1a>
 800bf40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf44:	4299      	cmp	r1, r3
 800bf46:	d002      	beq.n	800bf4e <__sflush_r+0x92>
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f7ff faa3 	bl	800b494 <_free_r>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	6360      	str	r0, [r4, #52]	; 0x34
 800bf52:	e7c1      	b.n	800bed8 <__sflush_r+0x1c>
 800bf54:	6a21      	ldr	r1, [r4, #32]
 800bf56:	2301      	movs	r3, #1
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b0      	blx	r6
 800bf5c:	1c41      	adds	r1, r0, #1
 800bf5e:	d1c7      	bne.n	800bef0 <__sflush_r+0x34>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0c4      	beq.n	800bef0 <__sflush_r+0x34>
 800bf66:	2b1d      	cmp	r3, #29
 800bf68:	d001      	beq.n	800bf6e <__sflush_r+0xb2>
 800bf6a:	2b16      	cmp	r3, #22
 800bf6c:	d101      	bne.n	800bf72 <__sflush_r+0xb6>
 800bf6e:	602f      	str	r7, [r5, #0]
 800bf70:	e7b1      	b.n	800bed6 <__sflush_r+0x1a>
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	e7ad      	b.n	800bed8 <__sflush_r+0x1c>
 800bf7c:	690f      	ldr	r7, [r1, #16]
 800bf7e:	2f00      	cmp	r7, #0
 800bf80:	d0a9      	beq.n	800bed6 <__sflush_r+0x1a>
 800bf82:	0793      	lsls	r3, r2, #30
 800bf84:	680e      	ldr	r6, [r1, #0]
 800bf86:	bf08      	it	eq
 800bf88:	694b      	ldreq	r3, [r1, #20]
 800bf8a:	600f      	str	r7, [r1, #0]
 800bf8c:	bf18      	it	ne
 800bf8e:	2300      	movne	r3, #0
 800bf90:	eba6 0807 	sub.w	r8, r6, r7
 800bf94:	608b      	str	r3, [r1, #8]
 800bf96:	f1b8 0f00 	cmp.w	r8, #0
 800bf9a:	dd9c      	ble.n	800bed6 <__sflush_r+0x1a>
 800bf9c:	6a21      	ldr	r1, [r4, #32]
 800bf9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfa0:	4643      	mov	r3, r8
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b0      	blx	r6
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	dc06      	bgt.n	800bfba <__sflush_r+0xfe>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	e78e      	b.n	800bed8 <__sflush_r+0x1c>
 800bfba:	4407      	add	r7, r0
 800bfbc:	eba8 0800 	sub.w	r8, r8, r0
 800bfc0:	e7e9      	b.n	800bf96 <__sflush_r+0xda>
 800bfc2:	bf00      	nop
 800bfc4:	20400001 	.word	0x20400001

0800bfc8 <_fflush_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	690b      	ldr	r3, [r1, #16]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	b913      	cbnz	r3, 800bfd8 <_fflush_r+0x10>
 800bfd2:	2500      	movs	r5, #0
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	b118      	cbz	r0, 800bfe2 <_fflush_r+0x1a>
 800bfda:	6983      	ldr	r3, [r0, #24]
 800bfdc:	b90b      	cbnz	r3, 800bfe2 <_fflush_r+0x1a>
 800bfde:	f7fe f949 	bl	800a274 <__sinit>
 800bfe2:	4b14      	ldr	r3, [pc, #80]	; (800c034 <_fflush_r+0x6c>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d11b      	bne.n	800c020 <_fflush_r+0x58>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0ef      	beq.n	800bfd2 <_fflush_r+0xa>
 800bff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bff4:	07d0      	lsls	r0, r2, #31
 800bff6:	d404      	bmi.n	800c002 <_fflush_r+0x3a>
 800bff8:	0599      	lsls	r1, r3, #22
 800bffa:	d402      	bmi.n	800c002 <_fflush_r+0x3a>
 800bffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffe:	f7fe fd4a 	bl	800aa96 <__retarget_lock_acquire_recursive>
 800c002:	4628      	mov	r0, r5
 800c004:	4621      	mov	r1, r4
 800c006:	f7ff ff59 	bl	800bebc <__sflush_r>
 800c00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c00c:	07da      	lsls	r2, r3, #31
 800c00e:	4605      	mov	r5, r0
 800c010:	d4e0      	bmi.n	800bfd4 <_fflush_r+0xc>
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	059b      	lsls	r3, r3, #22
 800c016:	d4dd      	bmi.n	800bfd4 <_fflush_r+0xc>
 800c018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c01a:	f7fe fd3d 	bl	800aa98 <__retarget_lock_release_recursive>
 800c01e:	e7d9      	b.n	800bfd4 <_fflush_r+0xc>
 800c020:	4b05      	ldr	r3, [pc, #20]	; (800c038 <_fflush_r+0x70>)
 800c022:	429c      	cmp	r4, r3
 800c024:	d101      	bne.n	800c02a <_fflush_r+0x62>
 800c026:	68ac      	ldr	r4, [r5, #8]
 800c028:	e7df      	b.n	800bfea <_fflush_r+0x22>
 800c02a:	4b04      	ldr	r3, [pc, #16]	; (800c03c <_fflush_r+0x74>)
 800c02c:	429c      	cmp	r4, r3
 800c02e:	bf08      	it	eq
 800c030:	68ec      	ldreq	r4, [r5, #12]
 800c032:	e7da      	b.n	800bfea <_fflush_r+0x22>
 800c034:	0800c59c 	.word	0x0800c59c
 800c038:	0800c5bc 	.word	0x0800c5bc
 800c03c:	0800c57c 	.word	0x0800c57c

0800c040 <fiprintf>:
 800c040:	b40e      	push	{r1, r2, r3}
 800c042:	b503      	push	{r0, r1, lr}
 800c044:	4601      	mov	r1, r0
 800c046:	ab03      	add	r3, sp, #12
 800c048:	4805      	ldr	r0, [pc, #20]	; (800c060 <fiprintf+0x20>)
 800c04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c04e:	6800      	ldr	r0, [r0, #0]
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	f7ff fc85 	bl	800b960 <_vfiprintf_r>
 800c056:	b002      	add	sp, #8
 800c058:	f85d eb04 	ldr.w	lr, [sp], #4
 800c05c:	b003      	add	sp, #12
 800c05e:	4770      	bx	lr
 800c060:	20000050 	.word	0x20000050

0800c064 <_lseek_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	; (800c084 <_lseek_r+0x20>)
 800c068:	4604      	mov	r4, r0
 800c06a:	4608      	mov	r0, r1
 800c06c:	4611      	mov	r1, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	602a      	str	r2, [r5, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	f7f5 fd0e 	bl	8001a94 <_lseek>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_lseek_r+0x1e>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_lseek_r+0x1e>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	200006f4 	.word	0x200006f4

0800c088 <__swhatbuf_r>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	460e      	mov	r6, r1
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2900      	cmp	r1, #0
 800c092:	b096      	sub	sp, #88	; 0x58
 800c094:	4614      	mov	r4, r2
 800c096:	461d      	mov	r5, r3
 800c098:	da08      	bge.n	800c0ac <__swhatbuf_r+0x24>
 800c09a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	602a      	str	r2, [r5, #0]
 800c0a2:	061a      	lsls	r2, r3, #24
 800c0a4:	d410      	bmi.n	800c0c8 <__swhatbuf_r+0x40>
 800c0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0aa:	e00e      	b.n	800c0ca <__swhatbuf_r+0x42>
 800c0ac:	466a      	mov	r2, sp
 800c0ae:	f000 f8c1 	bl	800c234 <_fstat_r>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	dbf1      	blt.n	800c09a <__swhatbuf_r+0x12>
 800c0b6:	9a01      	ldr	r2, [sp, #4]
 800c0b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0c0:	425a      	negs	r2, r3
 800c0c2:	415a      	adcs	r2, r3
 800c0c4:	602a      	str	r2, [r5, #0]
 800c0c6:	e7ee      	b.n	800c0a6 <__swhatbuf_r+0x1e>
 800c0c8:	2340      	movs	r3, #64	; 0x40
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	b016      	add	sp, #88	; 0x58
 800c0d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0d4 <__smakebuf_r>:
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d8:	079d      	lsls	r5, r3, #30
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	d507      	bpl.n	800c0f0 <__smakebuf_r+0x1c>
 800c0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	b002      	add	sp, #8
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	ab01      	add	r3, sp, #4
 800c0f2:	466a      	mov	r2, sp
 800c0f4:	f7ff ffc8 	bl	800c088 <__swhatbuf_r>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7ff fa35 	bl	800b56c <_malloc_r>
 800c102:	b948      	cbnz	r0, 800c118 <__smakebuf_r+0x44>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	059a      	lsls	r2, r3, #22
 800c10a:	d4ef      	bmi.n	800c0ec <__smakebuf_r+0x18>
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	f043 0302 	orr.w	r3, r3, #2
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	e7e3      	b.n	800c0e0 <__smakebuf_r+0xc>
 800c118:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <__smakebuf_r+0x7c>)
 800c11a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c124:	81a3      	strh	r3, [r4, #12]
 800c126:	9b00      	ldr	r3, [sp, #0]
 800c128:	6163      	str	r3, [r4, #20]
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	6120      	str	r0, [r4, #16]
 800c12e:	b15b      	cbz	r3, 800c148 <__smakebuf_r+0x74>
 800c130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c134:	4630      	mov	r0, r6
 800c136:	f000 f88f 	bl	800c258 <_isatty_r>
 800c13a:	b128      	cbz	r0, 800c148 <__smakebuf_r+0x74>
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	f023 0303 	bic.w	r3, r3, #3
 800c142:	f043 0301 	orr.w	r3, r3, #1
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	89a0      	ldrh	r0, [r4, #12]
 800c14a:	4305      	orrs	r5, r0
 800c14c:	81a5      	strh	r5, [r4, #12]
 800c14e:	e7cd      	b.n	800c0ec <__smakebuf_r+0x18>
 800c150:	0800a20d 	.word	0x0800a20d

0800c154 <memmove>:
 800c154:	4288      	cmp	r0, r1
 800c156:	b510      	push	{r4, lr}
 800c158:	eb01 0402 	add.w	r4, r1, r2
 800c15c:	d902      	bls.n	800c164 <memmove+0x10>
 800c15e:	4284      	cmp	r4, r0
 800c160:	4623      	mov	r3, r4
 800c162:	d807      	bhi.n	800c174 <memmove+0x20>
 800c164:	1e43      	subs	r3, r0, #1
 800c166:	42a1      	cmp	r1, r4
 800c168:	d008      	beq.n	800c17c <memmove+0x28>
 800c16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c172:	e7f8      	b.n	800c166 <memmove+0x12>
 800c174:	4402      	add	r2, r0
 800c176:	4601      	mov	r1, r0
 800c178:	428a      	cmp	r2, r1
 800c17a:	d100      	bne.n	800c17e <memmove+0x2a>
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c186:	e7f7      	b.n	800c178 <memmove+0x24>

0800c188 <__malloc_lock>:
 800c188:	4801      	ldr	r0, [pc, #4]	; (800c190 <__malloc_lock+0x8>)
 800c18a:	f7fe bc84 	b.w	800aa96 <__retarget_lock_acquire_recursive>
 800c18e:	bf00      	nop
 800c190:	200006e8 	.word	0x200006e8

0800c194 <__malloc_unlock>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__malloc_unlock+0x8>)
 800c196:	f7fe bc7f 	b.w	800aa98 <__retarget_lock_release_recursive>
 800c19a:	bf00      	nop
 800c19c:	200006e8 	.word	0x200006e8

0800c1a0 <_realloc_r>:
 800c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	4614      	mov	r4, r2
 800c1a8:	460e      	mov	r6, r1
 800c1aa:	b921      	cbnz	r1, 800c1b6 <_realloc_r+0x16>
 800c1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	f7ff b9db 	b.w	800b56c <_malloc_r>
 800c1b6:	b92a      	cbnz	r2, 800c1c4 <_realloc_r+0x24>
 800c1b8:	f7ff f96c 	bl	800b494 <_free_r>
 800c1bc:	4625      	mov	r5, r4
 800c1be:	4628      	mov	r0, r5
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c4:	f000 f858 	bl	800c278 <_malloc_usable_size_r>
 800c1c8:	4284      	cmp	r4, r0
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	d802      	bhi.n	800c1d4 <_realloc_r+0x34>
 800c1ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1d2:	d812      	bhi.n	800c1fa <_realloc_r+0x5a>
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f7ff f9c8 	bl	800b56c <_malloc_r>
 800c1dc:	4605      	mov	r5, r0
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d0ed      	beq.n	800c1be <_realloc_r+0x1e>
 800c1e2:	42bc      	cmp	r4, r7
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	bf28      	it	cs
 800c1ea:	463a      	movcs	r2, r7
 800c1ec:	f7fe fc70 	bl	800aad0 <memcpy>
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4640      	mov	r0, r8
 800c1f4:	f7ff f94e 	bl	800b494 <_free_r>
 800c1f8:	e7e1      	b.n	800c1be <_realloc_r+0x1e>
 800c1fa:	4635      	mov	r5, r6
 800c1fc:	e7df      	b.n	800c1be <_realloc_r+0x1e>
	...

0800c200 <_read_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	; (800c220 <_read_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f5 fbe0 	bl	80019d4 <_read>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_read_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_read_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	200006f4 	.word	0x200006f4

0800c224 <abort>:
 800c224:	b508      	push	{r3, lr}
 800c226:	2006      	movs	r0, #6
 800c228:	f000 f856 	bl	800c2d8 <raise>
 800c22c:	2001      	movs	r0, #1
 800c22e:	f7f5 fbc7 	bl	80019c0 <_exit>
	...

0800c234 <_fstat_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	; (800c254 <_fstat_r+0x20>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f5 fc0c 	bl	8001a5e <_fstat>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_fstat_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_fstat_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	200006f4 	.word	0x200006f4

0800c258 <_isatty_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_isatty_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f5 fc0b 	bl	8001a7e <_isatty>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_isatty_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_isatty_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200006f4 	.word	0x200006f4

0800c278 <_malloc_usable_size_r>:
 800c278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c27c:	1f18      	subs	r0, r3, #4
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bfbc      	itt	lt
 800c282:	580b      	ldrlt	r3, [r1, r0]
 800c284:	18c0      	addlt	r0, r0, r3
 800c286:	4770      	bx	lr

0800c288 <_raise_r>:
 800c288:	291f      	cmp	r1, #31
 800c28a:	b538      	push	{r3, r4, r5, lr}
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	d904      	bls.n	800c29c <_raise_r+0x14>
 800c292:	2316      	movs	r3, #22
 800c294:	6003      	str	r3, [r0, #0]
 800c296:	f04f 30ff 	mov.w	r0, #4294967295
 800c29a:	bd38      	pop	{r3, r4, r5, pc}
 800c29c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c29e:	b112      	cbz	r2, 800c2a6 <_raise_r+0x1e>
 800c2a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2a4:	b94b      	cbnz	r3, 800c2ba <_raise_r+0x32>
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f000 f830 	bl	800c30c <_getpid_r>
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2b6:	f000 b817 	b.w	800c2e8 <_kill_r>
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d00a      	beq.n	800c2d4 <_raise_r+0x4c>
 800c2be:	1c59      	adds	r1, r3, #1
 800c2c0:	d103      	bne.n	800c2ca <_raise_r+0x42>
 800c2c2:	2316      	movs	r3, #22
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	e7e7      	b.n	800c29a <_raise_r+0x12>
 800c2ca:	2400      	movs	r4, #0
 800c2cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	4798      	blx	r3
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e7e0      	b.n	800c29a <_raise_r+0x12>

0800c2d8 <raise>:
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <raise+0xc>)
 800c2da:	4601      	mov	r1, r0
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f7ff bfd3 	b.w	800c288 <_raise_r>
 800c2e2:	bf00      	nop
 800c2e4:	20000050 	.word	0x20000050

0800c2e8 <_kill_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_kill_r+0x20>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f7f5 fb53 	bl	80019a0 <_kill>
 800c2fa:	1c43      	adds	r3, r0, #1
 800c2fc:	d102      	bne.n	800c304 <_kill_r+0x1c>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b103      	cbz	r3, 800c304 <_kill_r+0x1c>
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	bf00      	nop
 800c308:	200006f4 	.word	0x200006f4

0800c30c <_getpid_r>:
 800c30c:	f7f5 bb40 	b.w	8001990 <_getpid>

0800c310 <_init>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr

0800c31c <_fini>:
 800c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31e:	bf00      	nop
 800c320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c322:	bc08      	pop	{r3}
 800c324:	469e      	mov	lr, r3
 800c326:	4770      	bx	lr
